(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
  var require_react_dom_server_legacy_browser_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React2 = require_react();
          var ReactVersion = "18.3.1";
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function scheduleWork(callback) {
            callback();
          }
          function beginWriting(destination) {
          }
          function writeChunk(destination, chunk) {
            writeChunkAndReturn(destination, chunk);
          }
          function writeChunkAndReturn(destination, chunk) {
            return destination.push(chunk);
          }
          function completeWriting(destination) {
          }
          function close(destination) {
            destination.push(null);
          }
          function stringToChunk(content) {
            return content;
          }
          function stringToPrecomputedChunk(content) {
            return content;
          }
          function closeWithError(destination, error2) {
            destination.destroy(error2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str = "" + string;
            var match = matchHtmlRegExp.exec(str);
            if (!match) {
              return str;
            }
            var escape;
            var html = "";
            var index;
            var lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
              switch (str.charCodeAt(index)) {
                case 34:
                  escape = "&quot;";
                  break;
                case 38:
                  escape = "&amp;";
                  break;
                case 39:
                  escape = "&#x27;";
                  break;
                case 60:
                  escape = "&lt;";
                  break;
                case 62:
                  escape = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index) {
                html += str.substring(lastIndex, index);
              }
              lastIndex = index + 1;
              html += escape;
            }
            return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
          }
          function escapeTextForBrowser(text) {
            if (typeof text === "boolean" || typeof text === "number") {
              return "" + text;
            }
            return escapeHtml(text);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("<\/script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
          var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function(match, prefix2, s, suffix) {
            return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
          };
          function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
            }
            if (bootstrapScripts !== void 0) {
              for (var i = 0; i < bootstrapScripts.length; i++) {
                bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue
            };
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            return id + ":";
          }
          function encodeHTMLTextNode(text) {
            return escapeTextForBrowser(text);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target, text, responseState, textEmbedded) {
            if (text === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            target.push(stringToChunk(encodeHTMLTextNode(text)));
            return true;
          }
          function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
            if (lastPushedText && textEmbedded) {
              target.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target, responseState, style) {
            if (typeof style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
            var isFirst = true;
            for (var styleName in style) {
              if (!hasOwnProperty.call(style, styleName)) {
                continue;
              }
              var styleValue = style[styleName];
              if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName(styleName);
                if (typeof styleValue === "number") {
                  if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
                }
              }
              if (isFirst) {
                isFirst = false;
                target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
              } else {
                target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target, responseState, name, value) {
            switch (name) {
              case "style": {
                pushStyle(target, responseState, value);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (
              // shouldIgnoreAttribute
              // We have already filtered out null/undefined and reserved words.
              name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
            ) {
              return;
            }
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo !== null) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value) {
                    target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value === true) {
                    target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  } else if (value === false)
                    ;
                  else {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value)) {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value) && value >= 1) {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value, attributeName);
                    }
                    value = "" + value;
                    sanitizeURL(value);
                  }
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
            } else if (isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 !== "data-" && prefix2 !== "aria-") {
                    return;
                  }
                }
              }
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target, innerHTML, children) {
            if (innerHTML != null) {
              if (children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value = props[propName];
              if (value != null) {
                var array = isArray(value);
                if (props.multiple && !array) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
                } else if (!props.multiple && array) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
                }
              }
            }
          }
          function pushStartSelect(target, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultSelectValue = true;
              }
            }
            target.push(startChunkForTag("select"));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function flattenOptionChildren(children) {
            var content = "";
            React2.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
              {
                if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                  didWarnInvalidOptionChildren = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              }
            });
            return content;
          }
          var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
          function pushStartOption(target, props, responseState, formatContext) {
            var selectedValue = formatContext.selectedValue;
            target.push(startChunkForTag("option"));
            var children = null;
            var value = null;
            var selected = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "selected":
                    selected = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value = propValue;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value !== null) {
                {
                  checkAttributeStringCoercion(value, "value");
                }
                stringValue = "" + value;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                    }
                  }
                }
                stringValue = flattenOptionChildren(children);
              }
              if (isArray(selectedValue)) {
                for (var i = 0; i < selectedValue.length; i++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i], "value");
                  }
                  var v = "" + selectedValue[i];
                  if (v === stringValue) {
                    target.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target.push(selectedMarkerAttribute);
                }
              }
            } else if (selected) {
              target.push(selectedMarkerAttribute);
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function pushInput(target, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultInputValue = true;
              }
            }
            target.push(startChunkForTag("input"));
            var value = null;
            var defaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "defaultChecked":
                    defaultChecked = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "checked":
                    checked = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked !== null) {
              pushAttribute(target, responseState, "checked", checked);
            } else if (defaultChecked !== null) {
              pushAttribute(target, responseState, "checked", defaultChecked);
            }
            if (value !== null) {
              pushAttribute(target, responseState, "value", value);
            } else if (defaultValue !== null) {
              pushAttribute(target, responseState, "value", defaultValue);
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
                error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultTextareaValue = true;
              }
            }
            target.push(startChunkForTag("textarea"));
            var value = null;
            var defaultValue = null;
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value === null && defaultValue !== null) {
              value = defaultValue;
            }
            target.push(endOfStartTag);
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              if (value != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                {
                  checkHtmlStringCoercion(children[0]);
                }
                value = "" + children[0];
              }
              {
                checkHtmlStringCoercion(children);
              }
              value = "" + children;
            }
            if (typeof value === "string" && value[0] === "\n") {
              target.push(leadingNewline);
            }
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              target.push(stringToChunk(encodeHTMLTextNode("" + value)));
            }
            return null;
          }
          function pushSelfClosing(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target, props, responseState) {
            target.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target, props, responseState) {
            target.push(startChunkForTag("title"));
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            {
              var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && child.$$typeof != null) {
                error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && typeof child !== "string" && typeof child !== "number") {
                error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              }
            }
            return children;
          }
          function pushStartGenericElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            if (typeof children === "string") {
              target.push(stringToChunk(encodeHTMLTextNode(children)));
              return null;
            }
            return children;
          }
          function pushStartCustomElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                      target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                    }
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            if (innerHTML != null) {
              if (children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                  target.push(leadingNewline, stringToChunk(html));
                } else {
                  {
                    checkHtmlStringCoercion(html);
                  }
                  target.push(stringToChunk("" + html));
                }
              }
            }
            if (typeof children === "string" && children[0] === "\n") {
              target.push(leadingNewline);
            }
            return children;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag) {
            var tagStartChunk = validatedTagCache.get(tag);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag)) {
                throw new Error("Invalid tag: " + tag);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag);
              validatedTagCache.set(tag, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(target, type, props, responseState, formatContext) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
              if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
                if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target, props, responseState);
              case "option":
                return pushStartOption(target, props, responseState, formatContext);
              case "textarea":
                return pushStartTextArea(target, props, responseState);
              case "input":
                return pushInput(target, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target, props, responseState);
              case "title":
                return pushStartTitle(target, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(target, props, type, responseState);
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(target, props, type, responseState);
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target.push(DOCTYPE);
                }
                return pushStartGenericElement(target, props, type, responseState);
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(target, props, type, responseState);
                } else {
                  return pushStartCustomElement(target, props, type, responseState);
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i = 0;
            for (; i < bootstrapChunks.length - 1; i++) {
              writeChunk(destination, bootstrapChunks[i]);
            }
            if (i < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder2 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder2);
          }
          var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
          var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
          }
          function writeStartPendingSuspenseBoundary(destination, responseState, id) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, id);
            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
          }
          function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
            var result;
            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
            }
            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
            return result;
          }
          function writeEndCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
          function writeStartSegment(destination, responseState, formatContext, id) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
          var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            var formattedContentID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
          var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input) {
            var escaped = JSON.stringify(input);
            return escaped.replace(regexForJSStringsInScripts, function(match) {
              switch (match) {
                case "<":
                  return "\\u003c";
                case "\u2028":
                  return "\\u2028";
                case "\u2029":
                  return "\\u2029";
                default: {
                  throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
                }
              }
            });
          }
          function createResponseState$1(generateStaticMarkup, identifierPrefix) {
            var responseState = createResponseState(identifierPrefix, void 0);
            return {
              // Keep this in sync with ReactDOMServerFormatConfig
              bootstrapChunks: responseState.bootstrapChunks,
              startInlineScript: responseState.startInlineScript,
              placeholderPrefix: responseState.placeholderPrefix,
              segmentPrefix: responseState.segmentPrefix,
              boundaryPrefix: responseState.boundaryPrefix,
              idPrefix: responseState.idPrefix,
              nextSuspenseID: responseState.nextSuspenseID,
              sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
              sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
              sentClientRenderFunction: responseState.sentClientRenderFunction,
              // This is an extra field for the legacy renderer
              generateStaticMarkup
            };
          }
          function createRootFormatContext() {
            return {
              insertionMode: HTML_MODE,
              // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
              selectedValue: null
            };
          }
          function pushTextInstance$1(target, text, responseState, textEmbedded) {
            if (responseState.generateStaticMarkup) {
              target.push(stringToChunk(escapeTextForBrowser(text)));
              return false;
            } else {
              return pushTextInstance(target, text, responseState, textEmbedded);
            }
          }
          function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
            if (responseState.generateStaticMarkup) {
              return;
            } else {
              return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
            }
          }
          function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartCompletedSuspenseBoundary(destination);
          }
          function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
          }
          function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndCompletedSuspenseBoundary(destination);
          }
          function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndClientRenderedSuspenseBoundary(destination);
          }
          var assign = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              return context;
            }
          }
          function processChildContext(instance, type, parentContext, childContextTypes) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev) {
            {
              prev.context._currentValue2 = prev.parentValue;
            }
          }
          function pushNode(next) {
            {
              next.context._currentValue2 = next.value;
            }
          }
          function popToNearestCommonAncestor(prev, next) {
            if (prev === next)
              ;
            else {
              popNode(prev);
              var parentPrev = prev.parent;
              var parentNext = next.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
              } else {
                if (parentNext === null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next);
            }
          }
          function popAllPrevious(prev) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next) {
            var parentNext = next.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next);
          }
          function popPreviousToCommonLevel(prev, next) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (parentPrev.depth === next.depth) {
              popToNearestCommonAncestor(parentPrev, next);
            } else {
              popPreviousToCommonLevel(parentPrev, next);
            }
          }
          function popNextToCommonLevel(prev, next) {
            var parentNext = next.parent;
            if (parentNext === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (prev.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev, parentNext);
            } else {
              popNextToCommonLevel(prev, parentNext);
            }
            pushNode(next);
          }
          function switchContext(newSnapshot) {
            var prev = currentActiveSnapshot;
            var next = newSnapshot;
            if (prev !== next) {
              if (prev === null) {
                pushAllNext(next);
              } else if (next === null) {
                popAllPrevious(prev);
              } else if (prev.depth === next.depth) {
                popToNearestCommonAncestor(prev, next);
              } else if (prev.depth > next.depth) {
                popPreviousToCommonLevel(prev, next);
              } else {
                popNextToCommonLevel(prev, next);
              }
              currentActiveSnapshot = next;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue2;
              context._currentValue2 = nextValue;
              {
                if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
            }
            {
              if (prevSnapshot.context !== context) {
                error("The parent context is not the expected context. This is probably a bug in React.");
              }
            }
            {
              var _value = prevSnapshot.parentValue;
              if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue2 = _value;
              }
              {
                if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            return currentActiveSnapshot = prevSnapshot.parent;
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value = context._currentValue2;
            return value;
          }
          function get(key) {
            return key._reactInternals;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function(inst) {
              return false;
            },
            enqueueSetState: function(inst, payload, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var internals = get(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            }
          };
          function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn(
                      // keep this warning in sync with ReactStrictModeWarning.js
                      "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                      componentName
                    );
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                  var partial = oldQueue[i];
                  var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign({}, nextState, partialState);
                    } else {
                      assign(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState = instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false
            };
            set(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: ""
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: 1 << restOfLength | id,
                overflow
              };
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: 1 << length | _id,
                overflow: _overflow
              };
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
            {
              if (isInHookUserCodeInDev) {
                error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error("Rendered more hooks than during the previous render");
            }
            return {
              memoizedState: null,
              queue: null,
              next: null
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children = Component(props, refOrContext);
            }
            resetHooksState();
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            return readContext(context);
          }
          function useContext(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function useState(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer(
              basicStateReducer,
              // useReducer has a special case to support lazy useState initializers
              initialState
            );
          }
          function useReducer(reducer, initialArg, init) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState = typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init !== void 0 ? init(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = workInProgressHook.queue = {
                last: null,
                dispatch: null
              };
              var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect(create, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
            }
          }
          function dispatchAction(componentIdentity, queue, action) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action,
                next: null
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback(callback, deps) {
            return useMemo(function() {
              return callback;
            }, deps);
          }
          function useMutableSource(source, getSnapshot, subscribe) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source._source);
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value) {
            resolveCurrentlyRenderingComponent();
            return value;
          }
          function unsupportedStartTransition() {
            throw new Error("startTransition cannot be called during server rendering.");
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop() {
          }
          var Dispatcher = {
            readContext: readContext$1,
            useContext,
            useMemo,
            useReducer,
            useRef,
            useState,
            useInsertionEffect: noop,
            useLayoutEffect,
            useCallback,
            // useImperativeHandle is not run in the server environment
            useImperativeHandle: noop,
            // Effects are not run in the server environment.
            useEffect: noop,
            // Debugging effect
            useDebugValue: noop,
            useDeferredValue,
            useTransition,
            useId,
            // Subscriptions are not setup in a server environment.
            useMutableSource,
            useSyncExternalStore
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info = "";
              var node = componentStack;
              do {
                switch (node.tag) {
                  case 0:
                    info += describeBuiltInComponentFrame(node.type, null, null);
                    break;
                  case 1:
                    info += describeFunctionComponentFrame(node.type, null, null);
                    break;
                  case 2:
                    info += describeClassComponentFrame(node.type, null, null);
                    break;
                }
                node = node.parent;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error2) {
            console["error"](error2);
            return null;
          }
          function noop$1() {
          }
          function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError2 === void 0 ? defaultErrorHandler : onError2,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
            };
            var rootSegment = createPendingSegment(
              request,
              0,
              null,
              rootFormatContext,
              // Root segments are never embedded in Text on either edge
              false,
              false
            );
            rootSegment.parentFlushed = true;
            var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function() {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null
            };
          }
          function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node,
              ping: function() {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
            return {
              status: PENDING,
              id: -1,
              // lazily assigned later
              index,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
                return "";
              }
              return getStackByComponentStackNode(currentTaskInDEV.componentStack);
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error("Unexpectedly popped too many stack frames. This is a bug in React.");
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error2) {
            {
              var errorMessage;
              if (typeof error2 === "string") {
                errorMessage = error2;
              } else if (error2 && typeof error2.message === "string") {
                errorMessage = error2.message;
              } else {
                errorMessage = String(error2);
              }
              var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error2) {
            var errorDigest = request.onError(error2);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
            }
            return errorDigest;
          }
          function fatalError(request, error2) {
            var onShellError = request.onShellError;
            onShellError(error2);
            var onFatalError = request.onFatalError;
            onFatalError(error2);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error2);
            } else {
              request.status = CLOSING;
              request.fatalError = error2;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(
              request,
              insertionIndex,
              newBoundary,
              parentSegment.formatContext,
              // boundaries never require text embedding at their edges because comment nodes bound them
              false,
              false
            );
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(
              request,
              0,
              null,
              parentSegment.formatContext,
              // boundaries never require text embedding at their edges because comment nodes bound them
              false,
              false
            );
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content);
              pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error2) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error2);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error2);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(prevContext, type, props);
            renderNode(request, task, children);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(request, task, instance, Component, props) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(Component, props, maskedContext);
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutDefaultPropsOnFunctionComponent = {};
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(request, task, Component, props) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value = renderWithHooks(request, task, Component, props, legacyContext);
            var hasId = checkDidRenderIdHook();
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value, Component, props, legacyContext);
              finishClassComponent(request, task, value, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index = 0;
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
                try {
                  renderNodeDestructive(request, task, value);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children = renderWithHooks(request, task, type.render, props, ref);
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, children);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value = props.value;
            var children = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value);
            renderNodeDestructive(request, task, children);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
              }
            }
          }
          function renderLazyComponent(request, task, lazyComponent, props, ref) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error("ReactDOMServer does not yet support scope components.");
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info = "";
            {
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              iterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node);
              } catch (x) {
                if (typeof x === "object" && x !== null && typeof x.then === "function")
                  ;
                else {
                  lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
                }
                throw x;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node) {
            task.node = node;
            if (typeof node === "object" && node !== null) {
              switch (node.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element = node;
                  var type = element.type;
                  var props = element.props;
                  var ref = element.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                case REACT_LAZY_TYPE: {
                  var lazyNode = node;
                  var payload = lazyNode._payload;
                  var init = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init(payload);
                    } catch (x) {
                      if (typeof x === "object" && x !== null && typeof x.then === "function") {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray(node)) {
                renderChildrenArray(request, task, node);
                return;
              }
              var iteratorFn = getIteratorFn(node);
              if (iteratorFn) {
                {
                  validateIterable(node, iteratorFn);
                }
                var iterator = iteratorFn.call(node);
                if (iterator) {
                  var step = iterator.next();
                  if (!step.done) {
                    var children = [];
                    do {
                      children.push(step.value);
                      step = iterator.next();
                    } while (!step.done);
                    renderChildrenArray(request, task, children);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node);
              throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
            }
            if (typeof node === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
              return;
            }
            if (typeof node === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
              return;
            }
            {
              if (typeof node === "function") {
                error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
              }
            }
          }
          function renderChildrenArray(request, task, children) {
            var totalChildren = children.length;
            for (var i = 0; i < totalChildren; i++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
              try {
                renderNode(request, task, children[i]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(
              request,
              insertionIndex,
              null,
              segment.formatContext,
              // Adopt the parent segment's leading text embed
              segment.lastPushedText,
              // Assume we are text embedded at the trailing edge
              true
            );
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x.then(ping, ping);
          }
          function renderNode(request, task, node) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node);
            } catch (x) {
              resetHooksState();
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                spawnNewSuspendedTask(request, task, x);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x;
              }
            }
          }
          function erroredTask(request, boundary, segment, error2) {
            var errorDigest = logRecoverableError(request, error2);
            if (boundary === null) {
              fatalError(request, error2);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error2);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix = "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error("There can only be one root segment. This is a bug in React.");
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender)
                ;
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x) {
              resetHooksState();
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i;
              for (i = 0; i < pingedTasks.length; i++) {
                var task = pingedTasks[i];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = segment.id = request.nextSegmentId++;
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(destination, request.responseState, segmentID);
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children = segment.children;
                for (var childIdx = 0; childIdx < children.length; childIdx++) {
                  var nextChild = children[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r;
              }
              default: {
                throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
              writeStartPendingSuspenseBoundary(destination, request.responseState, id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else {
              writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              flushPartiallyCompletedSegment(request, destination, boundary, segment);
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
                i++;
                completedSegments.splice(0, i);
                return false;
              }
            }
            completedSegments.splice(0, i);
            return true;
          }
          function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = segment.id = boundary.rootSegmentID;
              if (rootSegmentID === -1) {
                throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
            }
          }
          function flushCompletedQueues(request, destination) {
            try {
              var completedRootSegment = request.completedRootSegment;
              if (completedRootSegment !== null && request.pendingRootTasks === 0) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i;
              for (i = 0; i < clientRenderedBoundaries.length; i++) {
                var boundary = clientRenderedBoundaries[i];
                if (!flushClientRenderedBoundary(request, destination, boundary)) {
                  request.destination = null;
                  i++;
                  clientRenderedBoundaries.splice(0, i);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i);
              var completedBoundaries = request.completedBoundaries;
              for (i = 0; i < completedBoundaries.length; i++) {
                var _boundary = completedBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i++;
                  completedBoundaries.splice(0, i);
                  return;
                }
              }
              completedBoundaries.splice(0, i);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i = 0; i < partialBoundaries.length; i++) {
                var _boundary2 = partialBoundaries[i];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i++;
                  partialBoundaries.splice(0, i);
                  return;
                }
              }
              partialBoundaries.splice(0, i);
              var largeBoundaries = request.completedBoundaries;
              for (i = 0; i < largeBoundaries.length; i++) {
                var _boundary3 = largeBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i++;
                  largeBoundaries.splice(0, i);
                  return;
                }
              }
              largeBoundaries.splice(0, i);
            } finally {
              if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error("There was still abortable task at the root when we closed. This is a bug in React.");
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function onError() {
          }
          function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
            var didFatal = false;
            var fatalError2 = null;
            var result = "";
            var destination = {
              push: function(chunk) {
                if (chunk !== null) {
                  result += chunk;
                }
                return true;
              },
              destroy: function(error2) {
                didFatal = true;
                fatalError2 = error2;
              }
            };
            var readyToStream = false;
            function onShellReady() {
              readyToStream = true;
            }
            var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0);
            startWork(request);
            abort(request, abortReason);
            startFlowing(request, destination);
            if (didFatal) {
              throw fatalError2;
            }
            if (!readyToStream) {
              throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
            return result;
          }
          function renderToString(children, options) {
            return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
          }
          function renderToStaticMarkup(children, options) {
            return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
          }
          function renderToNodeStream() {
            throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
          }
          function renderToStaticNodeStream() {
            throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
          }
          exports.renderToNodeStream = renderToNodeStream;
          exports.renderToStaticMarkup = renderToStaticMarkup;
          exports.renderToStaticNodeStream = renderToStaticNodeStream;
          exports.renderToString = renderToString;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-server.browser.development.js
  var require_react_dom_server_browser_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React2 = require_react();
          var ReactVersion = "18.3.1";
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function scheduleWork(callback) {
            callback();
          }
          var VIEW_SIZE = 512;
          var currentView = null;
          var writtenBytes = 0;
          function beginWriting(destination) {
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          function writeChunk(destination, chunk) {
            if (chunk.length === 0) {
              return;
            }
            if (chunk.length > VIEW_SIZE) {
              if (writtenBytes > 0) {
                destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
              }
              destination.enqueue(chunk);
              return;
            }
            var bytesToWrite = chunk;
            var allowableBytes = currentView.length - writtenBytes;
            if (allowableBytes < bytesToWrite.length) {
              if (allowableBytes === 0) {
                destination.enqueue(currentView);
              } else {
                currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
                destination.enqueue(currentView);
                bytesToWrite = bytesToWrite.subarray(allowableBytes);
              }
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            currentView.set(bytesToWrite, writtenBytes);
            writtenBytes += bytesToWrite.length;
          }
          function writeChunkAndReturn(destination, chunk) {
            writeChunk(destination, chunk);
            return true;
          }
          function completeWriting(destination) {
            if (currentView && writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = null;
              writtenBytes = 0;
            }
          }
          function close(destination) {
            destination.close();
          }
          var textEncoder = new TextEncoder();
          function stringToChunk(content) {
            return textEncoder.encode(content);
          }
          function stringToPrecomputedChunk(content) {
            return textEncoder.encode(content);
          }
          function closeWithError(destination, error2) {
            if (typeof destination.error === "function") {
              destination.error(error2);
            } else {
              destination.close();
            }
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str = "" + string;
            var match = matchHtmlRegExp.exec(str);
            if (!match) {
              return str;
            }
            var escape;
            var html = "";
            var index;
            var lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
              switch (str.charCodeAt(index)) {
                case 34:
                  escape = "&quot;";
                  break;
                case 38:
                  escape = "&amp;";
                  break;
                case 39:
                  escape = "&#x27;";
                  break;
                case 60:
                  escape = "&lt;";
                  break;
                case 62:
                  escape = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index) {
                html += str.substring(lastIndex, index);
              }
              lastIndex = index + 1;
              html += escape;
            }
            return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
          }
          function escapeTextForBrowser(text) {
            if (typeof text === "boolean" || typeof text === "number") {
              return "" + text;
            }
            return escapeHtml(text);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("<\/script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
          var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function(match, prefix2, s, suffix) {
            return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
          };
          function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
            }
            if (bootstrapScripts !== void 0) {
              for (var i = 0; i < bootstrapScripts.length; i++) {
                bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue
            };
          }
          function createRootFormatContext(namespaceURI) {
            var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
            return createFormatContext(insertionMode, null);
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            return id + ":";
          }
          function encodeHTMLTextNode(text) {
            return escapeTextForBrowser(text);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target, text, responseState, textEmbedded) {
            if (text === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            target.push(stringToChunk(encodeHTMLTextNode(text)));
            return true;
          }
          function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
            if (lastPushedText && textEmbedded) {
              target.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target, responseState, style) {
            if (typeof style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
            var isFirst = true;
            for (var styleName in style) {
              if (!hasOwnProperty.call(style, styleName)) {
                continue;
              }
              var styleValue = style[styleName];
              if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName(styleName);
                if (typeof styleValue === "number") {
                  if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
                }
              }
              if (isFirst) {
                isFirst = false;
                target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
              } else {
                target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target, responseState, name, value) {
            switch (name) {
              case "style": {
                pushStyle(target, responseState, value);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (
              // shouldIgnoreAttribute
              // We have already filtered out null/undefined and reserved words.
              name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
            ) {
              return;
            }
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo !== null) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value) {
                    target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value === true) {
                    target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  } else if (value === false)
                    ;
                  else {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value)) {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value) && value >= 1) {
                    target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value, attributeName);
                    }
                    value = "" + value;
                    sanitizeURL(value);
                  }
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
            } else if (isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 !== "data-" && prefix2 !== "aria-") {
                    return;
                  }
                }
              }
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target, innerHTML, children) {
            if (innerHTML != null) {
              if (children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value = props[propName];
              if (value != null) {
                var array = isArray(value);
                if (props.multiple && !array) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
                } else if (!props.multiple && array) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
                }
              }
            }
          }
          function pushStartSelect(target, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultSelectValue = true;
              }
            }
            target.push(startChunkForTag("select"));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function flattenOptionChildren(children) {
            var content = "";
            React2.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
              {
                if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                  didWarnInvalidOptionChildren = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              }
            });
            return content;
          }
          var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
          function pushStartOption(target, props, responseState, formatContext) {
            var selectedValue = formatContext.selectedValue;
            target.push(startChunkForTag("option"));
            var children = null;
            var value = null;
            var selected = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "selected":
                    selected = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value = propValue;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value !== null) {
                {
                  checkAttributeStringCoercion(value, "value");
                }
                stringValue = "" + value;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                    }
                  }
                }
                stringValue = flattenOptionChildren(children);
              }
              if (isArray(selectedValue)) {
                for (var i = 0; i < selectedValue.length; i++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i], "value");
                  }
                  var v = "" + selectedValue[i];
                  if (v === stringValue) {
                    target.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target.push(selectedMarkerAttribute);
                }
              }
            } else if (selected) {
              target.push(selectedMarkerAttribute);
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function pushInput(target, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultInputValue = true;
              }
            }
            target.push(startChunkForTag("input"));
            var value = null;
            var defaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "defaultChecked":
                    defaultChecked = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "checked":
                    checked = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked !== null) {
              pushAttribute(target, responseState, "checked", checked);
            } else if (defaultChecked !== null) {
              pushAttribute(target, responseState, "checked", defaultChecked);
            }
            if (value !== null) {
              pushAttribute(target, responseState, "value", value);
            } else if (defaultValue !== null) {
              pushAttribute(target, responseState, "value", defaultValue);
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
                error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultTextareaValue = true;
              }
            }
            target.push(startChunkForTag("textarea"));
            var value = null;
            var defaultValue = null;
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value === null && defaultValue !== null) {
              value = defaultValue;
            }
            target.push(endOfStartTag);
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              if (value != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                {
                  checkHtmlStringCoercion(children[0]);
                }
                value = "" + children[0];
              }
              {
                checkHtmlStringCoercion(children);
              }
              value = "" + children;
            }
            if (typeof value === "string" && value[0] === "\n") {
              target.push(leadingNewline);
            }
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              target.push(stringToChunk(encodeHTMLTextNode("" + value)));
            }
            return null;
          }
          function pushSelfClosing(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target, props, responseState) {
            target.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target, props, responseState) {
            target.push(startChunkForTag("title"));
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            {
              var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && child.$$typeof != null) {
                error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && typeof child !== "string" && typeof child !== "number") {
                error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              }
            }
            return children;
          }
          function pushStartGenericElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            if (typeof children === "string") {
              target.push(stringToChunk(encodeHTMLTextNode(children)));
              return null;
            }
            return children;
          }
          function pushStartCustomElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                      target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                    }
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            if (innerHTML != null) {
              if (children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                  target.push(leadingNewline, stringToChunk(html));
                } else {
                  {
                    checkHtmlStringCoercion(html);
                  }
                  target.push(stringToChunk("" + html));
                }
              }
            }
            if (typeof children === "string" && children[0] === "\n") {
              target.push(leadingNewline);
            }
            return children;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag) {
            var tagStartChunk = validatedTagCache.get(tag);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag)) {
                throw new Error("Invalid tag: " + tag);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag);
              validatedTagCache.set(tag, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(target, type, props, responseState, formatContext) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
              if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
                if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target, props, responseState);
              case "option":
                return pushStartOption(target, props, responseState, formatContext);
              case "textarea":
                return pushStartTextArea(target, props, responseState);
              case "input":
                return pushInput(target, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target, props, responseState);
              case "title":
                return pushStartTitle(target, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(target, props, type, responseState);
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(target, props, type, responseState);
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target.push(DOCTYPE);
                }
                return pushStartGenericElement(target, props, type, responseState);
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(target, props, type, responseState);
                } else {
                  return pushStartCustomElement(target, props, type, responseState);
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i = 0;
            for (; i < bootstrapChunks.length - 1; i++) {
              writeChunk(destination, bootstrapChunks[i]);
            }
            if (i < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder2 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder2);
          }
          var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
          var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
          }
          function writeStartPendingSuspenseBoundary(destination, responseState, id) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, id);
            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
          }
          function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
            var result;
            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
            }
            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
            return result;
          }
          function writeEndCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
          function writeStartSegment(destination, responseState, formatContext, id) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
          var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            var formattedContentID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
          var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input) {
            var escaped = JSON.stringify(input);
            return escaped.replace(regexForJSStringsInScripts, function(match) {
              switch (match) {
                case "<":
                  return "\\u003c";
                case "\u2028":
                  return "\\u2028";
                case "\u2029":
                  return "\\u2029";
                default: {
                  throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
                }
              }
            });
          }
          var assign = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              return context;
            }
          }
          function processChildContext(instance, type, parentContext, childContextTypes) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev) {
            {
              prev.context._currentValue = prev.parentValue;
            }
          }
          function pushNode(next) {
            {
              next.context._currentValue = next.value;
            }
          }
          function popToNearestCommonAncestor(prev, next) {
            if (prev === next)
              ;
            else {
              popNode(prev);
              var parentPrev = prev.parent;
              var parentNext = next.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
              } else {
                if (parentNext === null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next);
            }
          }
          function popAllPrevious(prev) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next) {
            var parentNext = next.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next);
          }
          function popPreviousToCommonLevel(prev, next) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (parentPrev.depth === next.depth) {
              popToNearestCommonAncestor(parentPrev, next);
            } else {
              popPreviousToCommonLevel(parentPrev, next);
            }
          }
          function popNextToCommonLevel(prev, next) {
            var parentNext = next.parent;
            if (parentNext === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (prev.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev, parentNext);
            } else {
              popNextToCommonLevel(prev, parentNext);
            }
            pushNode(next);
          }
          function switchContext(newSnapshot) {
            var prev = currentActiveSnapshot;
            var next = newSnapshot;
            if (prev !== next) {
              if (prev === null) {
                pushAllNext(next);
              } else if (next === null) {
                popAllPrevious(prev);
              } else if (prev.depth === next.depth) {
                popToNearestCommonAncestor(prev, next);
              } else if (prev.depth > next.depth) {
                popPreviousToCommonLevel(prev, next);
              } else {
                popNextToCommonLevel(prev, next);
              }
              currentActiveSnapshot = next;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue;
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
            }
            {
              if (prevSnapshot.context !== context) {
                error("The parent context is not the expected context. This is probably a bug in React.");
              }
            }
            {
              var value = prevSnapshot.parentValue;
              if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue = value;
              }
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
            return currentActiveSnapshot = prevSnapshot.parent;
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value = context._currentValue;
            return value;
          }
          function get(key) {
            return key._reactInternals;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function(inst) {
              return false;
            },
            enqueueSetState: function(inst, payload, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var internals = get(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            }
          };
          function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn(
                      // keep this warning in sync with ReactStrictModeWarning.js
                      "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                      componentName
                    );
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                  var partial = oldQueue[i];
                  var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign({}, nextState, partialState);
                    } else {
                      assign(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState = instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false
            };
            set(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: ""
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: 1 << restOfLength | id,
                overflow
              };
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: 1 << length | _id,
                overflow: _overflow
              };
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
            {
              if (isInHookUserCodeInDev) {
                error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error("Rendered more hooks than during the previous render");
            }
            return {
              memoizedState: null,
              queue: null,
              next: null
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children = Component(props, refOrContext);
            }
            resetHooksState();
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            return readContext(context);
          }
          function useContext(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function useState(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer(
              basicStateReducer,
              // useReducer has a special case to support lazy useState initializers
              initialState
            );
          }
          function useReducer(reducer, initialArg, init) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState = typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init !== void 0 ? init(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = workInProgressHook.queue = {
                last: null,
                dispatch: null
              };
              var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect(create, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
            }
          }
          function dispatchAction(componentIdentity, queue, action) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action,
                next: null
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback(callback, deps) {
            return useMemo(function() {
              return callback;
            }, deps);
          }
          function useMutableSource(source, getSnapshot, subscribe) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source._source);
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value) {
            resolveCurrentlyRenderingComponent();
            return value;
          }
          function unsupportedStartTransition() {
            throw new Error("startTransition cannot be called during server rendering.");
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop() {
          }
          var Dispatcher = {
            readContext: readContext$1,
            useContext,
            useMemo,
            useReducer,
            useRef,
            useState,
            useInsertionEffect: noop,
            useLayoutEffect,
            useCallback,
            // useImperativeHandle is not run in the server environment
            useImperativeHandle: noop,
            // Effects are not run in the server environment.
            useEffect: noop,
            // Debugging effect
            useDebugValue: noop,
            useDeferredValue,
            useTransition,
            useId,
            // Subscriptions are not setup in a server environment.
            useMutableSource,
            useSyncExternalStore
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info = "";
              var node = componentStack;
              do {
                switch (node.tag) {
                  case 0:
                    info += describeBuiltInComponentFrame(node.type, null, null);
                    break;
                  case 1:
                    info += describeFunctionComponentFrame(node.type, null, null);
                    break;
                  case 2:
                    info += describeClassComponentFrame(node.type, null, null);
                    break;
                }
                node = node.parent;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error2) {
            console["error"](error2);
            return null;
          }
          function noop$1() {
          }
          function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError === void 0 ? defaultErrorHandler : onError,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
            };
            var rootSegment = createPendingSegment(
              request,
              0,
              null,
              rootFormatContext,
              // Root segments are never embedded in Text on either edge
              false,
              false
            );
            rootSegment.parentFlushed = true;
            var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function() {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null
            };
          }
          function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node,
              ping: function() {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
            return {
              status: PENDING,
              id: -1,
              // lazily assigned later
              index,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
                return "";
              }
              return getStackByComponentStackNode(currentTaskInDEV.componentStack);
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error("Unexpectedly popped too many stack frames. This is a bug in React.");
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error2) {
            {
              var errorMessage;
              if (typeof error2 === "string") {
                errorMessage = error2;
              } else if (error2 && typeof error2.message === "string") {
                errorMessage = error2.message;
              } else {
                errorMessage = String(error2);
              }
              var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error2) {
            var errorDigest = request.onError(error2);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
            }
            return errorDigest;
          }
          function fatalError(request, error2) {
            var onShellError = request.onShellError;
            onShellError(error2);
            var onFatalError = request.onFatalError;
            onFatalError(error2);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error2);
            } else {
              request.status = CLOSING;
              request.fatalError = error2;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(
              request,
              insertionIndex,
              newBoundary,
              parentSegment.formatContext,
              // boundaries never require text embedding at their edges because comment nodes bound them
              false,
              false
            );
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(
              request,
              0,
              null,
              parentSegment.formatContext,
              // boundaries never require text embedding at their edges because comment nodes bound them
              false,
              false
            );
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content);
              pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error2) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error2);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error2);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(prevContext, type, props);
            renderNode(request, task, children);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(request, task, instance, Component, props) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(Component, props, maskedContext);
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutDefaultPropsOnFunctionComponent = {};
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(request, task, Component, props) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value = renderWithHooks(request, task, Component, props, legacyContext);
            var hasId = checkDidRenderIdHook();
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value, Component, props, legacyContext);
              finishClassComponent(request, task, value, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index = 0;
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
                try {
                  renderNodeDestructive(request, task, value);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children = renderWithHooks(request, task, type.render, props, ref);
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, children);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value = props.value;
            var children = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value);
            renderNodeDestructive(request, task, children);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
              }
            }
          }
          function renderLazyComponent(request, task, lazyComponent, props, ref) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error("ReactDOMServer does not yet support scope components.");
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info = "";
            {
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              iterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node);
              } catch (x) {
                if (typeof x === "object" && x !== null && typeof x.then === "function")
                  ;
                else {
                  lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
                }
                throw x;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node) {
            task.node = node;
            if (typeof node === "object" && node !== null) {
              switch (node.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element = node;
                  var type = element.type;
                  var props = element.props;
                  var ref = element.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                case REACT_LAZY_TYPE: {
                  var lazyNode = node;
                  var payload = lazyNode._payload;
                  var init = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init(payload);
                    } catch (x) {
                      if (typeof x === "object" && x !== null && typeof x.then === "function") {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray(node)) {
                renderChildrenArray(request, task, node);
                return;
              }
              var iteratorFn = getIteratorFn(node);
              if (iteratorFn) {
                {
                  validateIterable(node, iteratorFn);
                }
                var iterator = iteratorFn.call(node);
                if (iterator) {
                  var step = iterator.next();
                  if (!step.done) {
                    var children = [];
                    do {
                      children.push(step.value);
                      step = iterator.next();
                    } while (!step.done);
                    renderChildrenArray(request, task, children);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node);
              throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
            }
            if (typeof node === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
              return;
            }
            if (typeof node === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
              return;
            }
            {
              if (typeof node === "function") {
                error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
              }
            }
          }
          function renderChildrenArray(request, task, children) {
            var totalChildren = children.length;
            for (var i = 0; i < totalChildren; i++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
              try {
                renderNode(request, task, children[i]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(
              request,
              insertionIndex,
              null,
              segment.formatContext,
              // Adopt the parent segment's leading text embed
              segment.lastPushedText,
              // Assume we are text embedded at the trailing edge
              true
            );
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x.then(ping, ping);
          }
          function renderNode(request, task, node) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node);
            } catch (x) {
              resetHooksState();
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                spawnNewSuspendedTask(request, task, x);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x;
              }
            }
          }
          function erroredTask(request, boundary, segment, error2) {
            var errorDigest = logRecoverableError(request, error2);
            if (boundary === null) {
              fatalError(request, error2);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error2);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix = "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error("There can only be one root segment. This is a bug in React.");
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender)
                ;
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x) {
              resetHooksState();
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i;
              for (i = 0; i < pingedTasks.length; i++) {
                var task = pingedTasks[i];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = segment.id = request.nextSegmentId++;
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(destination, request.responseState, segmentID);
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children = segment.children;
                for (var childIdx = 0; childIdx < children.length; childIdx++) {
                  var nextChild = children[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r;
              }
              default: {
                throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
              writeStartPendingSuspenseBoundary(destination, request.responseState, id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else {
              writeStartCompletedSuspenseBoundary(destination, request.responseState);
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary(destination, request.responseState);
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              flushPartiallyCompletedSegment(request, destination, boundary, segment);
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
                i++;
                completedSegments.splice(0, i);
                return false;
              }
            }
            completedSegments.splice(0, i);
            return true;
          }
          function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = segment.id = boundary.rootSegmentID;
              if (rootSegmentID === -1) {
                throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
            }
          }
          function flushCompletedQueues(request, destination) {
            beginWriting();
            try {
              var completedRootSegment = request.completedRootSegment;
              if (completedRootSegment !== null && request.pendingRootTasks === 0) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i;
              for (i = 0; i < clientRenderedBoundaries.length; i++) {
                var boundary = clientRenderedBoundaries[i];
                if (!flushClientRenderedBoundary(request, destination, boundary)) {
                  request.destination = null;
                  i++;
                  clientRenderedBoundaries.splice(0, i);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i);
              var completedBoundaries = request.completedBoundaries;
              for (i = 0; i < completedBoundaries.length; i++) {
                var _boundary = completedBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i++;
                  completedBoundaries.splice(0, i);
                  return;
                }
              }
              completedBoundaries.splice(0, i);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i = 0; i < partialBoundaries.length; i++) {
                var _boundary2 = partialBoundaries[i];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i++;
                  partialBoundaries.splice(0, i);
                  return;
                }
              }
              partialBoundaries.splice(0, i);
              var largeBoundaries = request.completedBoundaries;
              for (i = 0; i < largeBoundaries.length; i++) {
                var _boundary3 = largeBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i++;
                  largeBoundaries.splice(0, i);
                  return;
                }
              }
              largeBoundaries.splice(0, i);
            } finally {
              completeWriting(destination);
              if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error("There was still abortable task at the root when we closed. This is a bug in React.");
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function renderToReadableStream(children, options) {
            return new Promise(function(resolve, reject) {
              var onFatalError;
              var onAllReady;
              var allReady = new Promise(function(res, rej) {
                onAllReady = res;
                onFatalError = rej;
              });
              function onShellReady() {
                var stream = new ReadableStream(
                  {
                    type: "bytes",
                    pull: function(controller) {
                      startFlowing(request, controller);
                    },
                    cancel: function(reason) {
                      abort(request);
                    }
                  },
                  // $FlowFixMe size() methods are not allowed on byte streams.
                  {
                    highWaterMark: 0
                  }
                );
                stream.allReady = allReady;
                resolve(stream);
              }
              function onShellError(error2) {
                allReady.catch(function() {
                });
                reject(error2);
              }
              var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
              if (options && options.signal) {
                var signal = options.signal;
                var listener = function() {
                  abort(request, signal.reason);
                  signal.removeEventListener("abort", listener);
                };
                signal.addEventListener("abort", listener);
              }
              startWork(request);
            });
          }
          exports.renderToReadableStream = renderToReadableStream;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/server.browser.js
  var require_server_browser = __commonJS({
    "node_modules/react-dom/server.browser.js"(exports) {
      "use strict";
      var l;
      var s;
      if (false) {
        l = null;
        s = null;
      } else {
        l = require_react_dom_server_legacy_browser_development();
        s = require_react_dom_server_browser_development();
      }
      exports.version = l.version;
      exports.renderToString = l.renderToString;
      exports.renderToStaticMarkup = l.renderToStaticMarkup;
      exports.renderToNodeStream = l.renderToNodeStream;
      exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
      exports.renderToReadableStream = s.renderToReadableStream;
    }
  });

  // node_modules/lucide-react/dist/cjs/lucide-react.js
  var require_lucide_react = __commonJS({
    "node_modules/lucide-react/dist/cjs/lucide-react.js"(exports) {
      "use strict";
      var react = require_react();
      var defaultAttributes = {
        xmlns: "http://www.w3.org/2000/svg",
        width: 24,
        height: 24,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: 2,
        strokeLinecap: "round",
        strokeLinejoin: "round"
      };
      var toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase().trim();
      var createLucideIcon = (iconName, iconNode) => {
        const Component2 = react.forwardRef(
          ({ color = "currentColor", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = "", children, ...rest }, ref) => {
            return react.createElement(
              "svg",
              {
                ref,
                ...defaultAttributes,
                width: size,
                height: size,
                stroke: color,
                strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
                className: ["lucide", `lucide-${toKebabCase(iconName)}`, className].join(" "),
                ...rest
              },
              [
                ...iconNode.map(([tag, attrs]) => react.createElement(tag, attrs)),
                ...Array.isArray(children) ? children : [children]
              ]
            );
          }
        );
        Component2.displayName = `${iconName}`;
        return Component2;
      };
      var AArrowDown = createLucideIcon("AArrowDown", [
        ["path", { d: "M3.5 13h6", key: "p1my2r" }],
        ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
        ["path", { d: "M18 7v9", key: "pknjwm" }],
        ["path", { d: "m14 12 4 4 4-4", key: "buelq4" }]
      ]);
      var AArrowUp = createLucideIcon("AArrowUp", [
        ["path", { d: "M3.5 13h6", key: "p1my2r" }],
        ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
        ["path", { d: "M18 16V7", key: "ty0viw" }],
        ["path", { d: "m14 11 4-4 4 4", key: "1pu57t" }]
      ]);
      var ALargeSmall = createLucideIcon("ALargeSmall", [
        ["path", { d: "M21 14h-5", key: "1vh23k" }],
        ["path", { d: "M16 16v-3.5a2.5 2.5 0 0 1 5 0V16", key: "1wh10o" }],
        ["path", { d: "M4.5 13h6", key: "dfilno" }],
        ["path", { d: "m3 16 4.5-9 4.5 9", key: "2dxa0e" }]
      ]);
      var Accessibility = createLucideIcon("Accessibility", [
        ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
        ["path", { d: "m18 19 1-7-6 1", key: "r0i19z" }],
        ["path", { d: "m5 8 3-3 5.5 3-2.36 3.5", key: "9ptxx2" }],
        ["path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6", key: "10kmtu" }],
        ["path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6", key: "2qq6rc" }]
      ]);
      var ActivitySquare = createLucideIcon("ActivitySquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M17 12h-2l-2 5-2-10-2 5H7", key: "15hlnc" }]
      ]);
      var Activity = createLucideIcon("Activity", [
        ["path", { d: "M22 12h-4l-3 9L9 3l-3 9H2", key: "d5dnw9" }]
      ]);
      var AirVent = createLucideIcon("AirVent", [
        [
          "path",
          {
            d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "larmp2"
          }
        ],
        ["path", { d: "M6 8h12", key: "6g4wlu" }],
        ["path", { d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12", key: "1bo8pg" }],
        ["path", { d: "M6.6 15.6A2 2 0 1 0 10 17v-5", key: "t9h90c" }]
      ]);
      var Airplay = createLucideIcon("Airplay", [
        [
          "path",
          {
            d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1",
            key: "ns4c3b"
          }
        ],
        ["polygon", { points: "12 15 17 21 7 21 12 15", key: "1sy95i" }]
      ]);
      var AlarmClockCheck = createLucideIcon("AlarmClockCheck", [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
      ]);
      var AlarmClockMinus = createLucideIcon("AlarmClockMinus", [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }]
      ]);
      var AlarmClockOff = createLucideIcon("AlarmClockOff", [
        ["path", { d: "M6.87 6.87a8 8 0 1 0 11.26 11.26", key: "3on8tj" }],
        ["path", { d: "M19.9 14.25a8 8 0 0 0-9.15-9.15", key: "15ghsc" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.26 18.67 4 21", key: "yzmioq" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M4 4 2 6", key: "1ycko6" }]
      ]);
      var AlarmClockPlus = createLucideIcon("AlarmClockPlus", [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }]
      ]);
      var AlarmClock = createLucideIcon("AlarmClock", [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M12 9v4l2 2", key: "1c63tq" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }]
      ]);
      var AlarmSmoke = createLucideIcon("AlarmSmoke", [
        ["path", { d: "M4 8a2 2 0 0 1-2-2V3h20v3a2 2 0 0 1-2 2Z", key: "2c4fvq" }],
        ["path", { d: "m19 8-.8 3c-.1.6-.6 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L5 8", key: "1vrndv" }],
        ["path", { d: "M16 21c0-2.5 2-2.5 2-5", key: "1o3eny" }],
        ["path", { d: "M11 21c0-2.5 2-2.5 2-5", key: "1sicvv" }],
        ["path", { d: "M6 21c0-2.5 2-2.5 2-5", key: "i3w1gp" }]
      ]);
      var Album = createLucideIcon("Album", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["polyline", { points: "11 3 11 11 14 8 17 11 17 3", key: "1wcwz3" }]
      ]);
      var AlertCircle = createLucideIcon("AlertCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
        ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
      ]);
      var AlertOctagon = createLucideIcon("AlertOctagon", [
        [
          "polygon",
          {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
        ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
      ]);
      var AlertTriangle = createLucideIcon("AlertTriangle", [
        [
          "path",
          {
            d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
            key: "c3ski4"
          }
        ],
        ["path", { d: "M12 9v4", key: "juzpu7" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var AlignCenterHorizontal = createLucideIcon("AlignCenterHorizontal", [
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4", key: "11f1s0" }],
        ["path", { d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4", key: "t14dx9" }],
        ["path", { d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1", key: "1w07xs" }],
        ["path", { d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1", key: "1apec2" }]
      ]);
      var AlignCenterVertical = createLucideIcon("AlignCenterVertical", [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4", key: "14d6g8" }],
        ["path", { d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4", key: "1e2lrw" }],
        ["path", { d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1", key: "1fkdwx" }],
        ["path", { d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1", key: "1euafb" }]
      ]);
      var AlignCenter = createLucideIcon("AlignCenter", [
        ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
        ["line", { x1: "17", x2: "7", y1: "12", y2: "12", key: "rsh8ii" }],
        ["line", { x1: "19", x2: "5", y1: "18", y2: "18", key: "1t0tuv" }]
      ]);
      var AlignEndHorizontal = createLucideIcon("AlignEndHorizontal", [
        ["rect", { width: "6", height: "16", x: "4", y: "2", rx: "2", key: "z5wdxg" }],
        ["rect", { width: "6", height: "9", x: "14", y: "9", rx: "2", key: "um7a8w" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }]
      ]);
      var AlignEndVertical = createLucideIcon("AlignEndVertical", [
        ["rect", { width: "16", height: "6", x: "2", y: "4", rx: "2", key: "10wcwx" }],
        ["rect", { width: "9", height: "6", x: "9", y: "14", rx: "2", key: "4p5bwg" }],
        ["path", { d: "M22 22V2", key: "12ipfv" }]
      ]);
      var AlignHorizontalDistributeCenter = createLucideIcon("AlignHorizontalDistributeCenter", [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M17 22v-5", key: "4b6g73" }],
        ["path", { d: "M17 7V2", key: "hnrr36" }],
        ["path", { d: "M7 22v-3", key: "1r4jpn" }],
        ["path", { d: "M7 5V2", key: "liy1u9" }]
      ]);
      var AlignHorizontalDistributeEnd = createLucideIcon("AlignHorizontalDistributeEnd", [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M10 2v20", key: "uyc634" }],
        ["path", { d: "M20 2v20", key: "1tx262" }]
      ]);
      var AlignHorizontalDistributeStart = createLucideIcon("AlignHorizontalDistributeStart", [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M4 2v20", key: "gtpd5x" }],
        ["path", { d: "M14 2v20", key: "tg6bpw" }]
      ]);
      var AlignHorizontalJustifyCenter = createLucideIcon("AlignHorizontalJustifyCenter", [
        ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
        ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
        ["path", { d: "M12 2v20", key: "t6zp3m" }]
      ]);
      var AlignHorizontalJustifyEnd = createLucideIcon("AlignHorizontalJustifyEnd", [
        ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
        ["rect", { width: "6", height: "10", x: "12", y: "7", rx: "2", key: "1ht384" }],
        ["path", { d: "M22 2v20", key: "40qfg1" }]
      ]);
      var AlignHorizontalJustifyStart = createLucideIcon("AlignHorizontalJustifyStart", [
        ["rect", { width: "6", height: "14", x: "6", y: "5", rx: "2", key: "hsirpf" }],
        ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
        ["path", { d: "M2 2v20", key: "1ivd8o" }]
      ]);
      var AlignHorizontalSpaceAround = createLucideIcon("AlignHorizontalSpaceAround", [
        ["rect", { width: "6", height: "10", x: "9", y: "7", rx: "2", key: "yn7j0q" }],
        ["path", { d: "M4 22V2", key: "tsjzd3" }],
        ["path", { d: "M20 22V2", key: "1bnhr8" }]
      ]);
      var AlignHorizontalSpaceBetween = createLucideIcon("AlignHorizontalSpaceBetween", [
        ["rect", { width: "6", height: "14", x: "3", y: "5", rx: "2", key: "j77dae" }],
        ["rect", { width: "6", height: "10", x: "15", y: "7", rx: "2", key: "bq30hj" }],
        ["path", { d: "M3 2v20", key: "1d2pfg" }],
        ["path", { d: "M21 2v20", key: "p059bm" }]
      ]);
      var AlignJustify = createLucideIcon("AlignJustify", [
        ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
        ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
        ["line", { x1: "3", x2: "21", y1: "18", y2: "18", key: "kwyyxn" }]
      ]);
      var AlignLeft = createLucideIcon("AlignLeft", [
        ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
        ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }],
        ["line", { x1: "17", x2: "3", y1: "18", y2: "18", key: "1awlsn" }]
      ]);
      var AlignRight = createLucideIcon("AlignRight", [
        ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
        ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }],
        ["line", { x1: "21", x2: "7", y1: "18", y2: "18", key: "1g9eri" }]
      ]);
      var AlignStartHorizontal = createLucideIcon("AlignStartHorizontal", [
        ["rect", { width: "6", height: "16", x: "4", y: "6", rx: "2", key: "1n4dg1" }],
        ["rect", { width: "6", height: "9", x: "14", y: "6", rx: "2", key: "17khns" }],
        ["path", { d: "M22 2H2", key: "fhrpnj" }]
      ]);
      var AlignStartVertical = createLucideIcon("AlignStartVertical", [
        ["rect", { width: "9", height: "6", x: "6", y: "14", rx: "2", key: "lpm2y7" }],
        ["rect", { width: "16", height: "6", x: "6", y: "4", rx: "2", key: "rdj6ps" }],
        ["path", { d: "M2 2v20", key: "1ivd8o" }]
      ]);
      var AlignVerticalDistributeCenter = createLucideIcon("AlignVerticalDistributeCenter", [
        ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
        ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
        ["path", { d: "M22 7h-5", key: "o2endc" }],
        ["path", { d: "M7 7H1", key: "105l6j" }],
        ["path", { d: "M22 17h-3", key: "1lwga1" }],
        ["path", { d: "M5 17H2", key: "1gx9xc" }]
      ]);
      var AlignVerticalDistributeEnd = createLucideIcon("AlignVerticalDistributeEnd", [
        ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
        ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
        ["path", { d: "M2 20h20", key: "owomy5" }],
        ["path", { d: "M2 10h20", key: "1ir3d8" }]
      ]);
      var AlignVerticalDistributeStart = createLucideIcon("AlignVerticalDistributeStart", [
        ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
        ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M2 4h20", key: "mda7wb" }]
      ]);
      var AlignVerticalJustifyCenter = createLucideIcon("AlignVerticalJustifyCenter", [
        ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
        ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }]
      ]);
      var AlignVerticalJustifyEnd = createLucideIcon("AlignVerticalJustifyEnd", [
        ["rect", { width: "14", height: "6", x: "5", y: "12", rx: "2", key: "4l4tp2" }],
        ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
        ["path", { d: "M2 22h20", key: "272qi7" }]
      ]);
      var AlignVerticalJustifyStart = createLucideIcon("AlignVerticalJustifyStart", [
        ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
        ["rect", { width: "10", height: "6", x: "7", y: "6", rx: "2", key: "13squh" }],
        ["path", { d: "M2 2h20", key: "1ennik" }]
      ]);
      var AlignVerticalSpaceAround = createLucideIcon("AlignVerticalSpaceAround", [
        ["rect", { width: "10", height: "6", x: "7", y: "9", rx: "2", key: "b1zbii" }],
        ["path", { d: "M22 20H2", key: "1p1f7z" }],
        ["path", { d: "M22 4H2", key: "1b7qnq" }]
      ]);
      var AlignVerticalSpaceBetween = createLucideIcon("AlignVerticalSpaceBetween", [
        ["rect", { width: "14", height: "6", x: "5", y: "15", rx: "2", key: "1w91an" }],
        ["rect", { width: "10", height: "6", x: "7", y: "3", rx: "2", key: "17wqzy" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }],
        ["path", { d: "M2 3h20", key: "91anmk" }]
      ]);
      var Ampersand = createLucideIcon("Ampersand", [
        [
          "path",
          {
            d: "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13",
            key: "1o9ehi"
          }
        ],
        ["path", { d: "M16 12h3", key: "4uvgyw" }]
      ]);
      var Ampersands = createLucideIcon("Ampersands", [
        [
          "path",
          {
            d: "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "12lh1k"
          }
        ],
        [
          "path",
          {
            d: "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "173c68"
          }
        ]
      ]);
      var Anchor = createLucideIcon("Anchor", [
        ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "8", key: "abakz7" }],
        ["path", { d: "M5 12H2a10 10 0 0 0 20 0h-3", key: "1hv3nh" }]
      ]);
      var Angry = createLucideIcon("Angry", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
        ["path", { d: "M7.5 8 10 9", key: "olxxln" }],
        ["path", { d: "m14 9 2.5-1", key: "1j6cij" }],
        ["path", { d: "M9 10h0", key: "1vxvly" }],
        ["path", { d: "M15 10h0", key: "1j6oav" }]
      ]);
      var Annoyed = createLucideIcon("Annoyed", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 15h8", key: "45n4r" }],
        ["path", { d: "M8 9h2", key: "1g203m" }],
        ["path", { d: "M14 9h2", key: "116p9w" }]
      ]);
      var Antenna = createLucideIcon("Antenna", [
        ["path", { d: "M2 12 7 2", key: "117k30" }],
        ["path", { d: "m7 12 5-10", key: "1tvx22" }],
        ["path", { d: "m12 12 5-10", key: "ev1o1a" }],
        ["path", { d: "m17 12 5-10", key: "1e4ti3" }],
        ["path", { d: "M4.5 7h15", key: "vlsxkz" }],
        ["path", { d: "M12 16v6", key: "c8a4gj" }]
      ]);
      var Anvil = createLucideIcon("Anvil", [
        ["path", { d: "M7 10c-2.8 0-5-2.2-5-5h5", key: "1d6adc" }],
        ["path", { d: "M7 4v8h7a8 8 0 0 0 8-8Z", key: "uu98hv" }],
        ["path", { d: "M9 12v5", key: "3anwtq" }],
        ["path", { d: "M15 12v5", key: "5xh3zn" }],
        ["path", { d: "M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3v1H5Z", key: "10a9tj" }]
      ]);
      var Aperture = createLucideIcon("Aperture", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m14.31 8 5.74 9.94", key: "1y6ab4" }],
        ["path", { d: "M9.69 8h11.48", key: "1wxppr" }],
        ["path", { d: "m7.38 12 5.74-9.94", key: "1grp0k" }],
        ["path", { d: "M9.69 16 3.95 6.06", key: "libnyf" }],
        ["path", { d: "M14.31 16H2.83", key: "x5fava" }],
        ["path", { d: "m16.62 12-5.74 9.94", key: "1vwawt" }]
      ]);
      var AppWindow = createLucideIcon("AppWindow", [
        ["rect", { x: "2", y: "4", width: "20", height: "16", rx: "2", key: "izxlao" }],
        ["path", { d: "M10 4v4", key: "pp8u80" }],
        ["path", { d: "M2 8h20", key: "d11cs7" }],
        ["path", { d: "M6 4v4", key: "1svtjw" }]
      ]);
      var Apple = createLucideIcon("Apple", [
        [
          "path",
          {
            d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z",
            key: "3s7exb"
          }
        ],
        ["path", { d: "M10 2c1 .5 2 2 2 5", key: "fcco2y" }]
      ]);
      var ArchiveRestore = createLucideIcon("ArchiveRestore", [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h2", key: "tvwodi" }],
        ["path", { d: "M20 8v11a2 2 0 0 1-2 2h-2", key: "1gkqxj" }],
        ["path", { d: "m9 15 3-3 3 3", key: "1pd0qc" }],
        ["path", { d: "M12 12v9", key: "192myk" }]
      ]);
      var ArchiveX = createLucideIcon("ArchiveX", [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
        ["path", { d: "m9.5 17 5-5", key: "nakeu6" }],
        ["path", { d: "m9.5 12 5 5", key: "1hccrj" }]
      ]);
      var Archive = createLucideIcon("Archive", [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
        ["path", { d: "M10 12h4", key: "a56b0p" }]
      ]);
      var AreaChart = createLucideIcon("AreaChart", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["path", { d: "M7 12v5h12V8l-5 5-4-4Z", key: "zxz28u" }]
      ]);
      var Armchair = createLucideIcon("Armchair", [
        ["path", { d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3", key: "irtipd" }],
        [
          "path",
          {
            d: "M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H7v-2a2 2 0 0 0-4 0Z",
            key: "1e01m0"
          }
        ],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ]);
      var ArrowBigDownDash = createLucideIcon("ArrowBigDownDash", [
        ["path", { d: "M15 5H9", key: "1tp3ed" }],
        ["path", { d: "M15 9v3h4l-7 7-7-7h4V9h6z", key: "oscb9h" }]
      ]);
      var ArrowBigDown = createLucideIcon("ArrowBigDown", [
        ["path", { d: "M15 6v6h4l-7 7-7-7h4V6h6z", key: "1thax2" }]
      ]);
      var ArrowBigLeftDash = createLucideIcon("ArrowBigLeftDash", [
        ["path", { d: "M19 15V9", key: "1hci5f" }],
        ["path", { d: "M15 15h-3v4l-7-7 7-7v4h3v6z", key: "16tjna" }]
      ]);
      var ArrowBigLeft = createLucideIcon("ArrowBigLeft", [
        ["path", { d: "M18 15h-6v4l-7-7 7-7v4h6v6z", key: "lbrdak" }]
      ]);
      var ArrowBigRightDash = createLucideIcon("ArrowBigRightDash", [
        ["path", { d: "M5 9v6", key: "158jrl" }],
        ["path", { d: "M9 9h3V5l7 7-7 7v-4H9V9z", key: "1sg2xn" }]
      ]);
      var ArrowBigRight = createLucideIcon("ArrowBigRight", [
        ["path", { d: "M6 9h6V5l7 7-7 7v-4H6V9z", key: "7fvt9c" }]
      ]);
      var ArrowBigUpDash = createLucideIcon("ArrowBigUpDash", [
        ["path", { d: "M9 19h6", key: "456am0" }],
        ["path", { d: "M9 15v-3H5l7-7 7 7h-4v3H9z", key: "1r2uve" }]
      ]);
      var ArrowBigUp = createLucideIcon("ArrowBigUp", [
        ["path", { d: "M9 18v-6H5l7-7 7 7h-4v6H9z", key: "1x06kx" }]
      ]);
      var ArrowDown01 = createLucideIcon("ArrowDown01", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
        ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
        ["path", { d: "M15 20h4", key: "1j968p" }]
      ]);
      var ArrowDown10 = createLucideIcon("ArrowDown10", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
        ["path", { d: "M15 10h4", key: "id2lce" }],
        ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
      ]);
      var ArrowDownAZ = createLucideIcon("ArrowDownAZ", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M20 8h-5", key: "1vsyxs" }],
        ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
        ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
      ]);
      var ArrowDownCircle = createLucideIcon("ArrowDownCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
      ]);
      var ArrowDownFromLine = createLucideIcon("ArrowDownFromLine", [
        ["path", { d: "M19 3H5", key: "1236rx" }],
        ["path", { d: "M12 21V7", key: "gj6g52" }],
        ["path", { d: "m6 15 6 6 6-6", key: "h15q88" }]
      ]);
      var ArrowDownLeftFromCircle = createLucideIcon("ArrowDownLeftFromCircle", [
        ["path", { d: "M2 12a10 10 0 1 1 10 10", key: "1yn6ov" }],
        ["path", { d: "m2 22 10-10", key: "28ilpk" }],
        ["path", { d: "M8 22H2v-6", key: "sulq54" }]
      ]);
      var ArrowDownLeftFromSquare = createLucideIcon("ArrowDownLeftFromSquare", [
        ["path", { d: "M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6", key: "14qz4y" }],
        ["path", { d: "m3 21 9-9", key: "1jfql5" }],
        ["path", { d: "M9 21H3v-6", key: "wtvkvv" }]
      ]);
      var ArrowDownLeftSquare = createLucideIcon("ArrowDownLeftSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 8-8 8", key: "166keh" }],
        ["path", { d: "M16 16H8V8", key: "1w2ppm" }]
      ]);
      var ArrowDownLeft = createLucideIcon("ArrowDownLeft", [
        ["path", { d: "M17 7 7 17", key: "15tmo1" }],
        ["path", { d: "M17 17H7V7", key: "1org7z" }]
      ]);
      var ArrowDownNarrowWide = createLucideIcon("ArrowDownNarrowWide", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M11 4h4", key: "6d7r33" }],
        ["path", { d: "M11 8h7", key: "djye34" }],
        ["path", { d: "M11 12h10", key: "1438ji" }]
      ]);
      var ArrowDownRightFromCircle = createLucideIcon("ArrowDownRightFromCircle", [
        ["path", { d: "M12 22a10 10 0 1 1 10-10", key: "130bv5" }],
        ["path", { d: "M22 22 12 12", key: "131aw7" }],
        ["path", { d: "M22 16v6h-6", key: "1gvm70" }]
      ]);
      var ArrowDownRightFromSquare = createLucideIcon("ArrowDownRightFromSquare", [
        ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }],
        ["path", { d: "m21 21-9-9", key: "1et2py" }],
        ["path", { d: "M21 15v6h-6", key: "1jko0i" }]
      ]);
      var ArrowDownRightSquare = createLucideIcon("ArrowDownRightSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m8 8 8 8", key: "1imecy" }],
        ["path", { d: "M16 8v8H8", key: "1lbpgo" }]
      ]);
      var ArrowDownRight = createLucideIcon("ArrowDownRight", [
        ["path", { d: "m7 7 10 10", key: "1fmybs" }],
        ["path", { d: "M17 7v10H7", key: "6fjiku" }]
      ]);
      var ArrowDownSquare = createLucideIcon("ArrowDownSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
      ]);
      var ArrowDownToDot = createLucideIcon("ArrowDownToDot", [
        ["path", { d: "M12 2v14", key: "jyx4ut" }],
        ["path", { d: "m19 9-7 7-7-7", key: "1oe3oy" }],
        ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
      ]);
      var ArrowDownToLine = createLucideIcon("ArrowDownToLine", [
        ["path", { d: "M12 17V3", key: "1cwfxf" }],
        ["path", { d: "m6 11 6 6 6-6", key: "12ii2o" }],
        ["path", { d: "M19 21H5", key: "150jfl" }]
      ]);
      var ArrowDownUp = createLucideIcon("ArrowDownUp", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "m21 8-4-4-4 4", key: "1c9v7m" }],
        ["path", { d: "M17 4v16", key: "7dpous" }]
      ]);
      var ArrowDownWideNarrow = createLucideIcon("ArrowDownWideNarrow", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M11 4h10", key: "1w87gc" }],
        ["path", { d: "M11 8h7", key: "djye34" }],
        ["path", { d: "M11 12h4", key: "q8tih4" }]
      ]);
      var ArrowDownZA = createLucideIcon("ArrowDownZA", [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
        ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
        ["path", { d: "M20 18h-5", key: "18j1r2" }]
      ]);
      var ArrowDown = createLucideIcon("ArrowDown", [
        ["path", { d: "M12 5v14", key: "s699le" }],
        ["path", { d: "m19 12-7 7-7-7", key: "1idqje" }]
      ]);
      var ArrowLeftCircle = createLucideIcon("ArrowLeftCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }],
        ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }]
      ]);
      var ArrowLeftFromLine = createLucideIcon("ArrowLeftFromLine", [
        ["path", { d: "m9 6-6 6 6 6", key: "7v63n9" }],
        ["path", { d: "M3 12h14", key: "13k4hi" }],
        ["path", { d: "M21 19V5", key: "b4bplr" }]
      ]);
      var ArrowLeftRight = createLucideIcon("ArrowLeftRight", [
        ["path", { d: "M8 3 4 7l4 4", key: "9rb6wj" }],
        ["path", { d: "M4 7h16", key: "6tx8e3" }],
        ["path", { d: "m16 21 4-4-4-4", key: "siv7j2" }],
        ["path", { d: "M20 17H4", key: "h6l3hr" }]
      ]);
      var ArrowLeftSquare = createLucideIcon("ArrowLeftSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }]
      ]);
      var ArrowLeftToLine = createLucideIcon("ArrowLeftToLine", [
        ["path", { d: "M3 19V5", key: "rwsyhb" }],
        ["path", { d: "m13 6-6 6 6 6", key: "1yhaz7" }],
        ["path", { d: "M7 12h14", key: "uoisry" }]
      ]);
      var ArrowLeft = createLucideIcon("ArrowLeft", [
        ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
        ["path", { d: "M19 12H5", key: "x3x0zl" }]
      ]);
      var ArrowRightCircle = createLucideIcon("ArrowRightCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
      ]);
      var ArrowRightFromLine = createLucideIcon("ArrowRightFromLine", [
        ["path", { d: "M3 5v14", key: "1nt18q" }],
        ["path", { d: "M21 12H7", key: "13ipq5" }],
        ["path", { d: "m15 18 6-6-6-6", key: "6tx3qv" }]
      ]);
      var ArrowRightLeft = createLucideIcon("ArrowRightLeft", [
        ["path", { d: "m16 3 4 4-4 4", key: "1x1c3m" }],
        ["path", { d: "M20 7H4", key: "zbl0bi" }],
        ["path", { d: "m8 21-4-4 4-4", key: "h9nckh" }],
        ["path", { d: "M4 17h16", key: "g4d7ey" }]
      ]);
      var ArrowRightSquare = createLucideIcon("ArrowRightSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
      ]);
      var ArrowRightToLine = createLucideIcon("ArrowRightToLine", [
        ["path", { d: "M17 12H3", key: "8awo09" }],
        ["path", { d: "m11 18 6-6-6-6", key: "8c2y43" }],
        ["path", { d: "M21 5v14", key: "nzette" }]
      ]);
      var ArrowRight = createLucideIcon("ArrowRight", [
        ["path", { d: "M5 12h14", key: "1ays0h" }],
        ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
      ]);
      var ArrowUp01 = createLucideIcon("ArrowUp01", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
        ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
        ["path", { d: "M15 20h4", key: "1j968p" }]
      ]);
      var ArrowUp10 = createLucideIcon("ArrowUp10", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
        ["path", { d: "M15 10h4", key: "id2lce" }],
        ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
      ]);
      var ArrowUpAZ = createLucideIcon("ArrowUpAZ", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M20 8h-5", key: "1vsyxs" }],
        ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
        ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
      ]);
      var ArrowUpCircle = createLucideIcon("ArrowUpCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
        ["path", { d: "M12 16V8", key: "1sbj14" }]
      ]);
      var ArrowUpDown = createLucideIcon("ArrowUpDown", [
        ["path", { d: "m21 16-4 4-4-4", key: "f6ql7i" }],
        ["path", { d: "M17 20V4", key: "1ejh1v" }],
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }]
      ]);
      var ArrowUpFromDot = createLucideIcon("ArrowUpFromDot", [
        ["path", { d: "m5 9 7-7 7 7", key: "1hw5ic" }],
        ["path", { d: "M12 16V2", key: "ywoabb" }],
        ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
      ]);
      var ArrowUpFromLine = createLucideIcon("ArrowUpFromLine", [
        ["path", { d: "m18 9-6-6-6 6", key: "kcunyi" }],
        ["path", { d: "M12 3v14", key: "7cf3v8" }],
        ["path", { d: "M5 21h14", key: "11awu3" }]
      ]);
      var ArrowUpLeftFromCircle = createLucideIcon("ArrowUpLeftFromCircle", [
        ["path", { d: "M2 8V2h6", key: "hiwtdz" }],
        ["path", { d: "m2 2 10 10", key: "1oh8rs" }],
        ["path", { d: "M12 2A10 10 0 1 1 2 12", key: "rrk4fa" }]
      ]);
      var ArrowUpLeftFromSquare = createLucideIcon("ArrowUpLeftFromSquare", [
        ["path", { d: "M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6", key: "14mv1t" }],
        ["path", { d: "m3 3 9 9", key: "rks13r" }],
        ["path", { d: "M3 9V3h6", key: "ira0h2" }]
      ]);
      var ArrowUpLeftSquare = createLucideIcon("ArrowUpLeftSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 16V8h8", key: "19xb1h" }],
        ["path", { d: "M16 16 8 8", key: "1qdy8n" }]
      ]);
      var ArrowUpLeft = createLucideIcon("ArrowUpLeft", [
        ["path", { d: "M7 17V7h10", key: "11bw93" }],
        ["path", { d: "M17 17 7 7", key: "2786uv" }]
      ]);
      var ArrowUpNarrowWide = createLucideIcon("ArrowUpNarrowWide", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M11 12h4", key: "q8tih4" }],
        ["path", { d: "M11 16h7", key: "uosisv" }],
        ["path", { d: "M11 20h10", key: "jvxblo" }]
      ]);
      var ArrowUpRightFromCircle = createLucideIcon("ArrowUpRightFromCircle", [
        ["path", { d: "M22 12A10 10 0 1 1 12 2", key: "1fm58d" }],
        ["path", { d: "M22 2 12 12", key: "yg2myt" }],
        ["path", { d: "M16 2h6v6", key: "zan5cs" }]
      ]);
      var ArrowUpRightFromSquare = createLucideIcon("ArrowUpRightFromSquare", [
        ["path", { d: "M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6", key: "y09zxi" }],
        ["path", { d: "m21 3-9 9", key: "mpx6sq" }],
        ["path", { d: "M15 3h6v6", key: "1q9fwt" }]
      ]);
      var ArrowUpRightSquare = createLucideIcon("ArrowUpRightSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 8h8v8", key: "b65dnt" }],
        ["path", { d: "m8 16 8-8", key: "13b9ih" }]
      ]);
      var ArrowUpRight = createLucideIcon("ArrowUpRight", [
        ["path", { d: "M7 7h10v10", key: "1tivn9" }],
        ["path", { d: "M7 17 17 7", key: "1vkiza" }]
      ]);
      var ArrowUpSquare = createLucideIcon("ArrowUpSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
        ["path", { d: "M12 16V8", key: "1sbj14" }]
      ]);
      var ArrowUpToLine = createLucideIcon("ArrowUpToLine", [
        ["path", { d: "M5 3h14", key: "7usisc" }],
        ["path", { d: "m18 13-6-6-6 6", key: "1kf1n9" }],
        ["path", { d: "M12 7v14", key: "1akyts" }]
      ]);
      var ArrowUpWideNarrow = createLucideIcon("ArrowUpWideNarrow", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M11 12h10", key: "1438ji" }],
        ["path", { d: "M11 16h7", key: "uosisv" }],
        ["path", { d: "M11 20h4", key: "1krc32" }]
      ]);
      var ArrowUpZA = createLucideIcon("ArrowUpZA", [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
        ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
        ["path", { d: "M20 18h-5", key: "18j1r2" }]
      ]);
      var ArrowUp = createLucideIcon("ArrowUp", [
        ["path", { d: "m5 12 7-7 7 7", key: "hav0vg" }],
        ["path", { d: "M12 19V5", key: "x0mq9r" }]
      ]);
      var ArrowsUpFromLine = createLucideIcon("ArrowsUpFromLine", [
        ["path", { d: "m4 6 3-3 3 3", key: "9aidw8" }],
        ["path", { d: "M7 17V3", key: "19qxw1" }],
        ["path", { d: "m14 6 3-3 3 3", key: "6iy689" }],
        ["path", { d: "M17 17V3", key: "o0fmgi" }],
        ["path", { d: "M4 21h16", key: "1h09gz" }]
      ]);
      var AsteriskSquare = createLucideIcon("AsteriskSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8.5 14 7-4", key: "12hpby" }],
        ["path", { d: "m8.5 10 7 4", key: "wwy2dy" }]
      ]);
      var Asterisk = createLucideIcon("Asterisk", [
        ["path", { d: "M12 6v12", key: "1vza4d" }],
        ["path", { d: "M17.196 9 6.804 15", key: "1ah31z" }],
        ["path", { d: "m6.804 9 10.392 6", key: "1b6pxd" }]
      ]);
      var AtSign = createLucideIcon("AtSign", [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8", key: "7n84p3" }]
      ]);
      var Atom = createLucideIcon("Atom", [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        [
          "path",
          {
            d: "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z",
            key: "1l2ple"
          }
        ],
        [
          "path",
          {
            d: "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z",
            key: "1wam0m"
          }
        ]
      ]);
      var AudioLines = createLucideIcon("AudioLines", [
        ["path", { d: "M2 10v3", key: "1fnikh" }],
        ["path", { d: "M6 6v11", key: "11sgs0" }],
        ["path", { d: "M10 3v18", key: "yhl04a" }],
        ["path", { d: "M14 8v7", key: "3a1oy3" }],
        ["path", { d: "M18 5v13", key: "123xd1" }],
        ["path", { d: "M22 10v3", key: "154ddg" }]
      ]);
      var AudioWaveform = createLucideIcon("AudioWaveform", [
        [
          "path",
          {
            d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2",
            key: "57tc96"
          }
        ]
      ]);
      var Award = createLucideIcon("Award", [
        ["circle", { cx: "12", cy: "8", r: "6", key: "1vp47v" }],
        ["path", { d: "M15.477 12.89 17 22l-5-3-5 3 1.523-9.11", key: "em7aur" }]
      ]);
      var Axe = createLucideIcon("Axe", [
        ["path", { d: "m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9", key: "csbz4o" }],
        ["path", { d: "M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z", key: "113wfo" }]
      ]);
      var Axis3d = createLucideIcon("Axis3d", [
        ["path", { d: "M4 4v16h16", key: "1s015l" }],
        ["path", { d: "m4 20 7-7", key: "17qe9y" }]
      ]);
      var Baby = createLucideIcon("Baby", [
        ["path", { d: "M9 12h.01", key: "157uk2" }],
        ["path", { d: "M15 12h.01", key: "1k8ypt" }],
        ["path", { d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5", key: "1u7htd" }],
        [
          "path",
          {
            d: "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1",
            key: "5yv0yz"
          }
        ]
      ]);
      var Backpack = createLucideIcon("Backpack", [
        [
          "path",
          { d: "M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2Z", key: "wvr1b5" }
        ],
        ["path", { d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2", key: "donm21" }],
        ["path", { d: "M8 21v-5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v5", key: "xk3gvk" }],
        ["path", { d: "M8 10h8", key: "c7uz4u" }],
        ["path", { d: "M8 18h8", key: "1no2b1" }]
      ]);
      var BadgeAlert = createLucideIcon("BadgeAlert", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
        ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
      ]);
      var BadgeCent = createLucideIcon("BadgeCent", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M15.4 10a4 4 0 1 0 0 4", key: "2eqtx8" }]
      ]);
      var BadgeCheck = createLucideIcon("BadgeCheck", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ]);
      var BadgeDollarSign = createLucideIcon("BadgeDollarSign", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }]
      ]);
      var BadgeEuro = createLucideIcon("BadgeEuro", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M7 12h5", key: "gblrwe" }],
        ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
      ]);
      var BadgeHelp = createLucideIcon("BadgeHelp", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["line", { x1: "12", x2: "12.01", y1: "17", y2: "17", key: "io3f8k" }]
      ]);
      var BadgeIndianRupee = createLucideIcon("BadgeIndianRupee", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M8 8h8", key: "1bis0t" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m13 17-5-1h1a4 4 0 0 0 0-8", key: "nu2bwa" }]
      ]);
      var BadgeInfo = createLucideIcon("BadgeInfo", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "12", key: "1y1yb1" }],
        ["line", { x1: "12", x2: "12.01", y1: "8", y2: "8", key: "110wyk" }]
      ]);
      var BadgeJapaneseYen = createLucideIcon("BadgeJapaneseYen", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m9 8 3 3v7", key: "17yadx" }],
        ["path", { d: "m12 11 3-3", key: "p4cfq1" }],
        ["path", { d: "M9 12h6", key: "1c52cq" }],
        ["path", { d: "M9 16h6", key: "8wimt3" }]
      ]);
      var BadgeMinus = createLucideIcon("BadgeMinus", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ]);
      var BadgePercent = createLucideIcon("BadgePercent", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ]);
      var BadgePlus = createLucideIcon("BadgePlus", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "16", key: "10p56q" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ]);
      var BadgePoundSterling = createLucideIcon("BadgePoundSterling", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M8 12h4", key: "qz6y1c" }],
        ["path", { d: "M10 16V9.5a2.5 2.5 0 0 1 5 0", key: "3mlbjk" }],
        ["path", { d: "M8 16h7", key: "sbedsn" }]
      ]);
      var BadgeRussianRuble = createLucideIcon("BadgeRussianRuble", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M9 16h5", key: "1syiyw" }],
        ["path", { d: "M9 12h5a2 2 0 1 0 0-4h-3v9", key: "1ge9c1" }]
      ]);
      var BadgeSwissFranc = createLucideIcon("BadgeSwissFranc", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M11 17V8h4", key: "1bfq6y" }],
        ["path", { d: "M11 12h3", key: "2eqnfz" }],
        ["path", { d: "M9 16h4", key: "1skf3a" }]
      ]);
      var BadgeX = createLucideIcon("BadgeX", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
        ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
      ]);
      var Badge = createLucideIcon("Badge", [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ]
      ]);
      var BaggageClaim = createLucideIcon("BaggageClaim", [
        ["path", { d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2", key: "4irg2o" }],
        ["path", { d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10", key: "14fcyx" }],
        ["rect", { width: "13", height: "8", x: "8", y: "6", rx: "1", key: "o6oiis" }],
        ["circle", { cx: "18", cy: "20", r: "2", key: "t9985n" }],
        ["circle", { cx: "9", cy: "20", r: "2", key: "e5v82j" }]
      ]);
      var Ban = createLucideIcon("Ban", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m4.9 4.9 14.2 14.2", key: "1m5liu" }]
      ]);
      var Banana = createLucideIcon("Banana", [
        ["path", { d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5", key: "1cscit" }],
        [
          "path",
          {
            d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z",
            key: "1y1nbv"
          }
        ]
      ]);
      var Banknote = createLucideIcon("Banknote", [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M6 12h.01M18 12h.01", key: "113zkx" }]
      ]);
      var BarChart2 = createLucideIcon("BarChart2", [
        ["line", { x1: "18", x2: "18", y1: "20", y2: "10", key: "1xfpm4" }],
        ["line", { x1: "12", x2: "12", y1: "20", y2: "4", key: "be30l9" }],
        ["line", { x1: "6", x2: "6", y1: "20", y2: "14", key: "1r4le6" }]
      ]);
      var BarChart3 = createLucideIcon("BarChart3", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["path", { d: "M18 17V9", key: "2bz60n" }],
        ["path", { d: "M13 17V5", key: "1frdt8" }],
        ["path", { d: "M8 17v-3", key: "17ska0" }]
      ]);
      var BarChart4 = createLucideIcon("BarChart4", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["path", { d: "M13 17V9", key: "1fwyjl" }],
        ["path", { d: "M18 17V5", key: "sfb6ij" }],
        ["path", { d: "M8 17v-3", key: "17ska0" }]
      ]);
      var BarChartBig = createLucideIcon("BarChartBig", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["rect", { width: "4", height: "7", x: "7", y: "10", rx: "1", key: "14u6mf" }],
        ["rect", { width: "4", height: "12", x: "15", y: "5", rx: "1", key: "b3pek6" }]
      ]);
      var BarChartHorizontalBig = createLucideIcon("BarChartHorizontalBig", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["rect", { width: "12", height: "4", x: "7", y: "5", rx: "1", key: "936jl1" }],
        ["rect", { width: "7", height: "4", x: "7", y: "13", rx: "1", key: "jqfkpy" }]
      ]);
      var BarChartHorizontal = createLucideIcon("BarChartHorizontal", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["path", { d: "M7 16h8", key: "srdodz" }],
        ["path", { d: "M7 11h12", key: "127s9w" }],
        ["path", { d: "M7 6h3", key: "w9rmul" }]
      ]);
      var BarChart = createLucideIcon("BarChart", [
        ["line", { x1: "12", x2: "12", y1: "20", y2: "10", key: "1vz5eb" }],
        ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
        ["line", { x1: "6", x2: "6", y1: "20", y2: "16", key: "hq0ia6" }]
      ]);
      var Barcode = createLucideIcon("Barcode", [
        ["path", { d: "M3 5v14", key: "1nt18q" }],
        ["path", { d: "M8 5v14", key: "1ybrkv" }],
        ["path", { d: "M12 5v14", key: "s699le" }],
        ["path", { d: "M17 5v14", key: "ycjyhj" }],
        ["path", { d: "M21 5v14", key: "nzette" }]
      ]);
      var Baseline = createLucideIcon("Baseline", [
        ["path", { d: "M4 20h16", key: "14thso" }],
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ]);
      var Bath = createLucideIcon("Bath", [
        [
          "path",
          {
            d: "M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5",
            key: "1r8yf5"
          }
        ],
        ["line", { x1: "10", x2: "8", y1: "5", y2: "7", key: "h5g8z4" }],
        ["line", { x1: "2", x2: "22", y1: "12", y2: "12", key: "1dnqot" }],
        ["line", { x1: "7", x2: "7", y1: "19", y2: "21", key: "16jp00" }],
        ["line", { x1: "17", x2: "17", y1: "19", y2: "21", key: "1pxrnk" }]
      ]);
      var BatteryCharging = createLucideIcon("BatteryCharging", [
        ["path", { d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1sdynx" }],
        ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1", key: "1gkd3k" }],
        ["path", { d: "m11 7-3 5h4l-3 5", key: "b4a64w" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
      ]);
      var BatteryFull = createLucideIcon("BatteryFull", [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }],
        ["line", { x1: "14", x2: "14", y1: "11", y2: "13", key: "c6fn6x" }]
      ]);
      var BatteryLow = createLucideIcon("BatteryLow", [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }]
      ]);
      var BatteryMedium = createLucideIcon("BatteryMedium", [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }]
      ]);
      var BatteryWarning = createLucideIcon("BatteryWarning", [
        ["path", { d: "M14 7h2a2 2 0 0 1 2 2v6c0 1-1 2-2 2h-2", key: "1if82c" }],
        ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6c0 1 1 2 2 2h2", key: "2pdlyl" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "10", x2: "10", y1: "7", y2: "13", key: "1uzyus" }],
        ["line", { x1: "10", x2: "10", y1: "17", y2: "17.01", key: "1y8k4g" }]
      ]);
      var Battery = createLucideIcon("Battery", [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
      ]);
      var Beaker = createLucideIcon("Beaker", [
        ["path", { d: "M4.5 3h15", key: "c7n0jr" }],
        ["path", { d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3", key: "m1uhx7" }],
        ["path", { d: "M6 14h12", key: "4cwo0f" }]
      ]);
      var BeanOff = createLucideIcon("BeanOff", [
        [
          "path",
          {
            d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1",
            key: "bq3udt"
          }
        ],
        ["path", { d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66", key: "17ccse" }],
        [
          "path",
          {
            d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04",
            key: "18zqgq"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Bean = createLucideIcon("Bean", [
        [
          "path",
          {
            d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z",
            key: "1tvzk7"
          }
        ],
        ["path", { d: "M5.341 10.62a4 4 0 1 0 5.279-5.28", key: "2cyri2" }]
      ]);
      var BedDouble = createLucideIcon("BedDouble", [
        ["path", { d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8", key: "1k78r4" }],
        ["path", { d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "fb3tl2" }],
        ["path", { d: "M12 4v6", key: "1dcgq2" }],
        ["path", { d: "M2 18h20", key: "ajqnye" }]
      ]);
      var BedSingle = createLucideIcon("BedSingle", [
        ["path", { d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8", key: "1wm6mi" }],
        ["path", { d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4", key: "4k93s5" }],
        ["path", { d: "M3 18h18", key: "1h113x" }]
      ]);
      var Bed = createLucideIcon("Bed", [
        ["path", { d: "M2 4v16", key: "vw9hq8" }],
        ["path", { d: "M2 8h18a2 2 0 0 1 2 2v10", key: "1dgv2r" }],
        ["path", { d: "M2 17h20", key: "18nfp3" }],
        ["path", { d: "M6 8v9", key: "1yriud" }]
      ]);
      var Beef = createLucideIcon("Beef", [
        ["circle", { cx: "12.5", cy: "8.5", r: "2.5", key: "9738u8" }],
        [
          "path",
          {
            d: "M12.5 2a6.5 6.5 0 0 0-6.22 4.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3A6.5 6.5 0 0 0 12.5 2Z",
            key: "o0f6za"
          }
        ],
        [
          "path",
          {
            d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1 .31 2 6.49 6.49 0 0 1-2.6 5.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5",
            key: "k7p6i0"
          }
        ]
      ]);
      var Beer = createLucideIcon("Beer", [
        ["path", { d: "M17 11h1a3 3 0 0 1 0 6h-1", key: "1yp76v" }],
        ["path", { d: "M9 12v6", key: "1u1cab" }],
        ["path", { d: "M13 12v6", key: "1sugkk" }],
        [
          "path",
          {
            d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z",
            key: "1510fo"
          }
        ],
        ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8", key: "19jb7n" }]
      ]);
      var BellDot = createLucideIcon("BellDot", [
        [
          "path",
          {
            d: "M19.4 14.9C20.2 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 .7 0 1.3.1 1.9.3",
            key: "xcehk"
          }
        ],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
        ["circle", { cx: "18", cy: "8", r: "3", key: "1g0gzu" }]
      ]);
      var BellElectric = createLucideIcon("BellElectric", [
        ["path", { d: "M18.8 4A6.3 8.7 0 0 1 20 9", key: "xve1fh" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
        ["rect", { width: "10", height: "6", x: "4", y: "16", rx: "2", key: "17f3te" }],
        ["path", { d: "M14 19c3 0 4.6-1.6 4.6-1.6", key: "n7odp6" }],
        ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }]
      ]);
      var BellMinus = createLucideIcon("BellMinus", [
        [
          "path",
          { d: "M18.4 12c.8 3.8 2.6 5 2.6 5H3s3-2 3-9c0-3.3 2.7-6 6-6 1.8 0 3.4.8 4.5 2", key: "eck70s" }
        ],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
        ["path", { d: "M15 8h6", key: "8ybuxh" }]
      ]);
      var BellOff = createLucideIcon("BellOff", [
        ["path", { d: "M8.7 3A6 6 0 0 1 18 8a21.3 21.3 0 0 0 .6 5", key: "o7mx20" }],
        ["path", { d: "M17 17H3s3-2 3-9a4.67 4.67 0 0 1 .3-1.7", key: "16f1lm" }],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var BellPlus = createLucideIcon("BellPlus", [
        [
          "path",
          {
            d: "M19.3 14.8C20.1 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 1 0 1.9.2 2.8.7",
            key: "guizqy"
          }
        ],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
        ["path", { d: "M15 8h6", key: "8ybuxh" }],
        ["path", { d: "M18 5v6", key: "g5ayrv" }]
      ]);
      var BellRing = createLucideIcon("BellRing", [
        ["path", { d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9", key: "1qo2s2" }],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
        ["path", { d: "M4 2C2.8 3.7 2 5.7 2 8", key: "tap9e0" }],
        ["path", { d: "M22 8c0-2.3-.8-4.3-2-6", key: "5bb3ad" }]
      ]);
      var Bell = createLucideIcon("Bell", [
        ["path", { d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9", key: "1qo2s2" }],
        ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }]
      ]);
      var BetweenHorizontalEnd = createLucideIcon("BetweenHorizontalEnd", [
        ["rect", { width: "13", height: "7", x: "3", y: "3", rx: "1", key: "11xb64" }],
        ["path", { d: "m22 15-3-3 3-3", key: "26chmm" }],
        ["rect", { width: "13", height: "7", x: "3", y: "14", rx: "1", key: "k6ky7n" }]
      ]);
      var BetweenHorizontalStart = createLucideIcon("BetweenHorizontalStart", [
        ["rect", { width: "13", height: "7", x: "8", y: "3", rx: "1", key: "pkso9a" }],
        ["path", { d: "m2 9 3 3-3 3", key: "1agib5" }],
        ["rect", { width: "13", height: "7", x: "8", y: "14", rx: "1", key: "1q5fc1" }]
      ]);
      var BetweenVerticalEnd = createLucideIcon("BetweenVerticalEnd", [
        ["rect", { width: "7", height: "13", x: "3", y: "3", rx: "1", key: "1fdu0f" }],
        ["path", { d: "m9 22 3-3 3 3", key: "17z65a" }],
        ["rect", { width: "7", height: "13", x: "14", y: "3", rx: "1", key: "1squn4" }]
      ]);
      var BetweenVerticalStart = createLucideIcon("BetweenVerticalStart", [
        ["rect", { width: "7", height: "13", x: "3", y: "8", rx: "1", key: "1fjrkv" }],
        ["path", { d: "m15 2-3 3-3-3", key: "1uh6eb" }],
        ["rect", { width: "7", height: "13", x: "14", y: "8", rx: "1", key: "w3fjg8" }]
      ]);
      var Bike = createLucideIcon("Bike", [
        ["circle", { cx: "18.5", cy: "17.5", r: "3.5", key: "15x4ox" }],
        ["circle", { cx: "5.5", cy: "17.5", r: "3.5", key: "1noe27" }],
        ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
        ["path", { d: "M12 17.5V14l-3-3 4-3 2 3h2", key: "1npguv" }]
      ]);
      var Binary = createLucideIcon("Binary", [
        ["rect", { x: "14", y: "14", width: "4", height: "6", rx: "2", key: "p02svl" }],
        ["rect", { x: "6", y: "4", width: "4", height: "6", rx: "2", key: "xm4xkj" }],
        ["path", { d: "M6 20h4", key: "1i6q5t" }],
        ["path", { d: "M14 10h4", key: "ru81e7" }],
        ["path", { d: "M6 14h2v6", key: "16z9wg" }],
        ["path", { d: "M14 4h2v6", key: "1idq9u" }]
      ]);
      var Biohazard = createLucideIcon("Biohazard", [
        ["circle", { cx: "12", cy: "11.9", r: "2", key: "e8h31w" }],
        ["path", { d: "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6", key: "17bolr" }],
        ["path", { d: "m8.9 10.1 1.4.8", key: "15ezny" }],
        ["path", { d: "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5", key: "wtwa5u" }],
        ["path", { d: "m15.1 10.1-1.4.8", key: "1r0b28" }],
        ["path", { d: "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2", key: "m7qszh" }],
        ["path", { d: "M12 13.9v1.6", key: "zfyyim" }],
        ["path", { d: "M13.5 5.4c-1-.2-2-.2-3 0", key: "1bi9q0" }],
        ["path", { d: "M17 16.4c.7-.7 1.2-1.6 1.5-2.5", key: "1rhjqw" }],
        ["path", { d: "M5.5 13.9c.3.9.8 1.8 1.5 2.5", key: "8gsud3" }]
      ]);
      var Bird = createLucideIcon("Bird", [
        ["path", { d: "M16 7h.01", key: "1kdx03" }],
        ["path", { d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20", key: "oj1oa8" }],
        ["path", { d: "m20 7 2 .5-2 .5", key: "12nv4d" }],
        ["path", { d: "M10 18v3", key: "1yea0a" }],
        ["path", { d: "M14 17.75V21", key: "1pymcb" }],
        ["path", { d: "M7 18a6 6 0 0 0 3.84-10.61", key: "1npnn0" }]
      ]);
      var Bitcoin = createLucideIcon("Bitcoin", [
        [
          "path",
          {
            d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727",
            key: "yr8idg"
          }
        ]
      ]);
      var Blend = createLucideIcon("Blend", [
        ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
        ["circle", { cx: "15", cy: "15", r: "7", key: "19ennj" }]
      ]);
      var Blinds = createLucideIcon("Blinds", [
        ["path", { d: "M3 3h18", key: "o7r712" }],
        ["path", { d: "M20 7H8", key: "gd2fo2" }],
        ["path", { d: "M20 11H8", key: "1ynp89" }],
        ["path", { d: "M10 19h10", key: "19hjk5" }],
        ["path", { d: "M8 15h12", key: "1yqzne" }],
        ["path", { d: "M4 3v14", key: "fggqzn" }],
        ["circle", { cx: "4", cy: "19", r: "2", key: "p3m9r0" }]
      ]);
      var Blocks = createLucideIcon("Blocks", [
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        [
          "path",
          {
            d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3",
            key: "1fpvtg"
          }
        ]
      ]);
      var BluetoothConnected = createLucideIcon("BluetoothConnected", [
        ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
        ["line", { x1: "18", x2: "21", y1: "12", y2: "12", key: "1rsjjs" }],
        ["line", { x1: "3", x2: "6", y1: "12", y2: "12", key: "11yl8c" }]
      ]);
      var BluetoothOff = createLucideIcon("BluetoothOff", [
        ["path", { d: "m17 17-5 5V12l-5 5", key: "v5aci6" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M14.5 9.5 17 7l-5-5v4.5", key: "1kddfz" }]
      ]);
      var BluetoothSearching = createLucideIcon("BluetoothSearching", [
        ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
        ["path", { d: "M20.83 14.83a4 4 0 0 0 0-5.66", key: "k8tn1j" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }]
      ]);
      var Bluetooth = createLucideIcon("Bluetooth", [
        ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }]
      ]);
      var Bold = createLucideIcon("Bold", [
        ["path", { d: "M14 12a4 4 0 0 0 0-8H6v8", key: "v2sylx" }],
        ["path", { d: "M15 20a4 4 0 0 0 0-8H6v8Z", key: "1ef5ya" }]
      ]);
      var Bolt = createLucideIcon("Bolt", [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
      ]);
      var Bomb = createLucideIcon("Bomb", [
        ["circle", { cx: "11", cy: "13", r: "9", key: "hd149" }],
        [
          "path",
          {
            d: "M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95",
            key: "jp4j1b"
          }
        ],
        ["path", { d: "m22 2-1.5 1.5", key: "ay92ug" }]
      ]);
      var Bone = createLucideIcon("Bone", [
        [
          "path",
          {
            d: "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z",
            key: "w610uw"
          }
        ]
      ]);
      var BookA = createLucideIcon("BookA", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "m8 13 4-7 4 7", key: "4rari8" }],
        ["path", { d: "M9.1 11h5.7", key: "1gkovt" }]
      ]);
      var BookAudio = createLucideIcon("BookAudio", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M8 8v3", key: "1qzp49" }],
        ["path", { d: "M12 6v7", key: "1f6ttz" }],
        ["path", { d: "M16 8v3", key: "gejaml" }]
      ]);
      var BookCheck = createLucideIcon("BookCheck", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "m9 9.5 2 2 4-4", key: "1dth82" }]
      ]);
      var BookCopy = createLucideIcon("BookCopy", [
        ["path", { d: "M2 16V4a2 2 0 0 1 2-2h11", key: "spzkk5" }],
        ["path", { d: "M5 14H4a2 2 0 1 0 0 4h1", key: "16gqf9" }],
        ["path", { d: "M22 18H11a2 2 0 1 0 0 4h11V6H11a2 2 0 0 0-2 2v12", key: "1owzki" }]
      ]);
      var BookDashed = createLucideIcon("BookDashed", [
        ["path", { d: "M20 22h-2", key: "1rpnb6" }],
        ["path", { d: "M20 15v2h-2", key: "fph276" }],
        ["path", { d: "M4 19.5V15", key: "6gr39e" }],
        ["path", { d: "M20 8v3", key: "deu0bs" }],
        ["path", { d: "M18 2h2v2", key: "180o53" }],
        ["path", { d: "M4 11V9", key: "v3xsx8" }],
        ["path", { d: "M12 2h2", key: "cvn524" }],
        ["path", { d: "M12 22h2", key: "kn7ki6" }],
        ["path", { d: "M12 17h2", key: "13u4lk" }],
        ["path", { d: "M8 22H6.5a2.5 2.5 0 0 1 0-5H8", key: "fiseg2" }],
        ["path", { d: "M4 5v-.5A2.5 2.5 0 0 1 6.5 2H8", key: "wywhs9" }]
      ]);
      var BookDown = createLucideIcon("BookDown", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "m9 10 3 3 3-3", key: "zt5b4y" }]
      ]);
      var BookHeadphones = createLucideIcon("BookHeadphones", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
        ["path", { d: "M8 12v-2a4 4 0 0 1 8 0v2", key: "1vsqkj" }],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }]
      ]);
      var BookHeart = createLucideIcon("BookHeart", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        [
          "path",
          {
            d: "M16 8.2C16 7 15 6 13.8 6c-.8 0-1.4.3-1.8.9-.4-.6-1-.9-1.8-.9C9 6 8 7 8 8.2c0 .6.3 1.2.7 1.6h0C10 11.1 12 13 12 13s2-1.9 3.3-3.1h0c.4-.4.7-1 .7-1.7z",
            key: "1dlbw1"
          }
        ]
      ]);
      var BookImage = createLucideIcon("BookImage", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["circle", { cx: "10", cy: "8", r: "2", key: "2qkj4p" }],
        ["path", { d: "m20 13.7-2.1-2.1c-.8-.8-2-.8-2.8 0L9.7 17", key: "160say" }]
      ]);
      var BookKey = createLucideIcon("BookKey", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H14", key: "1gfsgw" }],
        ["path", { d: "M20 8v14H6.5a2.5 2.5 0 0 1 0-5H20", key: "zb0ngp" }],
        ["circle", { cx: "14", cy: "8", r: "2", key: "u49eql" }],
        ["path", { d: "m20 2-4.5 4.5", key: "1sppr8" }],
        ["path", { d: "m19 3 1 1", key: "ze14oc" }]
      ]);
      var BookLock = createLucideIcon("BookLock", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10", key: "18wgow" }],
        ["path", { d: "M20 15v7H6.5a2.5 2.5 0 0 1 0-5H20", key: "dpch1j" }],
        ["rect", { width: "8", height: "5", x: "12", y: "6", rx: "1", key: "9nqwug" }],
        ["path", { d: "M18 6V4a2 2 0 1 0-4 0v2", key: "1aquzs" }]
      ]);
      var BookMarked = createLucideIcon("BookMarked", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["polyline", { points: "10 2 10 10 13 7 16 10 16 2", key: "13o6vz" }]
      ]);
      var BookMinus = createLucideIcon("BookMinus", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ]);
      var BookOpenCheck = createLucideIcon("BookOpenCheck", [
        ["path", { d: "M8 3H2v15h7c1.7 0 3 1.3 3 3V7c0-2.2-1.8-4-4-4Z", key: "1i8u0n" }],
        ["path", { d: "m16 12 2 2 4-4", key: "mdajum" }],
        ["path", { d: "M22 6V3h-6c-2.2 0-4 1.8-4 4v14c0-1.7 1.3-3 3-3h7v-2.3", key: "jb5l51" }]
      ]);
      var BookOpenText = createLucideIcon("BookOpenText", [
        ["path", { d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z", key: "vv98re" }],
        ["path", { d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z", key: "1cyq3y" }],
        ["path", { d: "M6 8h2", key: "30oboj" }],
        ["path", { d: "M6 12h2", key: "32wvfc" }],
        ["path", { d: "M16 8h2", key: "msurwy" }],
        ["path", { d: "M16 12h2", key: "7q9ll5" }]
      ]);
      var BookOpen = createLucideIcon("BookOpen", [
        ["path", { d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z", key: "vv98re" }],
        ["path", { d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z", key: "1cyq3y" }]
      ]);
      var BookPlus = createLucideIcon("BookPlus", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }],
        ["path", { d: "M12 7v6", key: "lw1j43" }]
      ]);
      var BookText = createLucideIcon("BookText", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M8 7h6", key: "1f0q6e" }],
        ["path", { d: "M8 11h8", key: "vwpz6n" }]
      ]);
      var BookType = createLucideIcon("BookType", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M16 8V6H8v2", key: "x8j6u4" }],
        ["path", { d: "M12 6v7", key: "1f6ttz" }],
        ["path", { d: "M10 13h4", key: "ytezjc" }]
      ]);
      var BookUp2 = createLucideIcon("BookUp2", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2", key: "1lorq7" }],
        ["path", { d: "M18 2h2v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "1nfm9i" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
        ["path", { d: "m9 5 3-3 3 3", key: "l8vdw6" }]
      ]);
      var BookUp = createLucideIcon("BookUp", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
      ]);
      var BookUser = createLucideIcon("BookUser", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        ["path", { d: "M15 13a3 3 0 1 0-6 0", key: "10j68g" }]
      ]);
      var BookX = createLucideIcon("BookX", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }],
        ["path", { d: "m14.5 7-5 5", key: "dy991v" }],
        ["path", { d: "m9.5 7 5 5", key: "s45iea" }]
      ]);
      var Book = createLucideIcon("Book", [
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20", key: "t4utmx" }]
      ]);
      var BookmarkCheck = createLucideIcon("BookmarkCheck", [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }]
      ]);
      var BookmarkMinus = createLucideIcon("BookmarkMinus", [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
        ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
      ]);
      var BookmarkPlus = createLucideIcon("BookmarkPlus", [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
        ["line", { x1: "12", x2: "12", y1: "7", y2: "13", key: "1cppfj" }],
        ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
      ]);
      var BookmarkX = createLucideIcon("BookmarkX", [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
        ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
        ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
      ]);
      var Bookmark = createLucideIcon("Bookmark", [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }]
      ]);
      var BoomBox = createLucideIcon("BoomBox", [
        ["path", { d: "M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "vvzvr1" }],
        ["path", { d: "M8 8v1", key: "xcqmfk" }],
        ["path", { d: "M12 8v1", key: "1rj8u4" }],
        ["path", { d: "M16 8v1", key: "1q12zr" }],
        ["rect", { width: "20", height: "12", x: "2", y: "9", rx: "2", key: "igpb89" }],
        ["circle", { cx: "8", cy: "15", r: "2", key: "fa4a8s" }],
        ["circle", { cx: "16", cy: "15", r: "2", key: "14c3ya" }]
      ]);
      var Bot = createLucideIcon("Bot", [
        ["path", { d: "M12 8V4H8", key: "hb8ula" }],
        ["rect", { width: "16", height: "12", x: "4", y: "8", rx: "2", key: "enze0r" }],
        ["path", { d: "M2 14h2", key: "vft8re" }],
        ["path", { d: "M20 14h2", key: "4cs60a" }],
        ["path", { d: "M15 13v2", key: "1xurst" }],
        ["path", { d: "M9 13v2", key: "rq6x2g" }]
      ]);
      var BoxSelect = createLucideIcon("BoxSelect", [
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M21 14v1", key: "169vum" }]
      ]);
      var Box = createLucideIcon("Box", [
        [
          "path",
          {
            d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
            key: "hh9hay"
          }
        ],
        ["path", { d: "m3.3 7 8.7 5 8.7-5", key: "g66t2b" }],
        ["path", { d: "M12 22V12", key: "d0xqtd" }]
      ]);
      var Boxes = createLucideIcon("Boxes", [
        [
          "path",
          {
            d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z",
            key: "lc1i9w"
          }
        ],
        ["path", { d: "m7 16.5-4.74-2.85", key: "1o9zyk" }],
        ["path", { d: "m7 16.5 5-3", key: "va8pkn" }],
        ["path", { d: "M7 16.5v5.17", key: "jnp8gn" }],
        [
          "path",
          {
            d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z",
            key: "8zsnat"
          }
        ],
        ["path", { d: "m17 16.5-5-3", key: "8arw3v" }],
        ["path", { d: "m17 16.5 4.74-2.85", key: "8rfmw" }],
        ["path", { d: "M17 16.5v5.17", key: "k6z78m" }],
        [
          "path",
          {
            d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z",
            key: "1xygjf"
          }
        ],
        ["path", { d: "M12 8 7.26 5.15", key: "1vbdud" }],
        ["path", { d: "m12 8 4.74-2.85", key: "3rx089" }],
        ["path", { d: "M12 13.5V8", key: "1io7kd" }]
      ]);
      var Braces = createLucideIcon("Braces", [
        [
          "path",
          { d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1", key: "ezmyqa" }
        ],
        [
          "path",
          {
            d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1",
            key: "e1hn23"
          }
        ]
      ]);
      var Brackets = createLucideIcon("Brackets", [
        ["path", { d: "M16 3h3v18h-3", key: "1yor1f" }],
        ["path", { d: "M8 21H5V3h3", key: "1qrfwo" }]
      ]);
      var BrainCircuit = createLucideIcon("BrainCircuit", [
        [
          "path",
          {
            d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08 2.5 2.5 0 0 0 4.91.05L12 20V4.5Z",
            key: "ixwj2a"
          }
        ],
        ["path", { d: "M16 8V5c0-1.1.9-2 2-2", key: "13dx7u" }],
        ["path", { d: "M12 13h4", key: "1ku699" }],
        ["path", { d: "M12 18h6a2 2 0 0 1 2 2v1", key: "105ag5" }],
        ["path", { d: "M12 8h8", key: "1lhi5i" }],
        ["path", { d: "M20.5 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "1s25gz" }],
        ["path", { d: "M16.5 13a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "127460" }],
        ["path", { d: "M20.5 21a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "fys062" }],
        ["path", { d: "M18.5 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "1vib61" }]
      ]);
      var BrainCog = createLucideIcon("BrainCog", [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        [
          "path",
          {
            d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08A2.5 2.5 0 0 0 12 19.5a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 12 4.5",
            key: "1f4le0"
          }
        ],
        ["path", { d: "m15.7 10.4-.9.4", key: "ayzo6p" }],
        ["path", { d: "m9.2 13.2-.9.4", key: "1uzb3g" }],
        ["path", { d: "m13.6 15.7-.4-.9", key: "11ifqf" }],
        ["path", { d: "m10.8 9.2-.4-.9", key: "1pmk2v" }],
        ["path", { d: "m15.7 13.5-.9-.4", key: "7ng02m" }],
        ["path", { d: "m9.2 10.9-.9-.4", key: "1x66zd" }],
        ["path", { d: "m10.5 15.7.4-.9", key: "3js94g" }],
        ["path", { d: "m13.1 9.2.4-.9", key: "18n7mc" }]
      ]);
      var Brain = createLucideIcon("Brain", [
        [
          "path",
          {
            d: "M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z",
            key: "1mhkh5"
          }
        ],
        [
          "path",
          {
            d: "M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z",
            key: "1d6s00"
          }
        ]
      ]);
      var BrickWall = createLucideIcon("BrickWall", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 9v6", key: "199k2o" }],
        ["path", { d: "M16 15v6", key: "8rj2es" }],
        ["path", { d: "M16 3v6", key: "1j6rpj" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M8 15v6", key: "1stoo3" }],
        ["path", { d: "M8 3v6", key: "vlvjmk" }]
      ]);
      var Briefcase = createLucideIcon("Briefcase", [
        ["rect", { width: "20", height: "14", x: "2", y: "7", rx: "2", ry: "2", key: "eto64e" }],
        ["path", { d: "M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16", key: "zwj3tp" }]
      ]);
      var BringToFront = createLucideIcon("BringToFront", [
        ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "2", key: "yj20xf" }],
        ["path", { d: "M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2", key: "1ltk23" }],
        ["path", { d: "M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2", key: "1q24h9" }]
      ]);
      var Brush = createLucideIcon("Brush", [
        ["path", { d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08", key: "1styjt" }],
        [
          "path",
          {
            d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
            key: "z0l1mu"
          }
        ]
      ]);
      var BugOff = createLucideIcon("BugOff", [
        ["path", { d: "M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2", key: "vl8zik" }],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M22 13h-4v-2a4 4 0 0 0-4-4h-1.3", key: "1ou0bd" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13", key: "1njkjs" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }]
      ]);
      var BugPlay = createLucideIcon("BugPlay", [
        ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }],
        ["path", { d: "M18 11a4 4 0 0 0-4-4h-4a4 4 0 0 0-4 4v3a6.1 6.1 0 0 0 2 4.5", key: "1tjixy" }],
        ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "m12 12 8 5-8 5Z", key: "1ydf81" }]
      ]);
      var Bug = createLucideIcon("Bug", [
        ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }],
        [
          "path",
          {
            d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6",
            key: "xs1cw7"
          }
        ],
        ["path", { d: "M12 20v-9", key: "1qisl0" }],
        ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "M22 13h-4", key: "1jl80f" }],
        ["path", { d: "M17.2 17c2.1.1 3.8 1.9 3.8 4", key: "k3fwyw" }]
      ]);
      var Building2 = createLucideIcon("Building2", [
        ["path", { d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z", key: "1b4qmf" }],
        ["path", { d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2", key: "i71pzd" }],
        ["path", { d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2", key: "10jefs" }],
        ["path", { d: "M10 6h4", key: "1itunk" }],
        ["path", { d: "M10 10h4", key: "tcdvrf" }],
        ["path", { d: "M10 14h4", key: "kelpxr" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ]);
      var Building = createLucideIcon("Building", [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
        ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
        ["path", { d: "M8 6h.01", key: "1dz90k" }],
        ["path", { d: "M16 6h.01", key: "1x0f13" }],
        ["path", { d: "M12 6h.01", key: "1vi96p" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }],
        ["path", { d: "M16 14h.01", key: "1gbofw" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }]
      ]);
      var BusFront = createLucideIcon("BusFront", [
        ["path", { d: "M4 6 2 7", key: "1mqr15" }],
        ["path", { d: "M10 6h4", key: "1itunk" }],
        ["path", { d: "m22 7-2-1", key: "1umjhc" }],
        ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
        ["path", { d: "M4 11h16", key: "mpoxn0" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M16 15h.01", key: "rnfrdf" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["path", { d: "M18 21v-2", key: "sqyl04" }]
      ]);
      var Bus = createLucideIcon("Bus", [
        ["path", { d: "M8 6v6", key: "18i7km" }],
        ["path", { d: "M15 6v6", key: "1sg6z9" }],
        ["path", { d: "M2 12h19.6", key: "de5uta" }],
        [
          "path",
          {
            d: "M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3",
            key: "1wwztk"
          }
        ],
        ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }],
        ["path", { d: "M9 18h5", key: "lrx6i" }],
        ["circle", { cx: "16", cy: "18", r: "2", key: "1v4tcr" }]
      ]);
      var CableCar = createLucideIcon("CableCar", [
        ["path", { d: "M10 3h.01", key: "lbucoy" }],
        ["path", { d: "M14 2h.01", key: "1k8aa1" }],
        ["path", { d: "m2 9 20-5", key: "1kz0j5" }],
        ["path", { d: "M12 12V6.5", key: "1vbrij" }],
        ["rect", { width: "16", height: "10", x: "4", y: "12", rx: "3", key: "if91er" }],
        ["path", { d: "M9 12v5", key: "3anwtq" }],
        ["path", { d: "M15 12v5", key: "5xh3zn" }],
        ["path", { d: "M4 17h16", key: "g4d7ey" }]
      ]);
      var Cable = createLucideIcon("Cable", [
        ["path", { d: "M4 9a2 2 0 0 1-2-2V5h6v2a2 2 0 0 1-2 2Z", key: "1s6oa5" }],
        ["path", { d: "M3 5V3", key: "1k5hjh" }],
        ["path", { d: "M7 5V3", key: "1t1388" }],
        ["path", { d: "M19 15V6.5a3.5 3.5 0 0 0-7 0v11a3.5 3.5 0 0 1-7 0V9", key: "1ytv72" }],
        ["path", { d: "M17 21v-2", key: "ds4u3f" }],
        ["path", { d: "M21 21v-2", key: "eo0ou" }],
        ["path", { d: "M22 19h-6v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2Z", key: "sdz6o8" }]
      ]);
      var CakeSlice = createLucideIcon("CakeSlice", [
        ["circle", { cx: "9", cy: "7", r: "2", key: "1305pl" }],
        [
          "path",
          { d: "M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6", key: "xle13f" }
        ],
        ["path", { d: "M16 13H3", key: "1wpj08" }],
        ["path", { d: "M16 17H3", key: "3lvfcd" }]
      ]);
      var Cake = createLucideIcon("Cake", [
        ["path", { d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8", key: "1w3rig" }],
        ["path", { d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1", key: "n2jgmb" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }],
        ["path", { d: "M7 8v3", key: "1qtyvj" }],
        ["path", { d: "M12 8v3", key: "hwp4zt" }],
        ["path", { d: "M17 8v3", key: "1i6e5u" }],
        ["path", { d: "M7 4h0.01", key: "hsw7lv" }],
        ["path", { d: "M12 4h0.01", key: "1e3d8f" }],
        ["path", { d: "M17 4h0.01", key: "p7cxgy" }]
      ]);
      var Calculator = createLucideIcon("Calculator", [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["line", { x1: "8", x2: "16", y1: "6", y2: "6", key: "x4nwl0" }],
        ["line", { x1: "16", x2: "16", y1: "14", y2: "18", key: "wjye3r" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }]
      ]);
      var CalendarCheck2 = createLucideIcon("CalendarCheck2", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "bce9hv" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
      ]);
      var CalendarCheck = createLucideIcon("CalendarCheck", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m9 16 2 2 4-4", key: "19s6y9" }]
      ]);
      var CalendarClock = createLucideIcon("CalendarClock", [
        ["path", { d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5", key: "1osxxc" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M3 10h5", key: "r794hk" }],
        ["path", { d: "M17.5 17.5 16 16.3V14", key: "akvzfd" }],
        ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }]
      ]);
      var CalendarDays = createLucideIcon("CalendarDays", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M16 14h.01", key: "1gbofw" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M16 18h.01", key: "kzsmim" }]
      ]);
      var CalendarFold = createLucideIcon("CalendarFold", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z", key: "kg77oy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M15 22v-4a2 2 0 0 1 2-2h4", key: "1gnbqr" }]
      ]);
      var CalendarHeart = createLucideIcon("CalendarHeart", [
        ["path", { d: "M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7", key: "136lmk" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        [
          "path",
          {
            d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1t7hil"
          }
        ]
      ]);
      var CalendarMinus2 = createLucideIcon("CalendarMinus2", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M10 16h4", key: "17e571" }]
      ]);
      var CalendarMinus = createLucideIcon("CalendarMinus", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }]
      ]);
      var CalendarOff = createLucideIcon("CalendarOff", [
        ["path", { d: "M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18", key: "16swn3" }],
        ["path", { d: "M21 15.5V6a2 2 0 0 0-2-2H9.5", key: "yhw86o" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M3 10h7", key: "1wap6i" }],
        ["path", { d: "M21 10h-5.5", key: "quycpq" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var CalendarPlus2 = createLucideIcon("CalendarPlus2", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M10 16h4", key: "17e571" }],
        ["path", { d: "M12 14v4", key: "1thi36" }]
      ]);
      var CalendarPlus = createLucideIcon("CalendarPlus", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }]
      ]);
      var CalendarRange = createLucideIcon("CalendarRange", [
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M17 14h-6", key: "bkmgh3" }],
        ["path", { d: "M13 18H7", key: "bb0bb7" }],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 18h.01", key: "1bdyru" }]
      ]);
      var CalendarSearch = createLucideIcon("CalendarSearch", [
        ["path", { d: "M21 12V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.5", key: "1e09qw" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
      ]);
      var CalendarX2 = createLucideIcon("CalendarX2", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m17 22 5-5", key: "1k6ppv" }],
        ["path", { d: "m17 17 5 5", key: "p7ous7" }]
      ]);
      var CalendarX = createLucideIcon("CalendarX", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m14 14-4 4", key: "rymu2i" }],
        ["path", { d: "m10 14 4 4", key: "3sz06r" }]
      ]);
      var Calendar = createLucideIcon("Calendar", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }]
      ]);
      var CameraOff = createLucideIcon("CameraOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16", key: "qmtpty" }],
        ["path", { d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5", key: "1ufyfc" }],
        ["path", { d: "M14.121 15.121A3 3 0 1 1 9.88 10.88", key: "11zox6" }]
      ]);
      var Camera = createLucideIcon("Camera", [
        [
          "path",
          {
            d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
            key: "1tc9qg"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "3", key: "1vg3eu" }]
      ]);
      var CandlestickChart = createLucideIcon("CandlestickChart", [
        ["path", { d: "M9 5v4", key: "14uxtq" }],
        ["rect", { width: "4", height: "6", x: "7", y: "9", rx: "1", key: "f4fvz0" }],
        ["path", { d: "M9 15v2", key: "r5rk32" }],
        ["path", { d: "M17 3v2", key: "1l2re6" }],
        ["rect", { width: "4", height: "8", x: "15", y: "5", rx: "1", key: "z38je5" }],
        ["path", { d: "M17 13v3", key: "5l0wba" }],
        ["path", { d: "M3 3v18h18", key: "1s2lah" }]
      ]);
      var CandyCane = createLucideIcon("CandyCane", [
        [
          "path",
          {
            d: "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z",
            key: "isaq8g"
          }
        ],
        ["path", { d: "M17.75 7 15 2.1", key: "12x7e8" }],
        ["path", { d: "M10.9 4.8 13 9", key: "100a87" }],
        ["path", { d: "m7.9 9.7 2 4.4", key: "ntfhaj" }],
        ["path", { d: "M4.9 14.7 7 18.9", key: "1x43jy" }]
      ]);
      var CandyOff = createLucideIcon("CandyOff", [
        ["path", { d: "m8.5 8.5-1 1a4.95 4.95 0 0 0 7 7l1-1", key: "1ff4ui" }],
        [
          "path",
          { d: "M11.843 6.187A4.947 4.947 0 0 1 16.5 7.5a4.947 4.947 0 0 1 1.313 4.657", key: "1sbrv4" }
        ],
        ["path", { d: "M14 16.5V14", key: "1maf8j" }],
        ["path", { d: "M14 6.5v1.843", key: "1a6u6t" }],
        ["path", { d: "M10 10v7.5", key: "80pj65" }],
        [
          "path",
          {
            d: "m16 7 1-5 1.367.683A3 3 0 0 0 19.708 3H21v1.292a3 3 0 0 0 .317 1.341L22 7l-5 1",
            key: "11a9mt"
          }
        ],
        [
          "path",
          {
            d: "m8 17-1 5-1.367-.683A3 3 0 0 0 4.292 21H3v-1.292a3 3 0 0 0-.317-1.341L2 17l5-1",
            key: "3mjmon"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Candy = createLucideIcon("Candy", [
        ["path", { d: "m9.5 7.5-2 2a4.95 4.95 0 1 0 7 7l2-2a4.95 4.95 0 1 0-7-7Z", key: "ue6khb" }],
        ["path", { d: "M14 6.5v10", key: "5xnk7c" }],
        ["path", { d: "M10 7.5v10", key: "1uew51" }],
        [
          "path",
          { d: "m16 7 1-5 1.37.68A3 3 0 0 0 19.7 3H21v1.3c0 .46.1.92.32 1.33L22 7l-5 1", key: "b9cp6k" }
        ],
        [
          "path",
          { d: "m8 17-1 5-1.37-.68A3 3 0 0 0 4.3 21H3v-1.3a3 3 0 0 0-.32-1.33L2 17l5-1", key: "5lney8" }
        ]
      ]);
      var CarFront = createLucideIcon("CarFront", [
        [
          "path",
          { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
        ],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ]);
      var CarTaxiFront = createLucideIcon("CarTaxiFront", [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        [
          "path",
          { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
        ],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ]);
      var Car = createLucideIcon("Car", [
        [
          "path",
          {
            d: "M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2",
            key: "5owen"
          }
        ],
        ["circle", { cx: "7", cy: "17", r: "2", key: "u2ysq9" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }],
        ["circle", { cx: "17", cy: "17", r: "2", key: "axvx0g" }]
      ]);
      var Caravan = createLucideIcon("Caravan", [
        ["rect", { width: "4", height: "4", x: "2", y: "9", key: "1vcvhd" }],
        ["rect", { width: "4", height: "10", x: "10", y: "9", key: "1b7ev2" }],
        ["path", { d: "M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2", key: "19jm3t" }],
        ["circle", { cx: "8", cy: "19", r: "2", key: "t8fc5s" }],
        ["path", { d: "M10 19h12v-2", key: "1yu2qx" }]
      ]);
      var Carrot = createLucideIcon("Carrot", [
        [
          "path",
          {
            d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46",
            key: "rfqxbe"
          }
        ],
        ["path", { d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z", key: "6b25w4" }],
        ["path", { d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z", key: "fn65lo" }]
      ]);
      var CaseLower = createLucideIcon("CaseLower", [
        ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
        ["path", { d: "M10 9v6", key: "17i7lo" }],
        ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
        ["path", { d: "M14 7v8", key: "dl84cr" }]
      ]);
      var CaseSensitive = createLucideIcon("CaseSensitive", [
        ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
        ["path", { d: "M4 13h6", key: "1r9ots" }],
        ["circle", { cx: "18", cy: "12", r: "3", key: "1kchzo" }],
        ["path", { d: "M21 9v6", key: "anns31" }]
      ]);
      var CaseUpper = createLucideIcon("CaseUpper", [
        ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
        ["path", { d: "M4 13h6", key: "1r9ots" }],
        ["path", { d: "M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4", key: "1sqfas" }]
      ]);
      var CassetteTape = createLucideIcon("CassetteTape", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["circle", { cx: "8", cy: "10", r: "2", key: "1xl4ub" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["circle", { cx: "16", cy: "10", r: "2", key: "r14t7q" }],
        ["path", { d: "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3", key: "l01ucn" }]
      ]);
      var Cast = createLucideIcon("Cast", [
        ["path", { d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6", key: "3zrzxg" }],
        ["path", { d: "M2 12a9 9 0 0 1 8 8", key: "g6cvee" }],
        ["path", { d: "M2 16a5 5 0 0 1 4 4", key: "1y1dii" }],
        ["line", { x1: "2", x2: "2.01", y1: "20", y2: "20", key: "xu2jvo" }]
      ]);
      var Castle = createLucideIcon("Castle", [
        ["path", { d: "M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z", key: "109fe4" }],
        ["path", { d: "M18 11V4H6v7", key: "mon5oj" }],
        ["path", { d: "M15 22v-4a3 3 0 0 0-3-3v0a3 3 0 0 0-3 3v4", key: "jdggr9" }],
        ["path", { d: "M22 11V9", key: "3zbp94" }],
        ["path", { d: "M2 11V9", key: "1x5rnq" }],
        ["path", { d: "M6 4V2", key: "1rsq15" }],
        ["path", { d: "M18 4V2", key: "1jsdo1" }],
        ["path", { d: "M10 4V2", key: "75d9ly" }],
        ["path", { d: "M14 4V2", key: "8nj3z6" }]
      ]);
      var Cat = createLucideIcon("Cat", [
        [
          "path",
          {
            d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z",
            key: "x6xyqk"
          }
        ],
        ["path", { d: "M8 14v.5", key: "1nzgdb" }],
        ["path", { d: "M16 14v.5", key: "1lajdz" }],
        ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }]
      ]);
      var Cctv = createLucideIcon("Cctv", [
        ["path", { d: "M7 9h.01", key: "19b3jx" }],
        ["path", { d: "M16.75 12H22l-3.5 7-3.09-4.32", key: "1h9vqe" }],
        [
          "path",
          {
            d: "M18 9.5l-4 8-10.39-5.2a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3Z",
            key: "q5d122"
          }
        ],
        ["path", { d: "M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15", key: "19bib8" }],
        ["path", { d: "M2 21v-4", key: "l40lih" }]
      ]);
      var CheckCheck = createLucideIcon("CheckCheck", [
        ["path", { d: "M18 6 7 17l-5-5", key: "116fxf" }],
        ["path", { d: "m22 10-7.5 7.5L13 16", key: "ke71qq" }]
      ]);
      var CheckCircle2 = createLucideIcon("CheckCircle2", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ]);
      var CheckCircle = createLucideIcon("CheckCircle", [
        ["path", { d: "M22 11.08V12a10 10 0 1 1-5.93-9.14", key: "g774vq" }],
        ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
      ]);
      var CheckSquare2 = createLucideIcon("CheckSquare2", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ]);
      var CheckSquare = createLucideIcon("CheckSquare", [
        ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }],
        ["path", { d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11", key: "1jnkn4" }]
      ]);
      var Check = createLucideIcon("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);
      var ChefHat = createLucideIcon("ChefHat", [
        [
          "path",
          {
            d: "M6 13.87A4 4 0 0 1 7.41 6a5.11 5.11 0 0 1 1.05-1.54 5 5 0 0 1 7.08 0A5.11 5.11 0 0 1 16.59 6 4 4 0 0 1 18 13.87V21H6Z",
            key: "z3ra2g"
          }
        ],
        ["line", { x1: "6", x2: "18", y1: "17", y2: "17", key: "12q60k" }]
      ]);
      var Cherry = createLucideIcon("Cherry", [
        ["path", { d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "cvxqlc" }],
        ["path", { d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "1ostrc" }],
        ["path", { d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12", key: "hqx58h" }],
        ["path", { d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z", key: "eykp1o" }]
      ]);
      var ChevronDownCircle = createLucideIcon("ChevronDownCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
      ]);
      var ChevronDownSquare = createLucideIcon("ChevronDownSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
      ]);
      var ChevronDown = createLucideIcon("ChevronDown", [
        ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
      ]);
      var ChevronFirst = createLucideIcon("ChevronFirst", [
        ["path", { d: "m17 18-6-6 6-6", key: "1yerx2" }],
        ["path", { d: "M7 6v12", key: "1p53r6" }]
      ]);
      var ChevronLast = createLucideIcon("ChevronLast", [
        ["path", { d: "m7 18 6-6-6-6", key: "lwmzdw" }],
        ["path", { d: "M17 6v12", key: "1o0aio" }]
      ]);
      var ChevronLeftCircle = createLucideIcon("ChevronLeftCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
      ]);
      var ChevronLeftSquare = createLucideIcon("ChevronLeftSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
      ]);
      var ChevronLeft = createLucideIcon("ChevronLeft", [
        ["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]
      ]);
      var ChevronRightCircle = createLucideIcon("ChevronRightCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
      ]);
      var ChevronRightSquare = createLucideIcon("ChevronRightSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
      ]);
      var ChevronRight = createLucideIcon("ChevronRight", [
        ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
      ]);
      var ChevronUpCircle = createLucideIcon("ChevronUpCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
      ]);
      var ChevronUpSquare = createLucideIcon("ChevronUpSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
      ]);
      var ChevronUp = createLucideIcon("ChevronUp", [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]]);
      var ChevronsDownUp = createLucideIcon("ChevronsDownUp", [
        ["path", { d: "m7 20 5-5 5 5", key: "13a0gw" }],
        ["path", { d: "m7 4 5 5 5-5", key: "1kwcof" }]
      ]);
      var ChevronsDown = createLucideIcon("ChevronsDown", [
        ["path", { d: "m7 6 5 5 5-5", key: "1lc07p" }],
        ["path", { d: "m7 13 5 5 5-5", key: "1d48rs" }]
      ]);
      var ChevronsLeftRight = createLucideIcon("ChevronsLeftRight", [
        ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
        ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
      ]);
      var ChevronsLeft = createLucideIcon("ChevronsLeft", [
        ["path", { d: "m11 17-5-5 5-5", key: "13zhaf" }],
        ["path", { d: "m18 17-5-5 5-5", key: "h8a8et" }]
      ]);
      var ChevronsRightLeft = createLucideIcon("ChevronsRightLeft", [
        ["path", { d: "m20 17-5-5 5-5", key: "30x0n2" }],
        ["path", { d: "m4 17 5-5-5-5", key: "16spf4" }]
      ]);
      var ChevronsRight = createLucideIcon("ChevronsRight", [
        ["path", { d: "m6 17 5-5-5-5", key: "xnjwq" }],
        ["path", { d: "m13 17 5-5-5-5", key: "17xmmf" }]
      ]);
      var ChevronsUpDown = createLucideIcon("ChevronsUpDown", [
        ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
        ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
      ]);
      var ChevronsUp = createLucideIcon("ChevronsUp", [
        ["path", { d: "m17 11-5-5-5 5", key: "e8nh98" }],
        ["path", { d: "m17 18-5-5-5 5", key: "2avn1x" }]
      ]);
      var Chrome = createLucideIcon("Chrome", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["line", { x1: "21.17", x2: "12", y1: "8", y2: "8", key: "a0cw5f" }],
        ["line", { x1: "3.95", x2: "8.54", y1: "6.06", y2: "14", key: "1kftof" }],
        ["line", { x1: "10.88", x2: "15.46", y1: "21.94", y2: "14", key: "1ymyh8" }]
      ]);
      var Church = createLucideIcon("Church", [
        ["path", { d: "m18 7 4 2v11a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9l4-2", key: "gy5gyo" }],
        ["path", { d: "M14 22v-4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v4", key: "cpkuc4" }],
        ["path", { d: "M18 22V5l-6-3-6 3v17", key: "1hsnhq" }],
        ["path", { d: "M12 7v5", key: "ma6bk" }],
        ["path", { d: "M10 9h4", key: "u4k05v" }]
      ]);
      var CigaretteOff = createLucideIcon("CigaretteOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M12 12H2v4h14", key: "91gsaq" }],
        ["path", { d: "M22 12v4", key: "142cbu" }],
        ["path", { d: "M18 12h-.5", key: "12ymji" }],
        ["path", { d: "M7 12v4", key: "jqww69" }],
        ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
        ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }]
      ]);
      var Cigarette = createLucideIcon("Cigarette", [
        ["path", { d: "M18 12H2v4h16", key: "2rt1hm" }],
        ["path", { d: "M22 12v4", key: "142cbu" }],
        ["path", { d: "M7 12v4", key: "jqww69" }],
        ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
        ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }]
      ]);
      var CircleDashed = createLucideIcon("CircleDashed", [
        ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
        ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
        ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
        ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
        ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
        ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
        ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
        ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }]
      ]);
      var CircleDollarSign = createLucideIcon("CircleDollarSign", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }]
      ]);
      var CircleDotDashed = createLucideIcon("CircleDotDashed", [
        ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
        ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
        ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
        ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
        ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
        ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
        ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
        ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ]);
      var CircleDot = createLucideIcon("CircleDot", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ]);
      var CircleEllipsis = createLucideIcon("CircleEllipsis", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M17 12h.01", key: "1m0b6t" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M7 12h.01", key: "eqddd0" }]
      ]);
      var CircleEqual = createLucideIcon("CircleEqual", [
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M7 14h10", key: "1mhdw3" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var CircleOff = createLucideIcon("CircleOff", [
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M8.35 2.69A10 10 0 0 1 21.3 15.65", key: "1pfsoa" }],
        ["path", { d: "M19.08 19.08A10 10 0 1 1 4.92 4.92", key: "1ablyi" }]
      ]);
      var CircleSlash2 = createLucideIcon("CircleSlash2", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M22 2 2 22", key: "y4kqgn" }]
      ]);
      var CircleSlash = createLucideIcon("CircleSlash", [
        ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var CircleUserRound = createLucideIcon("CircleUserRound", [
        ["path", { d: "M18 20a6 6 0 0 0-12 0", key: "1qehca" }],
        ["circle", { cx: "12", cy: "10", r: "4", key: "1h16sb" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var CircleUser = createLucideIcon("CircleUser", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662", key: "154egf" }]
      ]);
      var Circle = createLucideIcon("Circle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var CircuitBoard = createLucideIcon("CircuitBoard", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M11 9h4a2 2 0 0 0 2-2V3", key: "1ve2rv" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "M7 21v-4a2 2 0 0 1 2-2h4", key: "1fwkro" }],
        ["circle", { cx: "15", cy: "15", r: "2", key: "3i40o0" }]
      ]);
      var Citrus = createLucideIcon("Citrus", [
        [
          "path",
          {
            d: "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z",
            key: "4ite01"
          }
        ],
        ["path", { d: "M19.65 15.66A8 8 0 0 1 8.35 4.34", key: "1gxipu" }],
        ["path", { d: "m14 10-5.5 5.5", key: "92pfem" }],
        ["path", { d: "M14 17.85V10H6.15", key: "xqmtsk" }]
      ]);
      var Clapperboard = createLucideIcon("Clapperboard", [
        [
          "path",
          { d: "M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z", key: "1tn4o7" }
        ],
        ["path", { d: "m6.2 5.3 3.1 3.9", key: "iuk76l" }],
        ["path", { d: "m12.4 3.4 3.1 4", key: "6hsd6n" }],
        ["path", { d: "M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z", key: "ltgou9" }]
      ]);
      var ClipboardCheck = createLucideIcon("ClipboardCheck", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "m9 14 2 2 4-4", key: "df797q" }]
      ]);
      var ClipboardCopy = createLucideIcon("ClipboardCopy", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2", key: "4jdomd" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v4", key: "3hqy98" }],
        ["path", { d: "M21 14H11", key: "1bme5i" }],
        ["path", { d: "m15 10-4 4 4 4", key: "5dvupr" }]
      ]);
      var ClipboardList = createLucideIcon("ClipboardList", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M12 11h4", key: "1jrz19" }],
        ["path", { d: "M12 16h4", key: "n85exb" }],
        ["path", { d: "M8 11h.01", key: "1dfujw" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ]);
      var ClipboardPaste = createLucideIcon("ClipboardPaste", [
        [
          "path",
          { d: "M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z", key: "1pp7kr" }
        ],
        [
          "path",
          {
            d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10",
            key: "2ik1ml"
          }
        ],
        ["path", { d: "m17 10 4 4-4 4", key: "vp2hj1" }]
      ]);
      var ClipboardPenLine = createLucideIcon("ClipboardPenLine", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
        ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5", key: "1but9f" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 1.73 1", key: "1p8n7l" }],
        ["path", { d: "M8 18h1", key: "13wk12" }],
        ["path", { d: "M18.4 9.6a2 2 0 0 1 3 3L17 17l-4 1 1-4Z", key: "yg2pdb" }]
      ]);
      var ClipboardPen = createLucideIcon("ClipboardPen", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
        ["path", { d: "M10.4 12.6a2 2 0 0 1 3 3L8 21l-4 1 1-4Z", key: "hnx206" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5", key: "cereej" }],
        ["path", { d: "M4 13.5V6a2 2 0 0 1 2-2h2", key: "5ua5vh" }]
      ]);
      var ClipboardType = createLucideIcon("ClipboardType", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M9 12v-1h6v1", key: "iehl6m" }],
        ["path", { d: "M11 17h2", key: "12w5me" }],
        ["path", { d: "M12 11v6", key: "1bwqyc" }]
      ]);
      var ClipboardX = createLucideIcon("ClipboardX", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "m15 11-6 6", key: "1toa9n" }],
        ["path", { d: "m9 11 6 6", key: "wlibny" }]
      ]);
      var Clipboard = createLucideIcon("Clipboard", [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ]
      ]);
      var Clock1 = createLucideIcon("Clock1", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 14.5 8", key: "12zbmj" }]
      ]);
      var Clock10 = createLucideIcon("Clock10", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 8 10", key: "atfzqc" }]
      ]);
      var Clock11 = createLucideIcon("Clock11", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 9.5 8", key: "l5bg6f" }]
      ]);
      var Clock12 = createLucideIcon("Clock12", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12", key: "1fub01" }]
      ]);
      var Clock2 = createLucideIcon("Clock2", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 10", key: "1g230d" }]
      ]);
      var Clock3 = createLucideIcon("Clock3", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16.5 12", key: "1aq6pp" }]
      ]);
      var Clock4 = createLucideIcon("Clock4", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
      ]);
      var Clock5 = createLucideIcon("Clock5", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 14.5 16", key: "1pcbox" }]
      ]);
      var Clock6 = createLucideIcon("Clock6", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 12 16.5", key: "hb2qv6" }]
      ]);
      var Clock7 = createLucideIcon("Clock7", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 9.5 16", key: "ka3394" }]
      ]);
      var Clock8 = createLucideIcon("Clock8", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 8 14", key: "tmc9b4" }]
      ]);
      var Clock9 = createLucideIcon("Clock9", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 7.5 12", key: "1k60p0" }]
      ]);
      var Clock = createLucideIcon("Clock", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
      ]);
      var CloudCog = createLucideIcon("CloudCog", [
        ["circle", { cx: "12", cy: "17", r: "3", key: "1spfwm" }],
        ["path", { d: "M4.2 15.1A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2", key: "zaobp" }],
        ["path", { d: "m15.7 18.4-.9-.3", key: "4qxpbn" }],
        ["path", { d: "m9.2 15.9-.9-.3", key: "17q7o2" }],
        ["path", { d: "m10.6 20.7.3-.9", key: "1pf4s2" }],
        ["path", { d: "m13.1 14.2.3-.9", key: "1mnuqm" }],
        ["path", { d: "m13.6 20.7-.4-1", key: "1jpd1m" }],
        ["path", { d: "m10.8 14.3-.4-1", key: "17ugyy" }],
        ["path", { d: "m8.3 18.6 1-.4", key: "s42vdx" }],
        ["path", { d: "m14.7 15.8 1-.4", key: "2wizun" }]
      ]);
      var CloudDrizzle = createLucideIcon("CloudDrizzle", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M8 19v1", key: "1dk2by" }],
        ["path", { d: "M8 14v1", key: "84yxot" }],
        ["path", { d: "M16 19v1", key: "v220m7" }],
        ["path", { d: "M16 14v1", key: "g12gj6" }],
        ["path", { d: "M12 21v1", key: "q8vafk" }],
        ["path", { d: "M12 16v1", key: "1mx6rx" }]
      ]);
      var CloudFog = createLucideIcon("CloudFog", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 17H7", key: "pygtm1" }],
        ["path", { d: "M17 21H9", key: "1u2q02" }]
      ]);
      var CloudHail = createLucideIcon("CloudHail", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 14v2", key: "a1is7l" }],
        ["path", { d: "M8 14v2", key: "1e9m6t" }],
        ["path", { d: "M16 20h.01", key: "xwek51" }],
        ["path", { d: "M8 20h.01", key: "1vjney" }],
        ["path", { d: "M12 16v2", key: "z66u1j" }],
        ["path", { d: "M12 22h.01", key: "1urd7a" }]
      ]);
      var CloudLightning = createLucideIcon("CloudLightning", [
        ["path", { d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973", key: "1cez44" }],
        ["path", { d: "m13 12-3 5h4l-3 5", key: "1t22er" }]
      ]);
      var CloudMoonRain = createLucideIcon("CloudMoonRain", [
        [
          "path",
          {
            d: "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197",
            key: "u82z8m"
          }
        ],
        ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
        ["path", { d: "M11 20v2", key: "174qtz" }],
        ["path", { d: "M7 19v2", key: "12npes" }]
      ]);
      var CloudMoon = createLucideIcon("CloudMoon", [
        ["path", { d: "M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z", key: "p44pc9" }],
        ["path", { d: "M10.1 9A6 6 0 0 1 16 4a4.24 4.24 0 0 0 6 6 6 6 0 0 1-3 5.197", key: "16nha0" }]
      ]);
      var CloudOff = createLucideIcon("CloudOff", [
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193", key: "yfwify" }],
        [
          "path",
          { d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07", key: "jlfiyv" }
        ]
      ]);
      var CloudRainWind = createLucideIcon("CloudRainWind", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "m9.2 22 3-7", key: "sb5f6j" }],
        ["path", { d: "m9 13-3 7", key: "500co5" }],
        ["path", { d: "m17 13-3 7", key: "8t2fiy" }]
      ]);
      var CloudRain = createLucideIcon("CloudRain", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 14v6", key: "1j4efv" }],
        ["path", { d: "M8 14v6", key: "17c4r9" }],
        ["path", { d: "M12 16v6", key: "c8a4gj" }]
      ]);
      var CloudSnow = createLucideIcon("CloudSnow", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M8 19h.01", key: "puxtts" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }],
        ["path", { d: "M12 21h.01", key: "h35vbk" }],
        ["path", { d: "M16 15h.01", key: "rnfrdf" }],
        ["path", { d: "M16 19h.01", key: "1vcnzz" }]
      ]);
      var CloudSunRain = createLucideIcon("CloudSunRain", [
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
        ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
        ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
        ["path", { d: "M11 20v2", key: "174qtz" }],
        ["path", { d: "M7 19v2", key: "12npes" }]
      ]);
      var CloudSun = createLucideIcon("CloudSun", [
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
        ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
        ["path", { d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z", key: "s09mg5" }]
      ]);
      var Cloud = createLucideIcon("Cloud", [
        ["path", { d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "p7xjir" }]
      ]);
      var Cloudy = createLucideIcon("Cloudy", [
        ["path", { d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "gqqjvc" }],
        ["path", { d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5", key: "1p2s76" }]
      ]);
      var Clover = createLucideIcon("Clover", [
        [
          "path",
          {
            d: "M16.2 3.8a2.7 2.7 0 0 0-3.81 0l-.4.38-.4-.4a2.7 2.7 0 0 0-3.82 0C6.73 4.85 6.67 6.64 8 8l4 4 4-4c1.33-1.36 1.27-3.15.2-4.2z",
            key: "1gxwox"
          }
        ],
        [
          "path",
          {
            d: "M8 8c-1.36-1.33-3.15-1.27-4.2-.2a2.7 2.7 0 0 0 0 3.81l.38.4-.4.4a2.7 2.7 0 0 0 0 3.82C4.85 17.27 6.64 17.33 8 16",
            key: "il7z7z"
          }
        ],
        [
          "path",
          {
            d: "M16 16c1.36 1.33 3.15 1.27 4.2.2a2.7 2.7 0 0 0 0-3.81l-.38-.4.4-.4a2.7 2.7 0 0 0 0-3.82C19.15 6.73 17.36 6.67 16 8",
            key: "15bpx2"
          }
        ],
        [
          "path",
          {
            d: "M7.8 20.2a2.7 2.7 0 0 0 3.81 0l.4-.38.4.4a2.7 2.7 0 0 0 3.82 0c1.06-1.06 1.12-2.85-.21-4.21l-4-4-4 4c-1.33 1.36-1.27 3.15-.2 4.2z",
            key: "v9mug8"
          }
        ],
        ["path", { d: "m7 17-5 5", key: "1py3mz" }]
      ]);
      var Club = createLucideIcon("Club", [
        [
          "path",
          {
            d: "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z",
            key: "27yuqz"
          }
        ],
        ["path", { d: "M12 17.66L12 22", key: "ogfahf" }]
      ]);
      var Code2 = createLucideIcon("Code2", [
        ["path", { d: "m18 16 4-4-4-4", key: "1inbqp" }],
        ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
        ["path", { d: "m14.5 4-5 16", key: "e7oirm" }]
      ]);
      var CodeSquare = createLucideIcon("CodeSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m10 10-2 2 2 2", key: "p6et6i" }],
        ["path", { d: "m14 14 2-2-2-2", key: "m075q2" }]
      ]);
      var Code = createLucideIcon("Code", [
        ["polyline", { points: "16 18 22 12 16 6", key: "z7tu5w" }],
        ["polyline", { points: "8 6 2 12 8 18", key: "1eg1df" }]
      ]);
      var Codepen = createLucideIcon("Codepen", [
        ["polygon", { points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2", key: "srzb37" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "15.5", key: "1t73f2" }],
        ["polyline", { points: "22 8.5 12 15.5 2 8.5", key: "ajlxae" }],
        ["polyline", { points: "2 15.5 12 8.5 22 15.5", key: "susrui" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "8.5", key: "2cldga" }]
      ]);
      var Codesandbox = createLucideIcon("Codesandbox", [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ],
        ["polyline", { points: "7.5 4.21 12 6.81 16.5 4.21", key: "fabo96" }],
        ["polyline", { points: "7.5 19.79 7.5 14.6 3 12", key: "z377f1" }],
        ["polyline", { points: "21 12 16.5 14.6 16.5 19.79", key: "9nrev1" }],
        ["polyline", { points: "3.27 6.96 12 12.01 20.73 6.96", key: "1180pa" }],
        ["line", { x1: "12", x2: "12", y1: "22.08", y2: "12", key: "3z3uq6" }]
      ]);
      var Coffee = createLucideIcon("Coffee", [
        ["path", { d: "M17 8h1a4 4 0 1 1 0 8h-1", key: "jx4kbh" }],
        ["path", { d: "M3 8h14v9a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4Z", key: "1bxrl0" }],
        ["line", { x1: "6", x2: "6", y1: "2", y2: "4", key: "1cr9l3" }],
        ["line", { x1: "10", x2: "10", y1: "2", y2: "4", key: "170wym" }],
        ["line", { x1: "14", x2: "14", y1: "2", y2: "4", key: "1c5f70" }]
      ]);
      var Cog = createLucideIcon("Cog", [
        ["path", { d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z", key: "sobvz5" }],
        ["path", { d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", key: "11i496" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 22v-2", key: "1osdcq" }],
        ["path", { d: "m17 20.66-1-1.73", key: "eq3orb" }],
        ["path", { d: "M11 10.27 7 3.34", key: "16pf9h" }],
        ["path", { d: "m20.66 17-1.73-1", key: "sg0v6f" }],
        ["path", { d: "m3.34 7 1.73 1", key: "1ulond" }],
        ["path", { d: "M14 12h8", key: "4f43i9" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "m20.66 7-1.73 1", key: "1ow05n" }],
        ["path", { d: "m3.34 17 1.73-1", key: "nuk764" }],
        ["path", { d: "m17 3.34-1 1.73", key: "2wel8s" }],
        ["path", { d: "m11 13.73-4 6.93", key: "794ttg" }]
      ]);
      var Coins = createLucideIcon("Coins", [
        ["circle", { cx: "8", cy: "8", r: "6", key: "3yglwk" }],
        ["path", { d: "M18.09 10.37A6 6 0 1 1 10.34 18", key: "t5s6rm" }],
        ["path", { d: "M7 6h1v4", key: "1obek4" }],
        ["path", { d: "m16.71 13.88.7.71-2.82 2.82", key: "1rbuyh" }]
      ]);
      var Columns2 = createLucideIcon("Columns2", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 3v18", key: "108xh3" }]
      ]);
      var Columns3 = createLucideIcon("Columns3", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ]);
      var Columns4 = createLucideIcon("Columns4", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7.5 3v18", key: "w0wo6v" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["path", { d: "M16.5 3v18", key: "10tjh1" }]
      ]);
      var Combine = createLucideIcon("Combine", [
        ["rect", { width: "8", height: "8", x: "2", y: "2", rx: "2", key: "z1hh3n" }],
        ["path", { d: "M14 2c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2", key: "83orz6" }],
        ["path", { d: "M20 2c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2", key: "k86dmt" }],
        ["path", { d: "M10 18H5c-1.7 0-3-1.3-3-3v-1", key: "6vokjl" }],
        ["polyline", { points: "7 21 10 18 7 15", key: "1k02g0" }],
        ["rect", { width: "8", height: "8", x: "14", y: "14", rx: "2", key: "1fa9i4" }]
      ]);
      var Command = createLucideIcon("Command", [
        [
          "path",
          { d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3", key: "11bfej" }
        ]
      ]);
      var Compass = createLucideIcon("Compass", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polygon", { points: "16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76", key: "m9r19z" }]
      ]);
      var Component = createLucideIcon("Component", [
        ["path", { d: "M5.5 8.5 9 12l-3.5 3.5L2 12l3.5-3.5Z", key: "1kciei" }],
        ["path", { d: "m12 2 3.5 3.5L12 9 8.5 5.5 12 2Z", key: "1ome0g" }],
        ["path", { d: "M18.5 8.5 22 12l-3.5 3.5L15 12l3.5-3.5Z", key: "vbupec" }],
        ["path", { d: "m12 15 3.5 3.5L12 22l-3.5-3.5L12 15Z", key: "16csic" }]
      ]);
      var Computer = createLucideIcon("Computer", [
        ["rect", { width: "14", height: "8", x: "5", y: "2", rx: "2", key: "wc9tft" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h2", key: "rwmk9e" }],
        ["path", { d: "M12 18h6", key: "aqd8w3" }]
      ]);
      var ConciergeBell = createLucideIcon("ConciergeBell", [
        ["path", { d: "M2 18a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2H2v-2Z", key: "1co3i8" }],
        ["path", { d: "M20 16a8 8 0 1 0-16 0", key: "1pa543" }],
        ["path", { d: "M12 4v4", key: "1bq03y" }],
        ["path", { d: "M10 4h4", key: "1xpv9s" }]
      ]);
      var Cone = createLucideIcon("Cone", [
        ["path", { d: "m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98", key: "53pte7" }],
        ["ellipse", { cx: "12", cy: "19", rx: "9", ry: "3", key: "1ji25f" }]
      ]);
      var Construction = createLucideIcon("Construction", [
        ["rect", { x: "2", y: "6", width: "20", height: "8", rx: "1", key: "1estib" }],
        ["path", { d: "M17 14v7", key: "7m2elx" }],
        ["path", { d: "M7 14v7", key: "1cm7wv" }],
        ["path", { d: "M17 3v3", key: "1v4jwn" }],
        ["path", { d: "M7 3v3", key: "7o6guu" }],
        ["path", { d: "M10 14 2.3 6.3", key: "1023jk" }],
        ["path", { d: "m14 6 7.7 7.7", key: "1s8pl2" }],
        ["path", { d: "m8 6 8 8", key: "hl96qh" }]
      ]);
      var Contact2 = createLucideIcon("Contact2", [
        ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }],
        ["circle", { cx: "12", cy: "11", r: "3", key: "itu57m" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["line", { x1: "8", x2: "8", y1: "2", y2: "4", key: "1ff9gb" }],
        ["line", { x1: "16", x2: "16", y1: "2", y2: "4", key: "1ufoma" }]
      ]);
      var Contact = createLucideIcon("Contact", [
        ["path", { d: "M17 18a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2", key: "1mghuy" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["circle", { cx: "12", cy: "10", r: "2", key: "1yojzk" }],
        ["line", { x1: "8", x2: "8", y1: "2", y2: "4", key: "1ff9gb" }],
        ["line", { x1: "16", x2: "16", y1: "2", y2: "4", key: "1ufoma" }]
      ]);
      var Container = createLucideIcon("Container", [
        [
          "path",
          {
            d: "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z",
            key: "1t2lqe"
          }
        ],
        ["path", { d: "M10 21.9V14L2.1 9.1", key: "o7czzq" }],
        ["path", { d: "m10 14 11.9-6.9", key: "zm5e20" }],
        ["path", { d: "M14 19.8v-8.1", key: "159ecu" }],
        ["path", { d: "M18 17.5V9.4", key: "11uown" }]
      ]);
      var Contrast = createLucideIcon("Contrast", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 18a6 6 0 0 0 0-12v12z", key: "j4l70d" }]
      ]);
      var Cookie = createLucideIcon("Cookie", [
        ["path", { d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5", key: "laymnq" }],
        ["path", { d: "M8.5 8.5v.01", key: "ue8clq" }],
        ["path", { d: "M16 15.5v.01", key: "14dtrp" }],
        ["path", { d: "M12 12v.01", key: "u5ubse" }],
        ["path", { d: "M11 17v.01", key: "1hyl5a" }],
        ["path", { d: "M7 14v.01", key: "uct60s" }]
      ]);
      var CookingPot = createLucideIcon("CookingPot", [
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8", key: "u0tga0" }],
        ["path", { d: "m4 8 16-4", key: "16g0ng" }],
        [
          "path",
          {
            d: "m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8",
            key: "12cejc"
          }
        ]
      ]);
      var CopyCheck = createLucideIcon("CopyCheck", [
        ["path", { d: "m12 15 2 2 4-4", key: "2c609p" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var CopyMinus = createLucideIcon("CopyMinus", [
        ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var CopyPlus = createLucideIcon("CopyPlus", [
        ["line", { x1: "15", x2: "15", y1: "12", y2: "18", key: "1p7wdc" }],
        ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var CopySlash = createLucideIcon("CopySlash", [
        ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var CopyX = createLucideIcon("CopyX", [
        ["line", { x1: "12", x2: "18", y1: "12", y2: "18", key: "1rg63v" }],
        ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var Copy = createLucideIcon("Copy", [
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ]);
      var Copyleft = createLucideIcon("Copyleft", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9.17 14.83a4 4 0 1 0 0-5.66", key: "1sveal" }]
      ]);
      var Copyright = createLucideIcon("Copyright", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M14.83 14.83a4 4 0 1 1 0-5.66", key: "1i56pz" }]
      ]);
      var CornerDownLeft = createLucideIcon("CornerDownLeft", [
        ["polyline", { points: "9 10 4 15 9 20", key: "r3jprv" }],
        ["path", { d: "M20 4v7a4 4 0 0 1-4 4H4", key: "6o5b7l" }]
      ]);
      var CornerDownRight = createLucideIcon("CornerDownRight", [
        ["polyline", { points: "15 10 20 15 15 20", key: "1q7qjw" }],
        ["path", { d: "M4 4v7a4 4 0 0 0 4 4h12", key: "z08zvw" }]
      ]);
      var CornerLeftDown = createLucideIcon("CornerLeftDown", [
        ["polyline", { points: "14 15 9 20 4 15", key: "nkc4i" }],
        ["path", { d: "M20 4h-7a4 4 0 0 0-4 4v12", key: "nbpdq2" }]
      ]);
      var CornerLeftUp = createLucideIcon("CornerLeftUp", [
        ["polyline", { points: "14 9 9 4 4 9", key: "m9oyvo" }],
        ["path", { d: "M20 20h-7a4 4 0 0 1-4-4V4", key: "1blwi3" }]
      ]);
      var CornerRightDown = createLucideIcon("CornerRightDown", [
        ["polyline", { points: "10 15 15 20 20 15", key: "axus6l" }],
        ["path", { d: "M4 4h7a4 4 0 0 1 4 4v12", key: "wcbgct" }]
      ]);
      var CornerRightUp = createLucideIcon("CornerRightUp", [
        ["polyline", { points: "10 9 15 4 20 9", key: "1lr6px" }],
        ["path", { d: "M4 20h7a4 4 0 0 0 4-4V4", key: "1plgdj" }]
      ]);
      var CornerUpLeft = createLucideIcon("CornerUpLeft", [
        ["polyline", { points: "9 14 4 9 9 4", key: "881910" }],
        ["path", { d: "M20 20v-7a4 4 0 0 0-4-4H4", key: "1nkjon" }]
      ]);
      var CornerUpRight = createLucideIcon("CornerUpRight", [
        ["polyline", { points: "15 14 20 9 15 4", key: "1tbx3s" }],
        ["path", { d: "M4 20v-7a4 4 0 0 1 4-4h12", key: "1lu4f8" }]
      ]);
      var Cpu = createLucideIcon("Cpu", [
        ["rect", { x: "4", y: "4", width: "16", height: "16", rx: "2", key: "1vbyd7" }],
        ["rect", { x: "9", y: "9", width: "6", height: "6", key: "o3kz5p" }],
        ["path", { d: "M15 2v2", key: "13l42r" }],
        ["path", { d: "M15 20v2", key: "15mkzm" }],
        ["path", { d: "M2 15h2", key: "1gxd5l" }],
        ["path", { d: "M2 9h2", key: "1bbxkp" }],
        ["path", { d: "M20 15h2", key: "19e6y8" }],
        ["path", { d: "M20 9h2", key: "19tzq7" }],
        ["path", { d: "M9 2v2", key: "165o2o" }],
        ["path", { d: "M9 20v2", key: "i2bqo8" }]
      ]);
      var CreativeCommons = createLucideIcon("CreativeCommons", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        [
          "path",
          { d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1ss3eq" }
        ],
        [
          "path",
          { d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1od56t" }
        ]
      ]);
      var CreditCard = createLucideIcon("CreditCard", [
        ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "2", key: "ynyp8z" }],
        ["line", { x1: "2", x2: "22", y1: "10", y2: "10", key: "1b3vmo" }]
      ]);
      var Croissant = createLucideIcon("Croissant", [
        [
          "path",
          {
            d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z",
            key: "1ozxlb"
          }
        ],
        [
          "path",
          {
            d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83",
            key: "ffuyb5"
          }
        ],
        ["path", { d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4", key: "osnpzi" }],
        [
          "path",
          {
            d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2",
            key: "1vubaw"
          }
        ],
        ["path", { d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5", key: "wxr772" }]
      ]);
      var Crop = createLucideIcon("Crop", [
        ["path", { d: "M6 2v14a2 2 0 0 0 2 2h14", key: "ron5a4" }],
        ["path", { d: "M18 22V8a2 2 0 0 0-2-2H2", key: "7s9ehn" }]
      ]);
      var Cross = createLucideIcon("Cross", [
        [
          "path",
          {
            d: "M11 2a2 2 0 0 0-2 2v5H4a2 2 0 0 0-2 2v2c0 1.1.9 2 2 2h5v5c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-5h5a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-5V4a2 2 0 0 0-2-2h-2z",
            key: "1t5g7j"
          }
        ]
      ]);
      var Crosshair = createLucideIcon("Crosshair", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "22", x2: "18", y1: "12", y2: "12", key: "l9bcsi" }],
        ["line", { x1: "6", x2: "2", y1: "12", y2: "12", key: "13hhkx" }],
        ["line", { x1: "12", x2: "12", y1: "6", y2: "2", key: "10w3f3" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "18", key: "15g9kq" }]
      ]);
      var Crown = createLucideIcon("Crown", [
        ["path", { d: "m2 4 3 12h14l3-12-6 7-4-7-4 7-6-7zm3 16h14", key: "zkxr6b" }]
      ]);
      var Cuboid = createLucideIcon("Cuboid", [
        [
          "path",
          {
            d: "m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z",
            key: "1u2ovd"
          }
        ],
        ["path", { d: "M10 22v-8L2.25 9.15", key: "11pn4q" }],
        ["path", { d: "m10 14 11.77-6.87", key: "1kt1wh" }]
      ]);
      var CupSoda = createLucideIcon("CupSoda", [
        ["path", { d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8", key: "8166m8" }],
        ["path", { d: "M5 8h14", key: "pcz4l3" }],
        ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "yjz344" }],
        ["path", { d: "m12 8 1-6h2", key: "3ybfa4" }]
      ]);
      var Currency = createLucideIcon("Currency", [
        ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
        ["line", { x1: "3", x2: "6", y1: "3", y2: "6", key: "1jkytn" }],
        ["line", { x1: "21", x2: "18", y1: "3", y2: "6", key: "14zfjt" }],
        ["line", { x1: "3", x2: "6", y1: "21", y2: "18", key: "iusuec" }],
        ["line", { x1: "21", x2: "18", y1: "21", y2: "18", key: "yj2dd7" }]
      ]);
      var Cylinder = createLucideIcon("Cylinder", [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5v14a9 3 0 0 0 18 0V5", key: "aqi0yr" }]
      ]);
      var DatabaseBackup = createLucideIcon("DatabaseBackup", [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 12a9 3 0 0 0 5 2.69", key: "1ui2ym" }],
        ["path", { d: "M21 9.3V5", key: "6k6cib" }],
        ["path", { d: "M3 5v14a9 3 0 0 0 6.47 2.88", key: "i62tjy" }],
        ["path", { d: "M12 12v4h4", key: "1bxaet" }],
        [
          "path",
          {
            d: "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16",
            key: "1f4ei9"
          }
        ]
      ]);
      var DatabaseZap = createLucideIcon("DatabaseZap", [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5V19A9 3 0 0 0 15 21.84", key: "14ibmq" }],
        ["path", { d: "M21 5V8", key: "1marbg" }],
        ["path", { d: "M21 12L18 17H22L19 22", key: "zafso" }],
        ["path", { d: "M3 12A9 3 0 0 0 14.59 14.87", key: "1y4wr8" }]
      ]);
      var Database = createLucideIcon("Database", [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5V19A9 3 0 0 0 21 19V5", key: "1wlel7" }],
        ["path", { d: "M3 12A9 3 0 0 0 21 12", key: "mv7ke4" }]
      ]);
      var Delete = createLucideIcon("Delete", [
        ["path", { d: "M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z", key: "1oy587" }],
        ["line", { x1: "18", x2: "12", y1: "9", y2: "15", key: "1olkx5" }],
        ["line", { x1: "12", x2: "18", y1: "9", y2: "15", key: "1n50pc" }]
      ]);
      var Dessert = createLucideIcon("Dessert", [
        ["circle", { cx: "12", cy: "4", r: "2", key: "muu5ef" }],
        [
          "path",
          {
            d: "M10.2 3.2C5.5 4 2 8.1 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4 0c0-4.9-3.5-9-8.2-9.8",
            key: "lfo06j"
          }
        ],
        ["path", { d: "M3.2 14.8a9 9 0 0 0 17.6 0", key: "12xarc" }]
      ]);
      var Diameter = createLucideIcon("Diameter", [
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }],
        ["path", { d: "M6.48 3.66a10 10 0 0 1 13.86 13.86", key: "xr8kdq" }],
        ["path", { d: "m6.41 6.41 11.18 11.18", key: "uhpjw7" }],
        ["path", { d: "M3.66 6.48a10 10 0 0 0 13.86 13.86", key: "cldpwv" }]
      ]);
      var Diamond = createLucideIcon("Diamond", [
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z",
            key: "1f1r0c"
          }
        ]
      ]);
      var Dice1 = createLucideIcon("Dice1", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ]);
      var Dice2 = createLucideIcon("Dice2", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M15 9h.01", key: "x1ddxp" }],
        ["path", { d: "M9 15h.01", key: "fzyn71" }]
      ]);
      var Dice3 = createLucideIcon("Dice3", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ]);
      var Dice4 = createLucideIcon("Dice4", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }]
      ]);
      var Dice5 = createLucideIcon("Dice5", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ]);
      var Dice6 = createLucideIcon("Dice6", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ]);
      var Dices = createLucideIcon("Dices", [
        ["rect", { width: "12", height: "12", x: "2", y: "10", rx: "2", ry: "2", key: "6agr2n" }],
        [
          "path",
          { d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6", key: "1o487t" }
        ],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 14h.01", key: "ssrbsk" }],
        ["path", { d: "M15 6h.01", key: "cblpky" }],
        ["path", { d: "M18 9h.01", key: "2061c0" }]
      ]);
      var Diff = createLucideIcon("Diff", [
        ["path", { d: "M12 3v14", key: "7cf3v8" }],
        ["path", { d: "M5 10h14", key: "elsbfy" }],
        ["path", { d: "M5 21h14", key: "11awu3" }]
      ]);
      var Disc2 = createLucideIcon("Disc2", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ]);
      var Disc3 = createLucideIcon("Disc3", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M6 12c0-1.7.7-3.2 1.8-4.2", key: "oqkarx" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M18 12c0 1.7-.7 3.2-1.8 4.2", key: "1eah9h" }]
      ]);
      var DiscAlbum = createLucideIcon("DiscAlbum", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "12", r: "5", key: "nd82uf" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ]);
      var Disc = createLucideIcon("Disc", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ]);
      var DivideCircle = createLucideIcon("DivideCircle", [
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var DivideSquare = createLucideIcon("DivideSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }]
      ]);
      var Divide = createLucideIcon("Divide", [
        ["circle", { cx: "12", cy: "6", r: "1", key: "1bh7o1" }],
        ["line", { x1: "5", x2: "19", y1: "12", y2: "12", key: "13b5wn" }],
        ["circle", { cx: "12", cy: "18", r: "1", key: "lqb9t5" }]
      ]);
      var DnaOff = createLucideIcon("DnaOff", [
        ["path", { d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5M9 22c1.35-1.5 2.092-3 2.5-4.5", key: "sxiaad" }],
        ["path", { d: "M2 15c3.333-3 6.667-3 10-3m10-3c-1.5 1.35-3 2.092-4.5 2.5", key: "yn4bs1" }],
        ["path", { d: "m17 6-2.5-2.5", key: "5cdfhj" }],
        ["path", { d: "m14 8-1.5-1.5", key: "1ohn8i" }],
        ["path", { d: "m7 18 2.5 2.5", key: "16tu1a" }],
        ["path", { d: "m3.5 14.5.5.5", key: "hapbhd" }],
        ["path", { d: "m20 9 .5.5", key: "1n7z02" }],
        ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
        ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
        ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Dna = createLucideIcon("Dna", [
        ["path", { d: "M2 15c6.667-6 13.333 0 20-6", key: "1pyr53" }],
        ["path", { d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993", key: "q3hbxp" }],
        ["path", { d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993", key: "80uv8i" }],
        ["path", { d: "m17 6-2.5-2.5", key: "5cdfhj" }],
        ["path", { d: "m14 8-1-1", key: "15nbz5" }],
        ["path", { d: "m7 18 2.5 2.5", key: "16tu1a" }],
        ["path", { d: "m3.5 14.5.5.5", key: "hapbhd" }],
        ["path", { d: "m20 9 .5.5", key: "1n7z02" }],
        ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
        ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
        ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }]
      ]);
      var Dog = createLucideIcon("Dog", [
        [
          "path",
          {
            d: "M10 5.172C10 3.782 8.423 2.679 6.5 3c-2.823.47-4.113 6.006-4 7 .08.703 1.725 1.722 3.656 1 1.261-.472 1.96-1.45 2.344-2.5",
            key: "19br0u"
          }
        ],
        [
          "path",
          {
            d: "M14.267 5.172c0-1.39 1.577-2.493 3.5-2.172 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5",
            key: "11n1an"
          }
        ],
        ["path", { d: "M8 14v.5", key: "1nzgdb" }],
        ["path", { d: "M16 14v.5", key: "1lajdz" }],
        ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }],
        [
          "path",
          {
            d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444c0-1.061-.162-2.2-.493-3.309m-9.243-6.082A8.801 8.801 0 0 1 12 5c.78 0 1.5.108 2.161.306",
            key: "wsu29d"
          }
        ]
      ]);
      var DollarSign = createLucideIcon("DollarSign", [
        ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
        ["path", { d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6", key: "1b0p4s" }]
      ]);
      var Donut = createLucideIcon("Donut", [
        [
          "path",
          {
            d: "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3",
            key: "19sr3x"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ]);
      var DoorClosed = createLucideIcon("DoorClosed", [
        ["path", { d: "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14", key: "36qu9e" }],
        ["path", { d: "M2 20h20", key: "owomy5" }],
        ["path", { d: "M14 12v.01", key: "xfcn54" }]
      ]);
      var DoorOpen = createLucideIcon("DoorOpen", [
        ["path", { d: "M13 4h3a2 2 0 0 1 2 2v14", key: "hrm0s9" }],
        ["path", { d: "M2 20h3", key: "1gaodv" }],
        ["path", { d: "M13 20h9", key: "s90cdi" }],
        ["path", { d: "M10 12v.01", key: "vx6srw" }],
        [
          "path",
          {
            d: "M13 4.562v16.157a1 1 0 0 1-1.242.97L5 20V5.562a2 2 0 0 1 1.515-1.94l4-1A2 2 0 0 1 13 4.561Z",
            key: "199qr4"
          }
        ]
      ]);
      var DotSquare = createLucideIcon("DotSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ]);
      var Dot = createLucideIcon("Dot", [
        ["circle", { cx: "12.1", cy: "12.1", r: "1", key: "18d7e5" }]
      ]);
      var DownloadCloud = createLucideIcon("DownloadCloud", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M12 12v9", key: "192myk" }],
        ["path", { d: "m8 17 4 4 4-4", key: "1ul180" }]
      ]);
      var Download = createLucideIcon("Download", [
        ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
        ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
        ["line", { x1: "12", x2: "12", y1: "15", y2: "3", key: "1vk2je" }]
      ]);
      var DraftingCompass = createLucideIcon("DraftingCompass", [
        ["circle", { cx: "12", cy: "5", r: "2", key: "f1ur92" }],
        ["path", { d: "m3 21 8.02-14.26", key: "1ssaw4" }],
        ["path", { d: "m12.99 6.74 1.93 3.44", key: "iwagvd" }],
        ["path", { d: "M19 12c-3.87 4-10.13 4-14 0", key: "1tsu18" }],
        ["path", { d: "m21 21-2.16-3.84", key: "vylbct" }]
      ]);
      var Drama = createLucideIcon("Drama", [
        ["path", { d: "M10 11h.01", key: "d2at3l" }],
        ["path", { d: "M14 6h.01", key: "k028ub" }],
        ["path", { d: "M18 6h.01", key: "1v4wsw" }],
        ["path", { d: "M6.5 13.1h.01", key: "1748ia" }],
        ["path", { d: "M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3", key: "172yzv" }],
        ["path", { d: "M17.4 9.9c-.8.8-2 .8-2.8 0", key: "1obv0w" }],
        [
          "path",
          {
            d: "M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7",
            key: "rqjl8i"
          }
        ],
        ["path", { d: "M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4", key: "1mr6wy" }]
      ]);
      var Dribbble = createLucideIcon("Dribbble", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94", key: "hpej1" }],
        ["path", { d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32", key: "1tr44o" }],
        ["path", { d: "M8.56 2.75c4.37 6 6 9.42 8 17.72", key: "kbh691" }]
      ]);
      var Drill = createLucideIcon("Drill", [
        [
          "path",
          { d: "M14 9c0 .6-.4 1-1 1H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9c.6 0 1 .4 1 1Z", key: "b6nnkj" }
        ],
        ["path", { d: "M18 6h4", key: "66u95g" }],
        ["path", { d: "M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3", key: "105ega" }],
        ["path", { d: "m5 10-2 8", key: "xt2lic" }],
        ["path", { d: "M12 10v3c0 .6-.4 1-1 1H8", key: "mwpjnk" }],
        ["path", { d: "m7 18 2-8", key: "1bzku2" }],
        [
          "path",
          { d: "M5 22c-1.7 0-3-1.3-3-3 0-.6.4-1 1-1h7c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1Z", key: "117add" }
        ]
      ]);
      var Droplet = createLucideIcon("Droplet", [
        [
          "path",
          {
            d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
            key: "c7niix"
          }
        ]
      ]);
      var Droplets = createLucideIcon("Droplets", [
        [
          "path",
          {
            d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z",
            key: "1ptgy4"
          }
        ],
        [
          "path",
          {
            d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97",
            key: "1sl1rz"
          }
        ]
      ]);
      var Drum = createLucideIcon("Drum", [
        ["path", { d: "m2 2 8 8", key: "1v6059" }],
        ["path", { d: "m22 2-8 8", key: "173r8a" }],
        ["ellipse", { cx: "12", cy: "9", rx: "10", ry: "5", key: "liohsx" }],
        ["path", { d: "M7 13.4v7.9", key: "1yi6u9" }],
        ["path", { d: "M12 14v8", key: "1tn2tj" }],
        ["path", { d: "M17 13.4v7.9", key: "eqz2v3" }],
        ["path", { d: "M2 9v8a10 5 0 0 0 20 0V9", key: "1750ul" }]
      ]);
      var Drumstick = createLucideIcon("Drumstick", [
        [
          "path",
          {
            d: "M15.45 15.4c-2.13.65-4.3.32-5.7-1.1-2.29-2.27-1.76-6.5 1.17-9.42 2.93-2.93 7.15-3.46 9.43-1.18 1.41 1.41 1.74 3.57 1.1 5.71-1.4-.51-3.26-.02-4.64 1.36-1.38 1.38-1.87 3.23-1.36 4.63z",
            key: "1o96s0"
          }
        ],
        [
          "path",
          {
            d: "m11.25 15.6-2.16 2.16a2.5 2.5 0 1 1-4.56 1.73 2.49 2.49 0 0 1-1.41-4.24 2.5 2.5 0 0 1 3.14-.32l2.16-2.16",
            key: "14vv5h"
          }
        ]
      ]);
      var Dumbbell = createLucideIcon("Dumbbell", [
        ["path", { d: "m6.5 6.5 11 11", key: "f7oqzb" }],
        ["path", { d: "m21 21-1-1", key: "cpc6if" }],
        ["path", { d: "m3 3 1 1", key: "d3rpuf" }],
        ["path", { d: "m18 22 4-4", key: "1e32o6" }],
        ["path", { d: "m2 6 4-4", key: "189tqz" }],
        ["path", { d: "m3 10 7-7", key: "1bxui2" }],
        ["path", { d: "m14 21 7-7", key: "16x78n" }]
      ]);
      var EarOff = createLucideIcon("EarOff", [
        ["path", { d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46", key: "1qngmn" }],
        ["path", { d: "M6 8.5c0-.75.13-1.47.36-2.14", key: "b06bma" }],
        ["path", { d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76", key: "g10hsz" }],
        ["path", { d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18", key: "ygzou7" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Ear = createLucideIcon("Ear", [
        ["path", { d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0", key: "1dfaln" }],
        ["path", { d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4", key: "1qnva7" }]
      ]);
      var Eclipse = createLucideIcon("Eclipse", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 2a7 7 0 1 0 10 10", key: "1yuj32" }]
      ]);
      var EggFried = createLucideIcon("EggFried", [
        ["circle", { cx: "11.5", cy: "12.5", r: "3.5", key: "1cl1mi" }],
        [
          "path",
          {
            d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z",
            key: "165ef9"
          }
        ]
      ]);
      var EggOff = createLucideIcon("EggOff", [
        [
          "path",
          {
            d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625",
            key: "6et380"
          }
        ],
        [
          "path",
          {
            d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297",
            key: "gcdc3f"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Egg = createLucideIcon("Egg", [
        [
          "path",
          {
            d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z",
            key: "1c39pg"
          }
        ]
      ]);
      var EqualNot = createLucideIcon("EqualNot", [
        ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
        ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }],
        ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }]
      ]);
      var EqualSquare = createLucideIcon("EqualSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M7 14h10", key: "1mhdw3" }]
      ]);
      var Equal = createLucideIcon("Equal", [
        ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
        ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }]
      ]);
      var Eraser = createLucideIcon("Eraser", [
        [
          "path",
          {
            d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21",
            key: "182aya"
          }
        ],
        ["path", { d: "M22 21H7", key: "t4ddhn" }],
        ["path", { d: "m5 11 9 9", key: "1mo9qw" }]
      ]);
      var Euro = createLucideIcon("Euro", [
        ["path", { d: "M4 10h12", key: "1y6xl8" }],
        ["path", { d: "M4 14h9", key: "1loblj" }],
        [
          "path",
          {
            d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2",
            key: "1j6lzo"
          }
        ]
      ]);
      var Expand = createLucideIcon("Expand", [
        ["path", { d: "m21 21-6-6m6 6v-4.8m0 4.8h-4.8", key: "1c15vz" }],
        ["path", { d: "M3 16.2V21m0 0h4.8M3 21l6-6", key: "1fsnz2" }],
        ["path", { d: "M21 7.8V3m0 0h-4.8M21 3l-6 6", key: "hawz9i" }],
        ["path", { d: "M3 7.8V3m0 0h4.8M3 3l6 6", key: "u9ee12" }]
      ]);
      var ExternalLink = createLucideIcon("ExternalLink", [
        ["path", { d: "M15 3h6v6", key: "1q9fwt" }],
        ["path", { d: "M10 14 21 3", key: "gplh6r" }],
        ["path", { d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6", key: "a6xqqp" }]
      ]);
      var EyeOff = createLucideIcon("EyeOff", [
        ["path", { d: "M9.88 9.88a3 3 0 1 0 4.24 4.24", key: "1jxqfv" }],
        [
          "path",
          {
            d: "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68",
            key: "9wicm4"
          }
        ],
        [
          "path",
          { d: "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61", key: "1jreej" }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Eye = createLucideIcon("Eye", [
        ["path", { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z", key: "rwhkz3" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ]);
      var Facebook = createLucideIcon("Facebook", [
        [
          "path",
          { d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z", key: "1jg4f8" }
        ]
      ]);
      var Factory = createLucideIcon("Factory", [
        [
          "path",
          {
            d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "159hny"
          }
        ],
        ["path", { d: "M17 18h1", key: "uldtlt" }],
        ["path", { d: "M12 18h1", key: "s9uhes" }],
        ["path", { d: "M7 18h1", key: "1neino" }]
      ]);
      var Fan = createLucideIcon("Fan", [
        [
          "path",
          {
            d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z",
            key: "484a7f"
          }
        ],
        ["path", { d: "M12 12v.01", key: "u5ubse" }]
      ]);
      var FastForward = createLucideIcon("FastForward", [
        ["polygon", { points: "13 19 22 12 13 5 13 19", key: "587y9g" }],
        ["polygon", { points: "2 19 11 12 2 5 2 19", key: "3pweh0" }]
      ]);
      var Feather = createLucideIcon("Feather", [
        ["path", { d: "M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z", key: "u4sw5n" }],
        ["line", { x1: "16", x2: "2", y1: "8", y2: "22", key: "1c47m2" }],
        ["line", { x1: "17.5", x2: "9", y1: "15", y2: "15", key: "2fj3pr" }]
      ]);
      var Fence = createLucideIcon("Fence", [
        ["path", { d: "M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "1n2rgs" }],
        ["path", { d: "M6 8h4", key: "utf9t1" }],
        ["path", { d: "M6 18h4", key: "12yh4b" }],
        ["path", { d: "m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "3ha7mj" }],
        ["path", { d: "M14 8h4", key: "1r8wg2" }],
        ["path", { d: "M14 18h4", key: "1t3kbu" }],
        ["path", { d: "m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "dfd4e2" }]
      ]);
      var FerrisWheel = createLucideIcon("FerrisWheel", [
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "m6.8 15-3.5 2", key: "hjy98k" }],
        ["path", { d: "m20.7 7-3.5 2", key: "f08gto" }],
        ["path", { d: "M6.8 9 3.3 7", key: "1aevh4" }],
        ["path", { d: "m20.7 17-3.5-2", key: "1liqo3" }],
        ["path", { d: "m9 22 3-8 3 8", key: "wees03" }],
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M18 18.7a9 9 0 1 0-12 0", key: "dhzg4g" }]
      ]);
      var Figma = createLucideIcon("Figma", [
        ["path", { d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z", key: "1340ok" }],
        ["path", { d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z", key: "1hz3m3" }],
        ["path", { d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z", key: "1oz8n2" }],
        ["path", { d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z", key: "1ff65i" }],
        ["path", { d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z", key: "pdip6e" }]
      ]);
      var FileArchive = createLucideIcon("FileArchive", [
        ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v18", key: "1oywqq" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "10", cy: "20", r: "2", key: "1xzdoj" }],
        ["path", { d: "M10 7V6", key: "dljcrl" }],
        ["path", { d: "M10 12v-1", key: "v7bkov" }],
        ["path", { d: "M10 18v-2", key: "1cjy8d" }]
      ]);
      var FileAudio2 = createLucideIcon("FileAudio2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "3", cy: "17", r: "1", key: "vo6nti" }],
        ["path", { d: "M2 17v-3a4 4 0 0 1 8 0v3", key: "1ggdre" }],
        ["circle", { cx: "9", cy: "17", r: "1", key: "bc1fq4" }]
      ]);
      var FileAudio = createLucideIcon("FileAudio", [
        ["path", { d: "M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "rslqgf" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0",
            key: "9f7x3i"
          }
        ]
      ]);
      var FileAxis3d = createLucideIcon("FileAxis3d", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 18 4-4", key: "12zab0" }],
        ["path", { d: "M8 10v8h8", key: "tlaukw" }]
      ]);
      var FileBadge2 = createLucideIcon("FileBadge2", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m14 12.5 1 5.5-3-1-3 1 1-5.5", key: "14xlky" }]
      ]);
      var FileBadge = createLucideIcon("FileBadge", [
        ["path", { d: "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "12ixgl" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "u0c8gj" }],
        ["path", { d: "M7 16.5 8 22l-3-1-3 1 1-5.5", key: "5gm2nr" }]
      ]);
      var FileBarChart2 = createLucideIcon("FileBarChart2", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 18v-1", key: "zg0ygc" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }],
        ["path", { d: "M16 18v-3", key: "j5jt4h" }]
      ]);
      var FileBarChart = createLucideIcon("FileBarChart", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 18v-2", key: "qcmpov" }],
        ["path", { d: "M12 18v-4", key: "q1q25u" }],
        ["path", { d: "M16 18v-6", key: "15y0np" }]
      ]);
      var FileBox = createLucideIcon("FileBox", [
        ["path", { d: "M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "16lz6z" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z",
            key: "99pj1s"
          }
        ],
        ["path", { d: "M7 17v5", key: "1yj1jh" }],
        ["path", { d: "M11.7 14.2 7 17l-4.7-2.8", key: "1yk8tc" }]
      ]);
      var FileCheck2 = createLucideIcon("FileCheck2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m3 15 2 2 4-4", key: "1lhrkk" }]
      ]);
      var FileCheck = createLucideIcon("FileCheck", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m9 15 2 2 4-4", key: "1grp1n" }]
      ]);
      var FileClock = createLucideIcon("FileClock", [
        ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "37hlfg" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "8", cy: "16", r: "6", key: "10v15b" }],
        ["path", { d: "M9.5 17.5 8 16.25V14", key: "1o80t2" }]
      ]);
      var FileCode2 = createLucideIcon("FileCode2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }],
        ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
      ]);
      var FileCode = createLucideIcon("FileCode", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m10 13-2 2 2 2", key: "17smn8" }],
        ["path", { d: "m14 17 2-2-2-2", key: "14mezr" }]
      ]);
      var FileCog = createLucideIcon("FileCog", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "6", cy: "14", r: "3", key: "a1xfv6" }],
        ["path", { d: "M6 10v1", key: "xs0f9j" }],
        ["path", { d: "M6 17v1", key: "idyhc0" }],
        ["path", { d: "M10 14H9", key: "m5fm2q" }],
        ["path", { d: "M3 14H2", key: "19ot09" }],
        ["path", { d: "m9 11-.88.88", key: "lhul2b" }],
        ["path", { d: "M3.88 16.12 3 17", key: "169z9n" }],
        ["path", { d: "m9 17-.88-.88", key: "5io96w" }],
        ["path", { d: "M3.88 11.88 3 11", key: "1ynhy1" }]
      ]);
      var FileDiff = createLucideIcon("FileDiff", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }]
      ]);
      var FileDigit = createLucideIcon("FileDigit", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "4", height: "6", x: "2", y: "12", rx: "2", key: "jm304g" }],
        ["path", { d: "M10 12h2v6", key: "12zw74" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ]);
      var FileDown = createLucideIcon("FileDown", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }],
        ["path", { d: "m9 15 3 3 3-3", key: "1npd3o" }]
      ]);
      var FileHeart = createLucideIcon("FileHeart", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1c1fso"
          }
        ]
      ]);
      var FileImage = createLucideIcon("FileImage", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "10", cy: "13", r: "2", key: "6v46hv" }],
        ["path", { d: "m20 17-1.1-1.1a2 2 0 0 0-2.81.01L10 22", key: "14ir3o" }]
      ]);
      var FileInput = createLucideIcon("FileInput", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M2 15h10", key: "jfw4w8" }],
        ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
      ]);
      var FileJson2 = createLucideIcon("FileJson2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "fq0c9t" }
        ],
        [
          "path",
          { d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "4gibmv" }
        ]
      ]);
      var FileJson = createLucideIcon("FileJson", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "1oajmo" }
        ],
        [
          "path",
          { d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "mpwhp6" }
        ]
      ]);
      var FileKey2 = createLucideIcon("FileKey2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6", key: "rc0qvx" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
        ["path", { d: "m10 10-4.5 4.5", key: "7fwrp6" }],
        ["path", { d: "m9 11 1 1", key: "wa6s5q" }]
      ]);
      var FileKey = createLucideIcon("FileKey", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["circle", { cx: "10", cy: "16", r: "2", key: "4ckbqe" }],
        ["path", { d: "m16 10-4.5 4.5", key: "7p3ebg" }],
        ["path", { d: "m15 11 1 1", key: "1bsyx3" }]
      ]);
      var FileLineChart = createLucideIcon("FileLineChart", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m16 13-3.5 3.5-2-2L8 17", key: "zz7yod" }]
      ]);
      var FileLock2 = createLucideIcon("FileLock2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1", key: "jmtmu2" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "8", height: "5", x: "2", y: "13", rx: "1", key: "10y5wo" }],
        ["path", { d: "M8 13v-2a2 2 0 1 0-4 0v2", key: "1pdxzg" }]
      ]);
      var FileLock = createLucideIcon("FileLock", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["rect", { width: "8", height: "6", x: "8", y: "12", rx: "1", key: "3yr8at" }],
        ["path", { d: "M10 12v-2a2 2 0 1 1 4 0v2", key: "j4i8d" }]
      ]);
      var FileMinus2 = createLucideIcon("FileMinus2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M3 15h6", key: "4e2qda" }]
      ]);
      var FileMinus = createLucideIcon("FileMinus", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }]
      ]);
      var FileMusic = createLucideIcon("FileMusic", [
        ["circle", { cx: "14", cy: "16", r: "2", key: "1bzzi3" }],
        ["circle", { cx: "6", cy: "18", r: "2", key: "1fncim" }],
        ["path", { d: "M4 12.4V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-7.5", key: "skc018" }],
        ["path", { d: "M8 18v-7.7L16 9v7", key: "1oie6o" }]
      ]);
      var FileOutput = createLucideIcon("FileOutput", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M2 15h10", key: "jfw4w8" }],
        ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }]
      ]);
      var FilePenLine = createLucideIcon("FilePenLine", [
        ["path", { d: "m18 5-3-3H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2", key: "h0fsxq" }],
        ["path", { d: "M8 18h1", key: "13wk12" }],
        ["path", { d: "M18.4 9.6a2 2 0 1 1 3 3L17 17l-4 1 1-4Z", key: "dyo8mm" }]
      ]);
      var FilePen = createLucideIcon("FilePen", [
        ["path", { d: "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10", key: "x7tsz2" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z", key: "o3xyfb" }]
      ]);
      var FilePieChart = createLucideIcon("FilePieChart", [
        ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "37hlfg" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M4 11.5a6.02 6.02 0 1 0 8.5 8.5", key: "unkkko" }],
        ["path", { d: "M14 16c0-3.3-2.7-6-6-6v6Z", key: "bym002" }]
      ]);
      var FilePlus2 = createLucideIcon("FilePlus2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M3 15h6", key: "4e2qda" }],
        ["path", { d: "M6 12v6", key: "1u72j0" }]
      ]);
      var FilePlus = createLucideIcon("FilePlus", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }]
      ]);
      var FileQuestion = createLucideIcon("FileQuestion", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        [
          "path",
          {
            d: "M10 10.3c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
            key: "1umxtm"
          }
        ],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var FileScan = createLucideIcon("FileScan", [
        ["path", { d: "M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4", key: "1rdf37" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M16 14a2 2 0 0 0-2 2", key: "ceaadl" }],
        ["path", { d: "M20 14a2 2 0 0 1 2 2", key: "1ny6zw" }],
        ["path", { d: "M20 22a2 2 0 0 0 2-2", key: "1l9q4k" }],
        ["path", { d: "M16 22a2 2 0 0 1-2-2", key: "1wqh5n" }]
      ]);
      var FileSearch2 = createLucideIcon("FileSearch2", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "11.5", cy: "14.5", r: "2.5", key: "1bq0ko" }],
        ["path", { d: "M13.3 16.3 15 18", key: "2quom7" }]
      ]);
      var FileSearch = createLucideIcon("FileSearch", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "1vg67v" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "5", cy: "14", r: "3", key: "ufru5t" }],
        ["path", { d: "m9 18-1.5-1.5", key: "1j6qii" }]
      ]);
      var FileSliders = createLucideIcon("FileSliders", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M10 11v2", key: "1s651w" }],
        ["path", { d: "M8 17h8", key: "wh5c61" }],
        ["path", { d: "M14 16v2", key: "12fp5e" }]
      ]);
      var FileSpreadsheet = createLucideIcon("FileSpreadsheet", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 13h2", key: "yr2amv" }],
        ["path", { d: "M14 13h2", key: "un5t4a" }],
        ["path", { d: "M8 17h2", key: "2yhykz" }],
        ["path", { d: "M14 17h2", key: "10kma7" }]
      ]);
      var FileStack = createLucideIcon("FileStack", [
        ["path", { d: "M21 7h-3a2 2 0 0 1-2-2V2", key: "9rb54x" }],
        [
          "path",
          {
            d: "M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17Z",
            key: "1059l0"
          }
        ],
        ["path", { d: "M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15", key: "16874u" }],
        ["path", { d: "M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11", key: "k2ox98" }]
      ]);
      var FileSymlink = createLucideIcon("FileSymlink", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v7", key: "1f7zex" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m10 18 3-3-3-3", key: "18f6ys" }],
        ["path", { d: "M4 18v-1a2 2 0 0 1 2-2h6", key: "5uz2rn" }]
      ]);
      var FileTerminal = createLucideIcon("FileTerminal", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 16 2-2-2-2", key: "10vzyd" }],
        ["path", { d: "M12 18h4", key: "1wd2n7" }]
      ]);
      var FileText = createLucideIcon("FileText", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M10 9H8", key: "b1mrlr" }],
        ["path", { d: "M16 13H8", key: "t4e002" }],
        ["path", { d: "M16 17H8", key: "z1uh3a" }]
      ]);
      var FileType2 = createLucideIcon("FileType2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M2 13v-1h6v1", key: "1dh9dg" }],
        ["path", { d: "M5 12v6", key: "150t9c" }],
        ["path", { d: "M4 18h2", key: "1xrofg" }]
      ]);
      var FileType = createLucideIcon("FileType", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 13v-1h6v1", key: "1bb014" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        ["path", { d: "M11 18h2", key: "12mj7e" }]
      ]);
      var FileUp = createLucideIcon("FileUp", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        ["path", { d: "m15 15-3-3-3 3", key: "15xj92" }]
      ]);
      var FileVideo2 = createLucideIcon("FileVideo2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "8", height: "6", x: "2", y: "12", rx: "1", key: "1a6c1e" }],
        ["path", { d: "m10 15.5 4 2.5v-6l-4 2.5", key: "t7cp39" }]
      ]);
      var FileVideo = createLucideIcon("FileVideo", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m10 11 5 3-5 3v-6Z", key: "7ntvm4" }]
      ]);
      var FileVolume2 = createLucideIcon("FileVolume2", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M11.5 13.5a2.5 2.5 0 0 1 0 3", key: "1fccat" }],
        ["path", { d: "M15 12a5 5 0 0 1 0 6", key: "ps46cm" }]
      ]);
      var FileVolume = createLucideIcon("FileVolume", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "1vg67v" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m7 10-3 2H2v4h2l3 2Z", key: "fiq8l4" }],
        ["path", { d: "M11 11a5 5 0 0 1 0 6", key: "193qb2" }]
      ]);
      var FileWarning = createLucideIcon("FileWarning", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M12 9v4", key: "juzpu7" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var FileX2 = createLucideIcon("FileX2", [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 12.5-5 5", key: "b853mi" }],
        ["path", { d: "m3 12.5 5 5", key: "1qls4r" }]
      ]);
      var FileX = createLucideIcon("FileX", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m14.5 12.5-5 5", key: "b62r18" }],
        ["path", { d: "m9.5 12.5 5 5", key: "1rk7el" }]
      ]);
      var File = createLucideIcon("File", [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }]
      ]);
      var Files = createLucideIcon("Files", [
        ["path", { d: "M20 7h-3a2 2 0 0 1-2-2V2", key: "x099mo" }],
        ["path", { d: "M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2Z", key: "18t6ie" }],
        ["path", { d: "M3 7.6v12.8A1.6 1.6 0 0 0 4.6 22h9.8", key: "1nja0z" }]
      ]);
      var Film = createLucideIcon("Film", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 3v18", key: "bbkbws" }],
        ["path", { d: "M3 7.5h4", key: "zfgn84" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }],
        ["path", { d: "M3 16.5h4", key: "1230mu" }],
        ["path", { d: "M17 3v18", key: "in4fa5" }],
        ["path", { d: "M17 7.5h4", key: "myr1c1" }],
        ["path", { d: "M17 16.5h4", key: "go4c1d" }]
      ]);
      var FilterX = createLucideIcon("FilterX", [
        ["path", { d: "M13.013 3H2l8 9.46V19l4 2v-8.54l.9-1.055", key: "1fi1da" }],
        ["path", { d: "m22 3-5 5", key: "12jva0" }],
        ["path", { d: "m17 3 5 5", key: "k36vhe" }]
      ]);
      var Filter = createLucideIcon("Filter", [
        ["polygon", { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3", key: "1yg77f" }]
      ]);
      var Fingerprint = createLucideIcon("Fingerprint", [
        ["path", { d: "M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4", key: "1jc9o5" }],
        ["path", { d: "M5 19.5C5.5 18 6 15 6 12c0-.7.12-1.37.34-2", key: "1mxgy1" }],
        ["path", { d: "M17.29 21.02c.12-.6.43-2.3.5-3.02", key: "ptglia" }],
        ["path", { d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4", key: "1nerag" }],
        ["path", { d: "M8.65 22c.21-.66.45-1.32.57-2", key: "13wd9y" }],
        ["path", { d: "M14 13.12c0 2.38 0 6.38-1 8.88", key: "o46ks0" }],
        ["path", { d: "M2 16h.01", key: "1gqxmh" }],
        ["path", { d: "M21.8 16c.2-2 .131-5.354 0-6", key: "drycrb" }],
        ["path", { d: "M9 6.8a6 6 0 0 1 9 5.2c0 .47 0 1.17-.02 2", key: "1fgabc" }]
      ]);
      var FireExtinguisher = createLucideIcon("FireExtinguisher", [
        ["path", { d: "M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5", key: "sqyvz" }],
        ["path", { d: "M9 18h8", key: "i7pszb" }],
        ["path", { d: "M18 3h-3", key: "7idoqj" }],
        ["path", { d: "M11 3a6 6 0 0 0-6 6v11", key: "1v5je3" }],
        ["path", { d: "M5 13h4", key: "svpcxo" }],
        ["path", { d: "M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z", key: "vsjego" }]
      ]);
      var FishOff = createLucideIcon("FishOff", [
        [
          "path",
          {
            d: "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058",
            key: "1j1hse"
          }
        ],
        [
          "path",
          {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618",
            key: "1q46z8"
          }
        ],
        [
          "path",
          {
            d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20",
            key: "1407gh"
          }
        ]
      ]);
      var FishSymbol = createLucideIcon("FishSymbol", [
        ["path", { d: "M2 16s9-15 20-4C11 23 2 8 2 8", key: "h4oh4o" }]
      ]);
      var Fish = createLucideIcon("Fish", [
        [
          "path",
          {
            d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z",
            key: "15baut"
          }
        ],
        ["path", { d: "M18 12v.5", key: "18hhni" }],
        ["path", { d: "M16 17.93a9.77 9.77 0 0 1 0-11.86", key: "16dt7o" }],
        [
          "path",
          {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33",
            key: "l9di03"
          }
        ],
        [
          "path",
          { d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4", key: "1kjonw" }
        ],
        [
          "path",
          { d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98", key: "1zlm23" }
        ]
      ]);
      var FlagOff = createLucideIcon("FlagOff", [
        ["path", { d: "M8 2c3 0 5 2 8 2s4-1 4-1v11", key: "9rwyz9" }],
        ["path", { d: "M4 22V4", key: "1plyxx" }],
        ["path", { d: "M4 15s1-1 4-1 5 2 8 2", key: "1myooe" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var FlagTriangleLeft = createLucideIcon("FlagTriangleLeft", [
        ["path", { d: "M17 22V2L7 7l10 5", key: "1rmf0r" }]
      ]);
      var FlagTriangleRight = createLucideIcon("FlagTriangleRight", [
        ["path", { d: "M7 22V2l10 5-10 5", key: "17n18y" }]
      ]);
      var Flag = createLucideIcon("Flag", [
        ["path", { d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z", key: "i9b6wo" }],
        ["line", { x1: "4", x2: "4", y1: "22", y2: "15", key: "1cm3nv" }]
      ]);
      var FlameKindling = createLucideIcon("FlameKindling", [
        [
          "path",
          {
            d: "M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z",
            key: "1ir223"
          }
        ],
        ["path", { d: "m5 22 14-4", key: "1brv4h" }],
        ["path", { d: "m5 18 14 4", key: "lgyyje" }]
      ]);
      var Flame = createLucideIcon("Flame", [
        [
          "path",
          {
            d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",
            key: "96xj49"
          }
        ]
      ]);
      var FlashlightOff = createLucideIcon("FlashlightOff", [
        ["path", { d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4", key: "1r120k" }],
        ["path", { d: "M7 2h11v4c0 2-2 2-2 4v1", key: "dz1920" }],
        ["line", { x1: "11", x2: "18", y1: "6", y2: "6", key: "bi1vpe" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Flashlight = createLucideIcon("Flashlight", [
        [
          "path",
          {
            d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z",
            key: "1orkel"
          }
        ],
        ["line", { x1: "6", x2: "18", y1: "6", y2: "6", key: "1z11jq" }],
        ["line", { x1: "12", x2: "12", y1: "12", y2: "12", key: "1f4yc1" }]
      ]);
      var FlaskConicalOff = createLucideIcon("FlaskConicalOff", [
        [
          "path",
          {
            d: "M10 10 4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-1.272-2.542",
            key: "59ek9y"
          }
        ],
        ["path", { d: "M10 2v2.343", key: "15t272" }],
        ["path", { d: "M14 2v6.343", key: "sxr80q" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }],
        ["path", { d: "M7 16h9", key: "t5njau" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var FlaskConical = createLucideIcon("FlaskConical", [
        [
          "path",
          {
            d: "M10 2v7.527a2 2 0 0 1-.211.896L4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-5.069-10.127A2 2 0 0 1 14 9.527V2",
            key: "pzvekw"
          }
        ],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }],
        ["path", { d: "M7 16h10", key: "wp8him" }]
      ]);
      var FlaskRound = createLucideIcon("FlaskRound", [
        ["path", { d: "M10 2v7.31", key: "5d1hyh" }],
        ["path", { d: "M14 9.3V1.99", key: "14k4l0" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }],
        ["path", { d: "M14 9.3a6.5 6.5 0 1 1-4 0", key: "1r8fvy" }],
        ["path", { d: "M5.52 16h12.96", key: "46hh1i" }]
      ]);
      var FlipHorizontal2 = createLucideIcon("FlipHorizontal2", [
        ["path", { d: "m3 7 5 5-5 5V7", key: "couhi7" }],
        ["path", { d: "m21 7-5 5 5 5V7", key: "6ouia7" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 2v2", key: "tus03m" }]
      ]);
      var FlipHorizontal = createLucideIcon("FlipHorizontal", [
        ["path", { d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3", key: "1i73f7" }],
        ["path", { d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3", key: "saxlbk" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 2v2", key: "tus03m" }]
      ]);
      var FlipVertical2 = createLucideIcon("FlipVertical2", [
        ["path", { d: "m17 3-5 5-5-5h10", key: "1ftt6x" }],
        ["path", { d: "m17 21-5-5-5 5h10", key: "1m0wmu" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ]);
      var FlipVertical = createLucideIcon("FlipVertical", [
        ["path", { d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3", key: "14bfxa" }],
        ["path", { d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3", key: "14rx03" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ]);
      var Flower2 = createLucideIcon("Flower2", [
        [
          "path",
          {
            d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1",
            key: "3pnvol"
          }
        ],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        ["path", { d: "M12 10v12", key: "6ubwww" }],
        ["path", { d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z", key: "9hd38g" }],
        ["path", { d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z", key: "ufn41s" }]
      ]);
      var Flower = createLucideIcon("Flower", [
        [
          "path",
          {
            d: "M12 7.5a4.5 4.5 0 1 1 4.5 4.5M12 7.5A4.5 4.5 0 1 0 7.5 12M12 7.5V9m-4.5 3a4.5 4.5 0 1 0 4.5 4.5M7.5 12H9m7.5 0a4.5 4.5 0 1 1-4.5 4.5m4.5-4.5H15m-3 4.5V15",
            key: "51z86h"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "m8 16 1.5-1.5", key: "ce6zph" }],
        ["path", { d: "M14.5 9.5 16 8", key: "1kzrzb" }],
        ["path", { d: "m8 8 1.5 1.5", key: "1yv88w" }],
        ["path", { d: "M14.5 14.5 16 16", key: "12xhjh" }]
      ]);
      var Focus = createLucideIcon("Focus", [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
      ]);
      var FoldHorizontal = createLucideIcon("FoldHorizontal", [
        ["path", { d: "M2 12h6", key: "1wqiqv" }],
        ["path", { d: "M22 12h-6", key: "1eg9hc" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m19 9-3 3 3 3", key: "12ol22" }],
        ["path", { d: "m5 15 3-3-3-3", key: "1kdhjc" }]
      ]);
      var FoldVertical = createLucideIcon("FoldVertical", [
        ["path", { d: "M12 22v-6", key: "6o8u61" }],
        ["path", { d: "M12 8V2", key: "1wkif3" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }],
        ["path", { d: "m15 19-3-3-3 3", key: "e37ymu" }],
        ["path", { d: "m15 5-3 3-3-3", key: "19d6lf" }]
      ]);
      var FolderArchive = createLucideIcon("FolderArchive", [
        ["circle", { cx: "15", cy: "19", r: "2", key: "u2pros" }],
        [
          "path",
          {
            d: "M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1",
            key: "1jj40k"
          }
        ],
        ["path", { d: "M15 11v-1", key: "cntcp" }],
        ["path", { d: "M15 17v-2", key: "1279jj" }]
      ]);
      var FolderCheck = createLucideIcon("FolderCheck", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
      ]);
      var FolderClock = createLucideIcon("FolderClock", [
        ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
        [
          "path",
          {
            d: "M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2",
            key: "1urifu"
          }
        ],
        ["path", { d: "M16 14v2l1 1", key: "xth2jh" }]
      ]);
      var FolderClosed = createLucideIcon("FolderClosed", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M2 10h20", key: "1ir3d8" }]
      ]);
      var FolderCog = createLucideIcon("FolderCog", [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        [
          "path",
          {
            d: "M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v3.3",
            key: "1k8050"
          }
        ],
        ["path", { d: "m21.7 19.4-.9-.3", key: "1qgwi9" }],
        ["path", { d: "m15.2 16.9-.9-.3", key: "1t7mvx" }],
        ["path", { d: "m16.6 21.7.3-.9", key: "1j67ps" }],
        ["path", { d: "m19.1 15.2.3-.9", key: "18r7jp" }],
        ["path", { d: "m19.6 21.7-.4-1", key: "z2vh2" }],
        ["path", { d: "m16.8 15.3-.4-1", key: "1ei7r6" }],
        ["path", { d: "m14.3 19.6 1-.4", key: "11sv9r" }],
        ["path", { d: "m20.7 16.8 1-.4", key: "19m87a" }]
      ]);
      var FolderDot = createLucideIcon("FolderDot", [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "1", key: "49l61u" }]
      ]);
      var FolderDown = createLucideIcon("FolderDown", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "m15 13-3 3-3-3", key: "6j2sf0" }]
      ]);
      var FolderGit2 = createLucideIcon("FolderGit2", [
        [
          "path",
          {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5",
            key: "1w6njk"
          }
        ],
        ["circle", { cx: "13", cy: "12", r: "2", key: "1j92g6" }],
        ["path", { d: "M18 19c-2.8 0-5-2.2-5-5v8", key: "pkpw2h" }],
        ["circle", { cx: "20", cy: "19", r: "2", key: "1obnsp" }]
      ]);
      var FolderGit = createLucideIcon("FolderGit", [
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M14 13h3", key: "1dgedf" }],
        ["path", { d: "M7 13h3", key: "1pygq7" }]
      ]);
      var FolderHeart = createLucideIcon("FolderHeart", [
        [
          "path",
          {
            d: "M11 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1.5",
            key: "6hud8k"
          }
        ],
        [
          "path",
          {
            d: "M13.9 17.45c-1.2-1.2-1.14-2.8-.2-3.73a2.43 2.43 0 0 1 3.44 0l.36.34.34-.34a2.43 2.43 0 0 1 3.45-.01v0c.95.95 1 2.53-.2 3.74L17.5 21Z",
            key: "vgq86i"
          }
        ]
      ]);
      var FolderInput = createLucideIcon("FolderInput", [
        [
          "path",
          {
            d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1",
            key: "fm4g5t"
          }
        ],
        ["path", { d: "M2 13h10", key: "pgb2dq" }],
        ["path", { d: "m9 16 3-3-3-3", key: "6m91ic" }]
      ]);
      var FolderKanban = createLucideIcon("FolderKanban", [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["path", { d: "M8 10v4", key: "tgpxqk" }],
        ["path", { d: "M12 10v2", key: "hh53o1" }],
        ["path", { d: "M16 10v6", key: "1d6xys" }]
      ]);
      var FolderKey = createLucideIcon("FolderKey", [
        ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
        [
          "path",
          {
            d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2",
            key: "3hgo9p"
          }
        ],
        ["path", { d: "m22 14-4.5 4.5", key: "1ef6z8" }],
        ["path", { d: "m21 15 1 1", key: "1ejcpy" }]
      ]);
      var FolderLock = createLucideIcon("FolderLock", [
        ["rect", { width: "8", height: "5", x: "14", y: "17", rx: "1", key: "19aais" }],
        [
          "path",
          {
            d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5",
            key: "1w6v7t"
          }
        ],
        ["path", { d: "M20 17v-2a2 2 0 1 0-4 0v2", key: "pwaxnr" }]
      ]);
      var FolderMinus = createLucideIcon("FolderMinus", [
        ["path", { d: "M9 13h6", key: "1uhe8q" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ]);
      var FolderOpenDot = createLucideIcon("FolderOpenDot", [
        [
          "path",
          {
            d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
            key: "1nmvlm"
          }
        ],
        ["circle", { cx: "14", cy: "15", r: "1", key: "1gm4qj" }]
      ]);
      var FolderOpen = createLucideIcon("FolderOpen", [
        [
          "path",
          {
            d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2",
            key: "usdka0"
          }
        ]
      ]);
      var FolderOutput = createLucideIcon("FolderOutput", [
        [
          "path",
          {
            d: "M2 7.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
            key: "jm8npq"
          }
        ],
        ["path", { d: "M2 13h10", key: "pgb2dq" }],
        ["path", { d: "m5 10-3 3 3 3", key: "1r8ie0" }]
      ]);
      var FolderPen = createLucideIcon("FolderPen", [
        ["path", { d: "M8.4 10.6a2 2 0 0 1 3 3L6 19l-4 1 1-4Z", key: "dakro8" }],
        [
          "path",
          {
            d: "M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5",
            key: "a8xqs0"
          }
        ]
      ]);
      var FolderPlus = createLucideIcon("FolderPlus", [
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ]);
      var FolderRoot = createLucideIcon("FolderRoot", [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
        ["path", { d: "M12 15v5", key: "11xva1" }]
      ]);
      var FolderSearch2 = createLucideIcon("FolderSearch2", [
        ["circle", { cx: "11.5", cy: "12.5", r: "2.5", key: "1ea5ju" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M13.3 14.3 15 16", key: "1y4v1n" }]
      ]);
      var FolderSearch = createLucideIcon("FolderSearch", [
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
        [
          "path",
          {
            d: "M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1",
            key: "1bw5m7"
          }
        ],
        ["path", { d: "m21 21-1.5-1.5", key: "3sg1j" }]
      ]);
      var FolderSymlink = createLucideIcon("FolderSymlink", [
        [
          "path",
          {
            d: "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
            key: "1or2t8"
          }
        ],
        ["path", { d: "m8 16 3-3-3-3", key: "rlqrt1" }],
        ["path", { d: "M2 16v-1a2 2 0 0 1 2-2h6", key: "pgw8ln" }]
      ]);
      var FolderSync = createLucideIcon("FolderSync", [
        [
          "path",
          {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5",
            key: "1dkoa9"
          }
        ],
        ["path", { d: "M12 10v4h4", key: "1czhmt" }],
        ["path", { d: "m12 14 1.535-1.605a5 5 0 0 1 8 1.5", key: "lvuxfi" }],
        ["path", { d: "M22 22v-4h-4", key: "1ewp4q" }],
        ["path", { d: "m22 18-1.535 1.605a5 5 0 0 1-8-1.5", key: "14ync0" }]
      ]);
      var FolderTree = createLucideIcon("FolderTree", [
        [
          "path",
          {
            d: "M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "hod4my"
          }
        ],
        [
          "path",
          {
            d: "M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "w4yl2u"
          }
        ],
        ["path", { d: "M3 5a2 2 0 0 0 2 2h3", key: "f2jnh7" }],
        ["path", { d: "M3 3v13a2 2 0 0 0 2 2h3", key: "k8epm1" }]
      ]);
      var FolderUp = createLucideIcon("FolderUp", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "m9 13 3-3 3 3", key: "1pxg3c" }]
      ]);
      var FolderX = createLucideIcon("FolderX", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "m9.5 10.5 5 5", key: "ra9qjz" }],
        ["path", { d: "m14.5 10.5-5 5", key: "l2rkpq" }]
      ]);
      var Folder = createLucideIcon("Folder", [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ]);
      var Folders = createLucideIcon("Folders", [
        [
          "path",
          {
            d: "M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z",
            key: "4u7rpt"
          }
        ],
        ["path", { d: "M2 8v11a2 2 0 0 0 2 2h14", key: "1eicx1" }]
      ]);
      var Footprints = createLucideIcon("Footprints", [
        [
          "path",
          {
            d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z",
            key: "1dudjm"
          }
        ],
        [
          "path",
          {
            d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z",
            key: "l2t8xc"
          }
        ],
        ["path", { d: "M16 17h4", key: "1dejxt" }],
        ["path", { d: "M4 13h4", key: "1bwh8b" }]
      ]);
      var Forklift = createLucideIcon("Forklift", [
        ["path", { d: "M12 12H5a2 2 0 0 0-2 2v5", key: "7zsz91" }],
        ["circle", { cx: "13", cy: "19", r: "2", key: "wjnkru" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
        ["path", { d: "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5", key: "13bk1p" }]
      ]);
      var FormInput = createLucideIcon("FormInput", [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M17 12h.01", key: "1m0b6t" }],
        ["path", { d: "M7 12h.01", key: "eqddd0" }]
      ]);
      var Forward = createLucideIcon("Forward", [
        ["polyline", { points: "15 17 20 12 15 7", key: "1w3sku" }],
        ["path", { d: "M4 18v-2a4 4 0 0 1 4-4h12", key: "jmiej9" }]
      ]);
      var Frame = createLucideIcon("Frame", [
        ["line", { x1: "22", x2: "2", y1: "6", y2: "6", key: "15w7dq" }],
        ["line", { x1: "22", x2: "2", y1: "18", y2: "18", key: "1ip48p" }],
        ["line", { x1: "6", x2: "6", y1: "2", y2: "22", key: "a2lnyx" }],
        ["line", { x1: "18", x2: "18", y1: "2", y2: "22", key: "8vb6jd" }]
      ]);
      var Framer = createLucideIcon("Framer", [
        ["path", { d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7", key: "1a2nng" }]
      ]);
      var Frown = createLucideIcon("Frown", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ]);
      var Fuel = createLucideIcon("Fuel", [
        ["line", { x1: "3", x2: "15", y1: "22", y2: "22", key: "xegly4" }],
        ["line", { x1: "4", x2: "14", y1: "9", y2: "9", key: "xcnuvu" }],
        ["path", { d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18", key: "16j0yd" }],
        [
          "path",
          {
            d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2h0a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5",
            key: "8ur5zv"
          }
        ]
      ]);
      var Fullscreen = createLucideIcon("Fullscreen", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["rect", { width: "10", height: "8", x: "7", y: "8", rx: "1", key: "vys8me" }]
      ]);
      var FunctionSquare = createLucideIcon("FunctionSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3", key: "m1af9g" }],
        ["path", { d: "M9 11.2h5.7", key: "3zgcl2" }]
      ]);
      var GalleryHorizontalEnd = createLucideIcon("GalleryHorizontalEnd", [
        ["path", { d: "M2 7v10", key: "a2pl2d" }],
        ["path", { d: "M6 5v14", key: "1kq3d7" }],
        ["rect", { width: "12", height: "18", x: "10", y: "3", rx: "2", key: "13i7bc" }]
      ]);
      var GalleryHorizontal = createLucideIcon("GalleryHorizontal", [
        ["path", { d: "M2 3v18", key: "pzttux" }],
        ["rect", { width: "12", height: "18", x: "6", y: "3", rx: "2", key: "btr8bg" }],
        ["path", { d: "M22 3v18", key: "6jf3v" }]
      ]);
      var GalleryThumbnails = createLucideIcon("GalleryThumbnails", [
        ["rect", { width: "18", height: "14", x: "3", y: "3", rx: "2", key: "74y24f" }],
        ["path", { d: "M4 21h1", key: "16zlid" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M19 21h1", key: "edywat" }]
      ]);
      var GalleryVerticalEnd = createLucideIcon("GalleryVerticalEnd", [
        ["path", { d: "M7 2h10", key: "nczekb" }],
        ["path", { d: "M5 6h14", key: "u2x4p" }],
        ["rect", { width: "18", height: "12", x: "3", y: "10", rx: "2", key: "l0tzu3" }]
      ]);
      var GalleryVertical = createLucideIcon("GalleryVertical", [
        ["path", { d: "M3 2h18", key: "15qxfx" }],
        ["rect", { width: "18", height: "12", x: "3", y: "6", rx: "2", key: "1439r6" }],
        ["path", { d: "M3 22h18", key: "8prr45" }]
      ]);
      var Gamepad2 = createLucideIcon("Gamepad2", [
        ["line", { x1: "6", x2: "10", y1: "11", y2: "11", key: "1gktln" }],
        ["line", { x1: "8", x2: "8", y1: "9", y2: "13", key: "qnk9ow" }],
        ["line", { x1: "15", x2: "15.01", y1: "12", y2: "12", key: "krot7o" }],
        ["line", { x1: "18", x2: "18.01", y1: "10", y2: "10", key: "1lcuu1" }],
        [
          "path",
          {
            d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
            key: "mfqc10"
          }
        ]
      ]);
      var Gamepad = createLucideIcon("Gamepad", [
        ["line", { x1: "6", x2: "10", y1: "12", y2: "12", key: "161bw2" }],
        ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
        ["line", { x1: "15", x2: "15.01", y1: "13", y2: "13", key: "dqpgro" }],
        ["line", { x1: "18", x2: "18.01", y1: "11", y2: "11", key: "meh2c" }],
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ]);
      var GanttChartSquare = createLucideIcon("GanttChartSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 8h7", key: "kbo1nt" }],
        ["path", { d: "M8 12h6", key: "ikassy" }],
        ["path", { d: "M11 16h5", key: "oq65wt" }]
      ]);
      var GanttChart = createLucideIcon("GanttChart", [
        ["path", { d: "M8 6h10", key: "9lnwnk" }],
        ["path", { d: "M6 12h9", key: "1g9pqf" }],
        ["path", { d: "M11 18h7", key: "c8dzvl" }]
      ]);
      var GaugeCircle = createLucideIcon("GaugeCircle", [
        ["path", { d: "M15.6 2.7a10 10 0 1 0 5.7 5.7", key: "1e0p6d" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M13.4 10.6 19 5", key: "1kr7tw" }]
      ]);
      var Gauge = createLucideIcon("Gauge", [
        ["path", { d: "m12 14 4-4", key: "9kzdfg" }],
        ["path", { d: "M3.34 19a10 10 0 1 1 17.32 0", key: "19p75a" }]
      ]);
      var Gavel = createLucideIcon("Gavel", [
        ["path", { d: "m14.5 12.5-8 8a2.119 2.119 0 1 1-3-3l8-8", key: "15492f" }],
        ["path", { d: "m16 16 6-6", key: "vzrcl6" }],
        ["path", { d: "m8 8 6-6", key: "18bi4p" }],
        ["path", { d: "m9 7 8 8", key: "5jnvq1" }],
        ["path", { d: "m21 11-8-8", key: "z4y7zo" }]
      ]);
      var Gem = createLucideIcon("Gem", [
        ["path", { d: "M6 3h12l4 6-10 13L2 9Z", key: "1pcd5k" }],
        ["path", { d: "M11 3 8 9l4 13 4-13-3-6", key: "1fcu3u" }],
        ["path", { d: "M2 9h20", key: "16fsjt" }]
      ]);
      var Ghost = createLucideIcon("Ghost", [
        ["path", { d: "M9 10h.01", key: "qbtxuw" }],
        ["path", { d: "M15 10h.01", key: "1qmjsl" }],
        [
          "path",
          {
            d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z",
            key: "uwwb07"
          }
        ]
      ]);
      var Gift = createLucideIcon("Gift", [
        ["rect", { x: "3", y: "8", width: "18", height: "4", rx: "1", key: "bkv52" }],
        ["path", { d: "M12 8v13", key: "1c76mn" }],
        ["path", { d: "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7", key: "6wjy6b" }],
        [
          "path",
          {
            d: "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5",
            key: "1ihvrl"
          }
        ]
      ]);
      var GitBranchPlus = createLucideIcon("GitBranchPlus", [
        ["path", { d: "M6 3v12", key: "qpgusn" }],
        ["path", { d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "1d02ji" }],
        ["path", { d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "chk6ph" }],
        ["path", { d: "M15 6a9 9 0 0 0-9 9", key: "or332x" }],
        ["path", { d: "M18 15v6", key: "9wciyi" }],
        ["path", { d: "M21 18h-6", key: "139f0c" }]
      ]);
      var GitBranch = createLucideIcon("GitBranch", [
        ["line", { x1: "6", x2: "6", y1: "3", y2: "15", key: "17qcm7" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["path", { d: "M18 9a9 9 0 0 1-9 9", key: "n2h4wq" }]
      ]);
      var GitCommitHorizontal = createLucideIcon("GitCommitHorizontal", [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["line", { x1: "3", x2: "9", y1: "12", y2: "12", key: "1dyftd" }],
        ["line", { x1: "15", x2: "21", y1: "12", y2: "12", key: "oup4p8" }]
      ]);
      var GitCommitVertical = createLucideIcon("GitCommitVertical", [
        ["path", { d: "M12 3v6", key: "1holv5" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "M12 15v6", key: "a9ows0" }]
      ]);
      var GitCompareArrows = createLucideIcon("GitCompareArrows", [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
        ["path", { d: "M12 18H7a2 2 0 0 1-2-2V9", key: "16sdep" }],
        ["path", { d: "m9 15 3 3-3 3", key: "1m3kbl" }]
      ]);
      var GitCompare = createLucideIcon("GitCompare", [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
        ["path", { d: "M11 18H8a2 2 0 0 1-2-2V9", key: "19pyzm" }]
      ]);
      var GitFork = createLucideIcon("GitFork", [
        ["circle", { cx: "12", cy: "18", r: "3", key: "1mpf1b" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
        ["path", { d: "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9", key: "1uq4wg" }],
        ["path", { d: "M12 12v3", key: "158kv8" }]
      ]);
      var GitGraph = createLucideIcon("GitGraph", [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v6", key: "158jrl" }],
        ["circle", { cx: "5", cy: "18", r: "3", key: "104gr9" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
        ["path", { d: "M16 15.7A9 9 0 0 0 19 9", key: "1e3vqb" }]
      ]);
      var GitMerge = createLucideIcon("GitMerge", [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 21V9a9 9 0 0 0 9 9", key: "7kw0sc" }]
      ]);
      var GitPullRequestArrow = createLucideIcon("GitPullRequestArrow", [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v12", key: "ih889a" }],
        ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }]
      ]);
      var GitPullRequestClosed = createLucideIcon("GitPullRequestClosed", [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 9v12", key: "1sc30k" }],
        ["path", { d: "m21 3-6 6", key: "16nqsk" }],
        ["path", { d: "m21 9-6-6", key: "9j17rh" }],
        ["path", { d: "M18 11.5V15", key: "65xf6f" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ]);
      var GitPullRequestCreateArrow = createLucideIcon("GitPullRequestCreateArrow", [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v12", key: "ih889a" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v3", key: "1rbwk6" }],
        ["path", { d: "M19 15v6", key: "10aioa" }],
        ["path", { d: "M22 18h-6", key: "1d5gi5" }]
      ]);
      var GitPullRequestCreate = createLucideIcon("GitPullRequestCreate", [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 9v12", key: "1sc30k" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v3", key: "1jb6z3" }],
        ["path", { d: "M18 15v6", key: "9wciyi" }],
        ["path", { d: "M21 18h-6", key: "139f0c" }]
      ]);
      var GitPullRequestDraft = createLucideIcon("GitPullRequestDraft", [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M18 6V5", key: "1oao2s" }],
        ["path", { d: "M18 11v-1", key: "11c8tz" }],
        ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
      ]);
      var GitPullRequest = createLucideIcon("GitPullRequest", [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
        ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
      ]);
      var Github = createLucideIcon("Github", [
        [
          "path",
          {
            d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
            key: "tonef"
          }
        ],
        ["path", { d: "M9 18c-4.51 2-5-2-7-2", key: "9comsn" }]
      ]);
      var Gitlab = createLucideIcon("Gitlab", [
        [
          "path",
          {
            d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z",
            key: "148pdi"
          }
        ]
      ]);
      var GlassWater = createLucideIcon("GlassWater", [
        [
          "path",
          { d: "M15.2 22H8.8a2 2 0 0 1-2-1.79L5 3h14l-1.81 17.21A2 2 0 0 1 15.2 22Z", key: "48rfw3" }
        ],
        ["path", { d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0", key: "mjntcy" }]
      ]);
      var Glasses = createLucideIcon("Glasses", [
        ["circle", { cx: "6", cy: "15", r: "4", key: "vux9w4" }],
        ["circle", { cx: "18", cy: "15", r: "4", key: "18o8ve" }],
        ["path", { d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2", key: "1ag4bs" }],
        ["path", { d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2", key: "1hm1gs" }],
        ["path", { d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2", key: "1r31ai" }]
      ]);
      var Globe2 = createLucideIcon("Globe2", [
        ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
        [
          "path",
          {
            d: "M7 3.34V5a3 3 0 0 0 3 3v0a2 2 0 0 1 2 2v0c0 1.1.9 2 2 2v0a2 2 0 0 0 2-2v0c0-1.1.9-2 2-2h3.17",
            key: "1fi5u6"
          }
        ],
        [
          "path",
          { d: "M11 21.95V18a2 2 0 0 0-2-2v0a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05", key: "xsiumc" }
        ],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ]);
      var Globe = createLucideIcon("Globe", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20", key: "13o1zl" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }]
      ]);
      var Goal = createLucideIcon("Goal", [
        ["path", { d: "M12 13V2l8 4-8 4", key: "5wlwwj" }],
        ["path", { d: "M20.55 10.23A9 9 0 1 1 8 4.94", key: "5988i3" }],
        ["path", { d: "M8 10a5 5 0 1 0 8.9 2.02", key: "1hq7ot" }]
      ]);
      var Grab = createLucideIcon("Grab", [
        ["path", { d: "M18 11.5V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4", key: "n5nng" }],
        ["path", { d: "M14 10V8a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2", key: "185i9d" }],
        ["path", { d: "M10 9.9V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5", key: "11pz95" }],
        ["path", { d: "M6 14v0a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "16yk7l" }],
        [
          "path",
          { d: "M18 11v0a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0", key: "nzvb1c" }
        ]
      ]);
      var GraduationCap = createLucideIcon("GraduationCap", [
        ["path", { d: "M22 10v6M2 10l10-5 10 5-10 5z", key: "1ef52a" }],
        ["path", { d: "M6 12v5c3 3 9 3 12 0v-5", key: "1f75yj" }]
      ]);
      var Grape = createLucideIcon("Grape", [
        ["path", { d: "M22 5V2l-5.89 5.89", key: "1eenpo" }],
        ["circle", { cx: "16.6", cy: "15.89", r: "3", key: "xjtalx" }],
        ["circle", { cx: "8.11", cy: "7.4", r: "3", key: "u2fv6i" }],
        ["circle", { cx: "12.35", cy: "11.65", r: "3", key: "i6i8g7" }],
        ["circle", { cx: "13.91", cy: "5.85", r: "3", key: "6ye0dv" }],
        ["circle", { cx: "18.15", cy: "10.09", r: "3", key: "snx9no" }],
        ["circle", { cx: "6.56", cy: "13.2", r: "3", key: "17x4xg" }],
        ["circle", { cx: "10.8", cy: "17.44", r: "3", key: "1hogw9" }],
        ["circle", { cx: "5", cy: "19", r: "3", key: "1sn6vo" }]
      ]);
      var Grid2x2 = createLucideIcon("Grid2x2", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }],
        ["path", { d: "M12 3v18", key: "108xh3" }]
      ]);
      var Grid3x3 = createLucideIcon("Grid3x3", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ]);
      var GripHorizontal = createLucideIcon("GripHorizontal", [
        ["circle", { cx: "12", cy: "9", r: "1", key: "124mty" }],
        ["circle", { cx: "19", cy: "9", r: "1", key: "1ruzo2" }],
        ["circle", { cx: "5", cy: "9", r: "1", key: "1a8b28" }],
        ["circle", { cx: "12", cy: "15", r: "1", key: "1e56xg" }],
        ["circle", { cx: "19", cy: "15", r: "1", key: "1a92ep" }],
        ["circle", { cx: "5", cy: "15", r: "1", key: "5r1jwy" }]
      ]);
      var GripVertical = createLucideIcon("GripVertical", [
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
        ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
        ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
        ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
        ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
      ]);
      var Grip = createLucideIcon("Grip", [
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["circle", { cx: "19", cy: "5", r: "1", key: "w8mnmm" }],
        ["circle", { cx: "5", cy: "5", r: "1", key: "lttvr7" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
        ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }],
        ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }],
        ["circle", { cx: "19", cy: "19", r: "1", key: "shf9b7" }],
        ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
      ]);
      var Group = createLucideIcon("Group", [
        ["path", { d: "M3 7V5c0-1.1.9-2 2-2h2", key: "adw53z" }],
        ["path", { d: "M17 3h2c1.1 0 2 .9 2 2v2", key: "an4l38" }],
        ["path", { d: "M21 17v2c0 1.1-.9 2-2 2h-2", key: "144t0e" }],
        ["path", { d: "M7 21H5c-1.1 0-2-.9-2-2v-2", key: "rtnfgi" }],
        ["rect", { width: "7", height: "5", x: "7", y: "7", rx: "1", key: "1eyiv7" }],
        ["rect", { width: "7", height: "5", x: "10", y: "12", rx: "1", key: "1qlmkx" }]
      ]);
      var Guitar = createLucideIcon("Guitar", [
        ["path", { d: "m20 7 1.7-1.7a1 1 0 0 0 0-1.4l-1.6-1.6a1 1 0 0 0-1.4 0L17 4v3Z", key: "15ixgv" }],
        ["path", { d: "m17 7-5.1 5.1", key: "l9guh7" }],
        ["circle", { cx: "11.5", cy: "12.5", r: ".5", fill: "currentColor", key: "16onso" }],
        [
          "path",
          {
            d: "M6 12a2 2 0 0 0 1.8-1.2l.4-.9C8.7 8.8 9.8 8 11 8c2.8 0 5 2.2 5 5 0 1.2-.8 2.3-1.9 2.8l-.9.4A2 2 0 0 0 12 18a4 4 0 0 1-4 4c-3.3 0-6-2.7-6-6a4 4 0 0 1 4-4",
            key: "x9fguj"
          }
        ],
        ["path", { d: "m6 16 2 2", key: "16qmzd" }]
      ]);
      var Hammer = createLucideIcon("Hammer", [
        [
          "path",
          { d: "m15 12-8.5 8.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L12 9", key: "1afvon" }
        ],
        ["path", { d: "M17.64 15 22 10.64", key: "zsji6s" }],
        [
          "path",
          {
            d: "m20.91 11.7-1.25-1.25c-.6-.6-.93-1.4-.93-2.25v-.86L16.01 4.6a5.56 5.56 0 0 0-3.94-1.64H9l.92.82A6.18 6.18 0 0 1 12 8.4v1.56l2 2h2.47l2.26 1.91",
            key: "lehyy1"
          }
        ]
      ]);
      var HandCoins = createLucideIcon("HandCoins", [
        ["path", { d: "M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17", key: "geh8rc" }],
        [
          "path",
          {
            d: "m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "1fto5m"
          }
        ],
        ["path", { d: "m2 16 6 6", key: "1pfhp9" }],
        ["circle", { cx: "16", cy: "9", r: "2.9", key: "1n0dlu" }],
        ["circle", { cx: "6", cy: "5", r: "3", key: "151irh" }]
      ]);
      var HandHeart = createLucideIcon("HandHeart", [
        ["path", { d: "M11 14h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16", key: "1ifwr1" }],
        [
          "path",
          {
            d: "m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "17abbs"
          }
        ],
        ["path", { d: "m2 15 6 6", key: "10dquu" }],
        [
          "path",
          {
            d: "M19.5 8.5c.7-.7 1.5-1.6 1.5-2.7A2.73 2.73 0 0 0 16 4a2.78 2.78 0 0 0-5 1.8c0 1.2.8 2 1.5 2.8L16 12Z",
            key: "1h3036"
          }
        ]
      ]);
      var HandHelping = createLucideIcon("HandHelping", [
        ["path", { d: "M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14", key: "1j4xps" }],
        [
          "path",
          {
            d: "m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "uospg8"
          }
        ],
        ["path", { d: "m2 13 6 6", key: "16e5sb" }]
      ]);
      var HandMetal = createLucideIcon("HandMetal", [
        ["path", { d: "M18 12.5V10a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4", key: "7eki13" }],
        ["path", { d: "M14 11V9a2 2 0 1 0-4 0v2", key: "94qvcw" }],
        ["path", { d: "M10 10.5V5a2 2 0 1 0-4 0v9", key: "m1ah89" }],
        [
          "path",
          {
            d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5",
            key: "t1skq1"
          }
        ]
      ]);
      var HandPlatter = createLucideIcon("HandPlatter", [
        ["path", { d: "M12 3V2", key: "ar7q03" }],
        ["path", { d: "M5 10a7.1 7.1 0 0 1 14 0", key: "1t9y3n" }],
        ["path", { d: "M4 10h16", key: "img6z1" }],
        ["path", { d: "M2 14h12a2 2 0 1 1 0 4h-2", key: "loyjft" }],
        [
          "path",
          {
            d: "m15.4 17.4 3.2-2.8a2 2 0 0 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2L5 18",
            key: "1rixiy"
          }
        ],
        ["path", { d: "M5 14v7H2", key: "3mujks" }]
      ]);
      var Hand = createLucideIcon("Hand", [
        ["path", { d: "M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "aigmz7" }],
        ["path", { d: "M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2", key: "1n6bmn" }],
        ["path", { d: "M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8", key: "a9iiix" }],
        [
          "path",
          {
            d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "1s1gnw"
          }
        ]
      ]);
      var HardDriveDownload = createLucideIcon("HardDriveDownload", [
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 18h.01", key: "h775k" }]
      ]);
      var HardDriveUpload = createLucideIcon("HardDriveUpload", [
        ["path", { d: "m16 6-4-4-4 4", key: "13yo43" }],
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 18h.01", key: "h775k" }]
      ]);
      var HardDrive = createLucideIcon("HardDrive", [
        ["line", { x1: "22", x2: "2", y1: "12", y2: "12", key: "1y58io" }],
        [
          "path",
          {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
          }
        ],
        ["line", { x1: "6", x2: "6.01", y1: "16", y2: "16", key: "sgf278" }],
        ["line", { x1: "10", x2: "10.01", y1: "16", y2: "16", key: "1l4acy" }]
      ]);
      var HardHat = createLucideIcon("HardHat", [
        [
          "path",
          {
            d: "M2 18a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v2z",
            key: "1dej2m"
          }
        ],
        ["path", { d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5", key: "1p9q5i" }],
        ["path", { d: "M4 15v-3a6 6 0 0 1 6-6h0", key: "1uc279" }],
        ["path", { d: "M14 6h0a6 6 0 0 1 6 6v3", key: "1j9mnm" }]
      ]);
      var Hash = createLucideIcon("Hash", [
        ["line", { x1: "4", x2: "20", y1: "9", y2: "9", key: "4lhtct" }],
        ["line", { x1: "4", x2: "20", y1: "15", y2: "15", key: "vyu0kd" }],
        ["line", { x1: "10", x2: "8", y1: "3", y2: "21", key: "1ggp8o" }],
        ["line", { x1: "16", x2: "14", y1: "3", y2: "21", key: "weycgp" }]
      ]);
      var Haze = createLucideIcon("Haze", [
        ["path", { d: "m5.2 6.2 1.4 1.4", key: "17imol" }],
        ["path", { d: "M2 13h2", key: "13gyu8" }],
        ["path", { d: "M20 13h2", key: "16rner" }],
        ["path", { d: "m17.4 7.6 1.4-1.4", key: "t4xlah" }],
        ["path", { d: "M22 17H2", key: "1gtaj3" }],
        ["path", { d: "M22 21H2", key: "1gy6en" }],
        ["path", { d: "M16 13a4 4 0 0 0-8 0", key: "1dyczq" }],
        ["path", { d: "M12 5V2.5", key: "1vytko" }]
      ]);
      var HdmiPort = createLucideIcon("HdmiPort", [
        [
          "path",
          {
            d: "M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z",
            key: "2128wb"
          }
        ],
        ["path", { d: "M7.5 12h9", key: "1t0ckc" }]
      ]);
      var Heading1 = createLucideIcon("Heading1", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "m17 12 3-2v8", key: "1hhhft" }]
      ]);
      var Heading2 = createLucideIcon("Heading2", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1", key: "9jr5yi" }]
      ]);
      var Heading3 = createLucideIcon("Heading3", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2", key: "68ncm8" }],
        ["path", { d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2", key: "1ejuhz" }]
      ]);
      var Heading4 = createLucideIcon("Heading4", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17 10v4h4", key: "13sv97" }],
        ["path", { d: "M21 10v8", key: "1kdml4" }]
      ]);
      var Heading5 = createLucideIcon("Heading5", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17 13v-3h4", key: "1nvgqp" }],
        [
          "path",
          { d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17", key: "2nebdn" }
        ]
      ]);
      var Heading6 = createLucideIcon("Heading6", [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["circle", { cx: "19", cy: "16", r: "2", key: "15mx69" }],
        ["path", { d: "M20 10c-2 2-3 3.5-3 6", key: "f35dl0" }]
      ]);
      var Heading = createLucideIcon("Heading", [
        ["path", { d: "M6 12h12", key: "8npq4p" }],
        ["path", { d: "M6 20V4", key: "1w1bmo" }],
        ["path", { d: "M18 20V4", key: "o2hl4u" }]
      ]);
      var Headphones = createLucideIcon("Headphones", [
        [
          "path",
          {
            d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3",
            key: "1xhozi"
          }
        ]
      ]);
      var HeartCrack = createLucideIcon("HeartCrack", [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        ["path", { d: "m12 13-1-1 2-2-3-3 2-2", key: "xjdxli" }]
      ]);
      var HeartHandshake = createLucideIcon("HeartHandshake", [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        [
          "path",
          {
            d: "M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08v0c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66",
            key: "12sd6o"
          }
        ],
        ["path", { d: "m18 15-2-2", key: "60u0ii" }],
        ["path", { d: "m15 18-2-2", key: "6p76be" }]
      ]);
      var HeartOff = createLucideIcon("HeartOff", [
        ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
        [
          "path",
          { d: "M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35", key: "3mpagl" }
        ],
        [
          "path",
          {
            d: "M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17",
            key: "1gh3v3"
          }
        ]
      ]);
      var HeartPulse = createLucideIcon("HeartPulse", [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        ["path", { d: "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27", key: "1uw2ng" }]
      ]);
      var Heart = createLucideIcon("Heart", [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ]
      ]);
      var Heater = createLucideIcon("Heater", [
        ["path", { d: "M11 8c2-3-2-3 0-6", key: "1ldv5m" }],
        ["path", { d: "M15.5 8c2-3-2-3 0-6", key: "1otqoz" }],
        ["path", { d: "M6 10h.01", key: "1lbq93" }],
        ["path", { d: "M6 14h.01", key: "zudwn7" }],
        ["path", { d: "M10 16v-4", key: "1c25yv" }],
        ["path", { d: "M14 16v-4", key: "1dkbt8" }],
        ["path", { d: "M18 16v-4", key: "1yg9me" }],
        [
          "path",
          { d: "M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3", key: "1ubg90" }
        ],
        ["path", { d: "M5 20v2", key: "1abpe8" }],
        ["path", { d: "M19 20v2", key: "kqn6ft" }]
      ]);
      var HelpCircle = createLucideIcon("HelpCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var Hexagon = createLucideIcon("Hexagon", [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ]
      ]);
      var Highlighter = createLucideIcon("Highlighter", [
        ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
        ["path", { d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4", key: "14a9rk" }]
      ]);
      var History = createLucideIcon("History", [
        ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
        ["path", { d: "M12 7v5l4 2", key: "1fdv2h" }]
      ]);
      var Home = createLucideIcon("Home", [
        ["path", { d: "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z", key: "y5dka4" }],
        ["polyline", { points: "9 22 9 12 15 12 15 22", key: "e2us08" }]
      ]);
      var HopOff = createLucideIcon("HopOff", [
        ["path", { d: "M17.5 5.5C19 7 20.5 9 21 11c-1.323.265-2.646.39-4.118.226", key: "10j95a" }],
        ["path", { d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5", key: "1mqyjd" }],
        ["path", { d: "M17.5 17.5c-2.5 0-4 0-6-1", key: "11elt5" }],
        ["path", { d: "M20 11.5c1 1.5 2 3.5 2 4.5", key: "13ezvz" }],
        ["path", { d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5", key: "1ufrz1" }],
        ["path", { d: "M22 22c-2 0-3.5-.5-5.5-1.5", key: "1n8vbj" }],
        [
          "path",
          {
            d: "M4.783 4.782C1.073 8.492 1 14.5 5 18c1-1 2-4.5 1.5-6.5 1.5 1 4 1 5.5.5M8.227 2.57C11.578 1.335 15.453 2.089 18 5c-.88.88-3.7 1.761-5.726 1.618",
            key: "1h85u8"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Hop = createLucideIcon("Hop", [
        ["path", { d: "M17.5 5.5C19 7 20.5 9 21 11c-2.5.5-5 .5-8.5-1", key: "l0z2za" }],
        ["path", { d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5", key: "1mqyjd" }],
        ["path", { d: "M16.5 11.5c1 2 1 3.5 1 6-2.5 0-4 0-6-1", key: "10xoad" }],
        ["path", { d: "M20 11.5c1 1.5 2 3.5 2 4.5-1.5.5-3 0-4.5-.5", key: "1a4gpx" }],
        ["path", { d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5", key: "1ufrz1" }],
        ["path", { d: "M20.5 16.5c1 2 1.5 3.5 1.5 5.5-2 0-3.5-.5-5.5-1.5", key: "1ok5d2" }],
        [
          "path",
          {
            d: "M4.783 4.782C8.493 1.072 14.5 1 18 5c-1 1-4.5 2-6.5 1.5 1 1.5 1 4 .5 5.5-1.5.5-4 .5-5.5-.5C7 13.5 6 17 5 18c-4-3.5-3.927-9.508-.217-13.218Z",
            key: "8hlroy"
          }
        ],
        ["path", { d: "M4.5 4.5 3 3c-.184-.185-.184-.816 0-1", key: "q3aj97" }]
      ]);
      var Hotel = createLucideIcon("Hotel", [
        [
          "path",
          {
            d: "M18 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2Z",
            key: "p9z69c"
          }
        ],
        ["path", { d: "m9 16 .348-.24c1.465-1.013 3.84-1.013 5.304 0L15 16", key: "1bvcvh" }],
        ["path", { d: "M8 7h.01", key: "1vti4s" }],
        ["path", { d: "M16 7h.01", key: "1kdx03" }],
        ["path", { d: "M12 7h.01", key: "1ivr5q" }],
        ["path", { d: "M12 11h.01", key: "z322tv" }],
        ["path", { d: "M16 11h.01", key: "xkw8gn" }],
        ["path", { d: "M8 11h.01", key: "1dfujw" }],
        ["path", { d: "M10 22v-6.5m4 0V22", key: "16gs4s" }]
      ]);
      var Hourglass = createLucideIcon("Hourglass", [
        ["path", { d: "M5 22h14", key: "ehvnwv" }],
        ["path", { d: "M5 2h14", key: "pdyrp9" }],
        [
          "path",
          {
            d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22",
            key: "1d314k"
          }
        ],
        [
          "path",
          { d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2", key: "1vvvr6" }
        ]
      ]);
      var IceCream2 = createLucideIcon("IceCream2", [
        [
          "path",
          {
            d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6Zm-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0",
            key: "g86ewz"
          }
        ],
        ["path", { d: "M12.14 11a3.5 3.5 0 1 1 6.71 0", key: "4k3m1s" }],
        ["path", { d: "M15.5 6.5a3.5 3.5 0 1 0-7 0", key: "zmuahr" }]
      ]);
      var IceCream = createLucideIcon("IceCream", [
        ["path", { d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11", key: "1v6356" }],
        ["path", { d: "M17 7A5 5 0 0 0 7 7", key: "151p3v" }],
        ["path", { d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4", key: "1sdaij" }]
      ]);
      var ImageDown = createLucideIcon("ImageDown", [
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10.8", key: "sqts6f" }],
        ["path", { d: "m21 15-3.1-3.1a2 2 0 0 0-2.814.014L6 21", key: "1h47z9" }],
        ["path", { d: "m14 19.5 3 3v-6", key: "1x9jmo" }],
        ["path", { d: "m17 22.5 3-3", key: "xzuz0n" }]
      ]);
      var ImageMinus = createLucideIcon("ImageMinus", [
        ["path", { d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "m87ecr" }],
        ["line", { x1: "16", x2: "22", y1: "5", y2: "5", key: "ez7e4s" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
      ]);
      var ImageOff = createLucideIcon("ImageOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
        ["line", { x1: "13.5", x2: "6", y1: "13.5", y2: "21", key: "1q0aeu" }],
        ["line", { x1: "18", x2: "21", y1: "12", y2: "15", key: "5mozeu" }],
        [
          "path",
          {
            d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
            key: "mmje98"
          }
        ],
        ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
      ]);
      var ImagePlus = createLucideIcon("ImagePlus", [
        ["path", { d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "31hg93" }],
        ["line", { x1: "16", x2: "22", y1: "5", y2: "5", key: "ez7e4s" }],
        ["line", { x1: "19", x2: "19", y1: "2", y2: "8", key: "1gkr8c" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
      ]);
      var Image = createLucideIcon("Image", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
      ]);
      var Import = createLucideIcon("Import", [
        ["path", { d: "M12 3v12", key: "1x0j5s" }],
        ["path", { d: "m8 11 4 4 4-4", key: "1dohi6" }],
        [
          "path",
          {
            d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4",
            key: "1ywtjm"
          }
        ]
      ]);
      var Inbox = createLucideIcon("Inbox", [
        ["polyline", { points: "22 12 16 12 14 15 10 15 8 12 2 12", key: "o97t9d" }],
        [
          "path",
          {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
          }
        ]
      ]);
      var Indent = createLucideIcon("Indent", [
        ["polyline", { points: "3 8 7 12 3 16", key: "f3rxhf" }],
        ["line", { x1: "21", x2: "11", y1: "12", y2: "12", key: "1fxxak" }],
        ["line", { x1: "21", x2: "11", y1: "6", y2: "6", key: "asgu94" }],
        ["line", { x1: "21", x2: "11", y1: "18", y2: "18", key: "13dsj7" }]
      ]);
      var IndianRupee = createLucideIcon("IndianRupee", [
        ["path", { d: "M6 3h12", key: "ggurg9" }],
        ["path", { d: "M6 8h12", key: "6g4wlu" }],
        ["path", { d: "m6 13 8.5 8", key: "u1kupk" }],
        ["path", { d: "M6 13h3", key: "wdp6ag" }],
        ["path", { d: "M9 13c6.667 0 6.667-10 0-10", key: "1nkvk2" }]
      ]);
      var Infinity2 = createLucideIcon("Infinity", [
        [
          "path",
          {
            d: "M12 12c-2-2.67-4-4-6-4a4 4 0 1 0 0 8c2 0 4-1.33 6-4Zm0 0c2 2.67 4 4 6 4a4 4 0 0 0 0-8c-2 0-4 1.33-6 4Z",
            key: "1z0uae"
          }
        ]
      ]);
      var Info = createLucideIcon("Info", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 16v-4", key: "1dtifu" }],
        ["path", { d: "M12 8h.01", key: "e9boi3" }]
      ]);
      var InspectionPanel = createLucideIcon("InspectionPanel", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7h.01", key: "7u93v4" }],
        ["path", { d: "M17 7h.01", key: "14a9sn" }],
        ["path", { d: "M7 17h.01", key: "19xn7k" }],
        ["path", { d: "M17 17h.01", key: "1sd3ek" }]
      ]);
      var Instagram = createLucideIcon("Instagram", [
        ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "5", ry: "5", key: "2e1cvw" }],
        ["path", { d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z", key: "9exkf1" }],
        ["line", { x1: "17.5", x2: "17.51", y1: "6.5", y2: "6.5", key: "r4j83e" }]
      ]);
      var Italic = createLucideIcon("Italic", [
        ["line", { x1: "19", x2: "10", y1: "4", y2: "4", key: "15jd3p" }],
        ["line", { x1: "14", x2: "5", y1: "20", y2: "20", key: "bu0au3" }],
        ["line", { x1: "15", x2: "9", y1: "4", y2: "20", key: "uljnxc" }]
      ]);
      var IterationCcw = createLucideIcon("IterationCcw", [
        ["path", { d: "M20 10c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8h8", key: "4znkd0" }],
        ["polyline", { points: "16 14 20 18 16 22", key: "11njsm" }]
      ]);
      var IterationCw = createLucideIcon("IterationCw", [
        ["path", { d: "M4 10c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8H4", key: "tuf4su" }],
        ["polyline", { points: "8 22 4 18 8 14", key: "evkj9s" }]
      ]);
      var JapaneseYen = createLucideIcon("JapaneseYen", [
        ["path", { d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3", key: "2ej80x" }],
        ["path", { d: "M6 15h12", key: "1hwgt5" }],
        ["path", { d: "M6 11h12", key: "wf4gp6" }]
      ]);
      var Joystick = createLucideIcon("Joystick", [
        [
          "path",
          {
            d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z",
            key: "jg2n2t"
          }
        ],
        ["path", { d: "M6 15v-2", key: "gd6mvg" }],
        ["path", { d: "M12 15V9", key: "8c7uyn" }],
        ["circle", { cx: "12", cy: "6", r: "3", key: "1gm2ql" }]
      ]);
      var KanbanSquareDashed = createLucideIcon("KanbanSquareDashed", [
        ["path", { d: "M8 7v7", key: "1x2jlm" }],
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M16 7v9", key: "1hp2iy" }],
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M21 14v1", key: "169vum" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }]
      ]);
      var KanbanSquare = createLucideIcon("KanbanSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 7v7", key: "1x2jlm" }],
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M16 7v9", key: "1hp2iy" }]
      ]);
      var Kanban = createLucideIcon("Kanban", [
        ["path", { d: "M6 5v11", key: "mdvv1e" }],
        ["path", { d: "M12 5v6", key: "14ar3b" }],
        ["path", { d: "M18 5v14", key: "7ji314" }]
      ]);
      var KeyRound = createLucideIcon("KeyRound", [
        ["path", { d: "M2 18v3c0 .6.4 1 1 1h4v-3h3v-3h2l1.4-1.4a6.5 6.5 0 1 0-4-4Z", key: "167ctg" }],
        ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }]
      ]);
      var KeySquare = createLucideIcon("KeySquare", [
        [
          "path",
          {
            d: "M12.4 2.7c.9-.9 2.5-.9 3.4 0l5.5 5.5c.9.9.9 2.5 0 3.4l-3.7 3.7c-.9.9-2.5.9-3.4 0L8.7 9.8c-.9-.9-.9-2.5 0-3.4Z",
            key: "9li5bk"
          }
        ],
        ["path", { d: "m14 7 3 3", key: "1r5n42" }],
        ["path", { d: "M9.4 10.6 2 18v3c0 .6.4 1 1 1h4v-3h3v-3h2l1.4-1.4", key: "1ym3zm" }]
      ]);
      var Key = createLucideIcon("Key", [
        ["circle", { cx: "7.5", cy: "15.5", r: "5.5", key: "yqb3hr" }],
        ["path", { d: "m21 2-9.6 9.6", key: "1j0ho8" }],
        ["path", { d: "m15.5 7.5 3 3L22 7l-3-3", key: "1rn1fs" }]
      ]);
      var KeyboardMusic = createLucideIcon("KeyboardMusic", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M6 8h4", key: "utf9t1" }],
        ["path", { d: "M14 8h.01", key: "1primd" }],
        ["path", { d: "M18 8h.01", key: "emo2bl" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M6 12v4", key: "dy92yo" }],
        ["path", { d: "M10 12v4", key: "1fxnav" }],
        ["path", { d: "M14 12v4", key: "1hft58" }],
        ["path", { d: "M18 12v4", key: "tjjnbz" }]
      ]);
      var Keyboard = createLucideIcon("Keyboard", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", ry: "2", key: "15u882" }],
        ["path", { d: "M6 8h.001", key: "1ej0i3" }],
        ["path", { d: "M10 8h.001", key: "1x2st2" }],
        ["path", { d: "M14 8h.001", key: "1vkmyp" }],
        ["path", { d: "M18 8h.001", key: "kfsenl" }],
        ["path", { d: "M8 12h.001", key: "1sjpby" }],
        ["path", { d: "M12 12h.001", key: "al75ts" }],
        ["path", { d: "M16 12h.001", key: "931bgk" }],
        ["path", { d: "M7 16h10", key: "wp8him" }]
      ]);
      var LampCeiling = createLucideIcon("LampCeiling", [
        ["path", { d: "M12 2v5", key: "nd4vlx" }],
        ["path", { d: "M6 7h12l4 9H2l4-9Z", key: "123d64" }],
        ["path", { d: "M9.17 16a3 3 0 1 0 5.66 0", key: "1061mw" }]
      ]);
      var LampDesk = createLucideIcon("LampDesk", [
        ["path", { d: "m14 5-3 3 2 7 8-8-7-2Z", key: "1b0msb" }],
        ["path", { d: "m14 5-3 3-3-3 3-3 3 3Z", key: "1uemms" }],
        ["path", { d: "M9.5 6.5 4 12l3 6", key: "1bx08v" }],
        ["path", { d: "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z", key: "wap775" }]
      ]);
      var LampFloor = createLucideIcon("LampFloor", [
        ["path", { d: "M9 2h6l3 7H6l3-7Z", key: "wcx6mj" }],
        ["path", { d: "M12 9v13", key: "3n1su1" }],
        ["path", { d: "M9 22h6", key: "1rlq3v" }]
      ]);
      var LampWallDown = createLucideIcon("LampWallDown", [
        ["path", { d: "M11 13h6l3 7H8l3-7Z", key: "9n3qlo" }],
        ["path", { d: "M14 13V8a2 2 0 0 0-2-2H8", key: "1hu4hb" }],
        ["path", { d: "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z", key: "s053bc" }]
      ]);
      var LampWallUp = createLucideIcon("LampWallUp", [
        ["path", { d: "M11 4h6l3 7H8l3-7Z", key: "11x1ee" }],
        ["path", { d: "M14 11v5a2 2 0 0 1-2 2H8", key: "eutp5o" }],
        ["path", { d: "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z", key: "1iuthr" }]
      ]);
      var Lamp = createLucideIcon("Lamp", [
        ["path", { d: "M8 2h8l4 10H4L8 2Z", key: "9dma5w" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        ["path", { d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z", key: "mwf4oh" }]
      ]);
      var LandPlot = createLucideIcon("LandPlot", [
        ["path", { d: "m12 8 6-3-6-3v10", key: "mvpnpy" }],
        [
          "path",
          {
            d: "m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12",
            key: "ek95tt"
          }
        ],
        ["path", { d: "m6.49 12.85 11.02 6.3", key: "1kt42w" }],
        ["path", { d: "M17.51 12.85 6.5 19.15", key: "v55bdg" }]
      ]);
      var Landmark = createLucideIcon("Landmark", [
        ["line", { x1: "3", x2: "21", y1: "22", y2: "22", key: "j8o0r" }],
        ["line", { x1: "6", x2: "6", y1: "18", y2: "11", key: "10tf0k" }],
        ["line", { x1: "10", x2: "10", y1: "18", y2: "11", key: "54lgf6" }],
        ["line", { x1: "14", x2: "14", y1: "18", y2: "11", key: "380y" }],
        ["line", { x1: "18", x2: "18", y1: "18", y2: "11", key: "1kevvc" }],
        ["polygon", { points: "12 2 20 7 4 7", key: "jkujk7" }]
      ]);
      var Languages = createLucideIcon("Languages", [
        ["path", { d: "m5 8 6 6", key: "1wu5hv" }],
        ["path", { d: "m4 14 6-6 2-3", key: "1k1g8d" }],
        ["path", { d: "M2 5h12", key: "or177f" }],
        ["path", { d: "M7 2h1", key: "1t2jsx" }],
        ["path", { d: "m22 22-5-10-5 10", key: "don7ne" }],
        ["path", { d: "M14 18h6", key: "1m8k6r" }]
      ]);
      var Laptop2 = createLucideIcon("Laptop2", [
        ["rect", { width: "18", height: "12", x: "3", y: "4", rx: "2", ry: "2", key: "1qhy41" }],
        ["line", { x1: "2", x2: "22", y1: "20", y2: "20", key: "ni3hll" }]
      ]);
      var Laptop = createLucideIcon("Laptop", [
        [
          "path",
          {
            d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",
            key: "tarvll"
          }
        ]
      ]);
      var LassoSelect = createLucideIcon("LassoSelect", [
        ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
        ["path", { d: "M7 16.93c.96.43 1.96.74 2.99.91", key: "ybbtv3" }],
        [
          "path",
          {
            d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2",
            key: "gt5e1w"
          }
        ],
        ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }],
        [
          "path",
          {
            d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14v0z",
            key: "1bawls"
          }
        ]
      ]);
      var Lasso = createLucideIcon("Lasso", [
        ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
        [
          "path",
          {
            d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1",
            key: "146dds"
          }
        ],
        ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }]
      ]);
      var Laugh = createLucideIcon("Laugh", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z", key: "b2q4dd" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ]);
      var Layers2 = createLucideIcon("Layers2", [
        [
          "path",
          {
            d: "m16.02 12 5.48 3.13a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74L7.98 12",
            key: "1cuww1"
          }
        ],
        [
          "path",
          {
            d: "M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74Z",
            key: "pdlvxu"
          }
        ]
      ]);
      var Layers3 = createLucideIcon("Layers3", [
        [
          "path",
          {
            d: "m12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83Z",
            key: "8b97xw"
          }
        ],
        [
          "path",
          {
            d: "m6.08 9.5-3.5 1.6a1 1 0 0 0 0 1.81l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9a1 1 0 0 0 0-1.83l-3.5-1.59",
            key: "1e5n1m"
          }
        ],
        [
          "path",
          {
            d: "m6.08 14.5-3.5 1.6a1 1 0 0 0 0 1.81l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9a1 1 0 0 0 0-1.83l-3.5-1.59",
            key: "1iwflc"
          }
        ]
      ]);
      var Layers = createLucideIcon("Layers", [
        [
          "path",
          {
            d: "m12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83Z",
            key: "8b97xw"
          }
        ],
        ["path", { d: "m22 17.65-9.17 4.16a2 2 0 0 1-1.66 0L2 17.65", key: "dd6zsq" }],
        ["path", { d: "m22 12.65-9.17 4.16a2 2 0 0 1-1.66 0L2 12.65", key: "ep9fru" }]
      ]);
      var LayoutDashboard = createLucideIcon("LayoutDashboard", [
        ["rect", { width: "7", height: "9", x: "3", y: "3", rx: "1", key: "10lvy0" }],
        ["rect", { width: "7", height: "5", x: "14", y: "3", rx: "1", key: "16une8" }],
        ["rect", { width: "7", height: "9", x: "14", y: "12", rx: "1", key: "1hutg5" }],
        ["rect", { width: "7", height: "5", x: "3", y: "16", rx: "1", key: "ldoo1y" }]
      ]);
      var LayoutGrid = createLucideIcon("LayoutGrid", [
        ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }]
      ]);
      var LayoutList = createLucideIcon("LayoutList", [
        ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
        ["path", { d: "M14 4h7", key: "3xa0d5" }],
        ["path", { d: "M14 9h7", key: "1icrd9" }],
        ["path", { d: "M14 15h7", key: "1mj8o2" }],
        ["path", { d: "M14 20h7", key: "11slyb" }]
      ]);
      var LayoutPanelLeft = createLucideIcon("LayoutPanelLeft", [
        ["rect", { width: "7", height: "18", x: "3", y: "3", rx: "1", key: "2obqm" }],
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
      ]);
      var LayoutPanelTop = createLucideIcon("LayoutPanelTop", [
        ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
      ]);
      var LayoutTemplate = createLucideIcon("LayoutTemplate", [
        ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
        ["rect", { width: "9", height: "7", x: "3", y: "14", rx: "1", key: "jqznyg" }],
        ["rect", { width: "5", height: "7", x: "16", y: "14", rx: "1", key: "q5h2i8" }]
      ]);
      var Leaf = createLucideIcon("Leaf", [
        [
          "path",
          {
            d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z",
            key: "nnexq3"
          }
        ],
        ["path", { d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12", key: "mt58a7" }]
      ]);
      var LeafyGreen = createLucideIcon("LeafyGreen", [
        [
          "path",
          {
            d: "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22",
            key: "1134nt"
          }
        ],
        ["path", { d: "M2 22 17 7", key: "1q7jp2" }]
      ]);
      var LibraryBig = createLucideIcon("LibraryBig", [
        ["rect", { width: "8", height: "18", x: "3", y: "3", rx: "1", key: "oynpb5" }],
        ["path", { d: "M7 3v18", key: "bbkbws" }],
        [
          "path",
          {
            d: "M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z",
            key: "1qboyk"
          }
        ]
      ]);
      var LibrarySquare = createLucideIcon("LibrarySquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7v10", key: "d5nglc" }],
        ["path", { d: "M11 7v10", key: "pptsnr" }],
        ["path", { d: "m15 7 2 10", key: "1m7qm5" }]
      ]);
      var Library = createLucideIcon("Library", [
        ["path", { d: "m16 6 4 14", key: "ji33uf" }],
        ["path", { d: "M12 6v14", key: "1n7gus" }],
        ["path", { d: "M8 8v12", key: "1gg7y9" }],
        ["path", { d: "M4 4v16", key: "6qkkli" }]
      ]);
      var LifeBuoy = createLucideIcon("LifeBuoy", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m4.93 4.93 4.24 4.24", key: "1ymg45" }],
        ["path", { d: "m14.83 9.17 4.24-4.24", key: "1cb5xl" }],
        ["path", { d: "m14.83 14.83 4.24 4.24", key: "q42g0n" }],
        ["path", { d: "m9.17 14.83-4.24 4.24", key: "bqpfvv" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
      ]);
      var Ligature = createLucideIcon("Ligature", [
        ["path", { d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2", key: "1rtphz" }],
        ["path", { d: "M6 12h4", key: "a4o3ry" }],
        ["path", { d: "M14 12h2v8", key: "c1fccl" }],
        ["path", { d: "M6 20h4", key: "1i6q5t" }],
        ["path", { d: "M14 20h4", key: "lzx1xo" }]
      ]);
      var LightbulbOff = createLucideIcon("LightbulbOff", [
        ["path", { d: "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5", key: "1fkcox" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5", key: "10m8kw" }],
        ["path", { d: "M9 18h6", key: "x1upvd" }],
        ["path", { d: "M10 22h4", key: "ceow96" }]
      ]);
      var Lightbulb = createLucideIcon("Lightbulb", [
        [
          "path",
          {
            d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
            key: "1gvzjb"
          }
        ],
        ["path", { d: "M9 18h6", key: "x1upvd" }],
        ["path", { d: "M10 22h4", key: "ceow96" }]
      ]);
      var LineChart = createLucideIcon("LineChart", [
        ["path", { d: "M3 3v18h18", key: "1s2lah" }],
        ["path", { d: "m19 9-5 5-4-4-3 3", key: "2osh9i" }]
      ]);
      var Link2Off = createLucideIcon("Link2Off", [
        ["path", { d: "M9 17H7A5 5 0 0 1 7 7", key: "10o201" }],
        ["path", { d: "M15 7h2a5 5 0 0 1 4 8", key: "1d3206" }],
        ["line", { x1: "8", x2: "12", y1: "12", y2: "12", key: "rvw6j4" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Link2 = createLucideIcon("Link2", [
        ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
        ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ]);
      var Link = createLucideIcon("Link", [
        ["path", { d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71", key: "1cjeqo" }],
        ["path", { d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71", key: "19qd67" }]
      ]);
      var Linkedin = createLucideIcon("Linkedin", [
        [
          "path",
          {
            d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
            key: "c2jq9f"
          }
        ],
        ["rect", { width: "4", height: "12", x: "2", y: "9", key: "mk3on5" }],
        ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }]
      ]);
      var ListChecks = createLucideIcon("ListChecks", [
        ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
        ["path", { d: "m3 7 2 2 4-4", key: "1obspn" }],
        ["path", { d: "M13 6h8", key: "15sg57" }],
        ["path", { d: "M13 12h8", key: "h98zly" }],
        ["path", { d: "M13 18h8", key: "oe0vm4" }]
      ]);
      var ListCollapse = createLucideIcon("ListCollapse", [
        ["path", { d: "m3 10 2.5-2.5L3 5", key: "i6eama" }],
        ["path", { d: "m3 19 2.5-2.5L3 14", key: "w2gmor" }],
        ["path", { d: "M10 6h11", key: "c7qv1k" }],
        ["path", { d: "M10 12h11", key: "6m4ad9" }],
        ["path", { d: "M10 18h11", key: "11hvi2" }]
      ]);
      var ListEnd = createLucideIcon("ListEnd", [
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M10 18H3", key: "13769t" }],
        ["path", { d: "M21 6v10a2 2 0 0 1-2 2h-5", key: "ilrcs8" }],
        ["path", { d: "m16 16-2 2 2 2", key: "kkc6pm" }]
      ]);
      var ListFilter = createLucideIcon("ListFilter", [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ]);
      var ListMinus = createLucideIcon("ListMinus", [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M21 12h-6", key: "bt1uis" }]
      ]);
      var ListMusic = createLucideIcon("ListMusic", [
        ["path", { d: "M21 15V6", key: "h1cx4g" }],
        ["path", { d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z", key: "8saifv" }],
        ["path", { d: "M12 12H3", key: "18klou" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M12 18H3", key: "11ftsu" }]
      ]);
      var ListOrdered = createLucideIcon("ListOrdered", [
        ["line", { x1: "10", x2: "21", y1: "6", y2: "6", key: "76qw6h" }],
        ["line", { x1: "10", x2: "21", y1: "12", y2: "12", key: "16nom4" }],
        ["line", { x1: "10", x2: "21", y1: "18", y2: "18", key: "u3jurt" }],
        ["path", { d: "M4 6h1v4", key: "cnovpq" }],
        ["path", { d: "M4 10h2", key: "16xx2s" }],
        ["path", { d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1", key: "m9a95d" }]
      ]);
      var ListPlus = createLucideIcon("ListPlus", [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M18 9v6", key: "1twb98" }],
        ["path", { d: "M21 12h-6", key: "bt1uis" }]
      ]);
      var ListRestart = createLucideIcon("ListRestart", [
        ["path", { d: "M21 6H3", key: "1jwq7v" }],
        ["path", { d: "M7 12H3", key: "13ou7f" }],
        ["path", { d: "M7 18H3", key: "1sijw9" }],
        [
          "path",
          {
            d: "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14",
            key: "qth677"
          }
        ],
        ["path", { d: "M11 10v4h4", key: "172dkj" }]
      ]);
      var ListStart = createLucideIcon("ListStart", [
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M10 6H3", key: "lf8lx7" }],
        ["path", { d: "M21 18V8a2 2 0 0 0-2-2h-5", key: "1hghli" }],
        ["path", { d: "m16 8-2-2 2-2", key: "160uvd" }]
      ]);
      var ListTodo = createLucideIcon("ListTodo", [
        ["rect", { x: "3", y: "5", width: "6", height: "6", rx: "1", key: "1defrl" }],
        ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
        ["path", { d: "M13 6h8", key: "15sg57" }],
        ["path", { d: "M13 12h8", key: "h98zly" }],
        ["path", { d: "M13 18h8", key: "oe0vm4" }]
      ]);
      var ListTree = createLucideIcon("ListTree", [
        ["path", { d: "M21 12h-8", key: "1bmf0i" }],
        ["path", { d: "M21 6H8", key: "1pqkrb" }],
        ["path", { d: "M21 18h-8", key: "1tm79t" }],
        ["path", { d: "M3 6v4c0 1.1.9 2 2 2h3", key: "1ywdgy" }],
        ["path", { d: "M3 10v6c0 1.1.9 2 2 2h3", key: "2wc746" }]
      ]);
      var ListVideo = createLucideIcon("ListVideo", [
        ["path", { d: "M12 12H3", key: "18klou" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M12 18H3", key: "11ftsu" }],
        ["path", { d: "m16 12 5 3-5 3v-6Z", key: "zpskkp" }]
      ]);
      var ListX = createLucideIcon("ListX", [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "m19 10-4 4", key: "1tz659" }],
        ["path", { d: "m15 10 4 4", key: "1n7nei" }]
      ]);
      var List = createLucideIcon("List", [
        ["line", { x1: "8", x2: "21", y1: "6", y2: "6", key: "7ey8pc" }],
        ["line", { x1: "8", x2: "21", y1: "12", y2: "12", key: "rjfblc" }],
        ["line", { x1: "8", x2: "21", y1: "18", y2: "18", key: "c3b1m8" }],
        ["line", { x1: "3", x2: "3.01", y1: "6", y2: "6", key: "1g7gq3" }],
        ["line", { x1: "3", x2: "3.01", y1: "12", y2: "12", key: "1pjlvk" }],
        ["line", { x1: "3", x2: "3.01", y1: "18", y2: "18", key: "28t2mc" }]
      ]);
      var Loader2 = createLucideIcon("Loader2", [
        ["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }]
      ]);
      var Loader = createLucideIcon("Loader", [
        ["line", { x1: "12", x2: "12", y1: "2", y2: "6", key: "gza1u7" }],
        ["line", { x1: "12", x2: "12", y1: "18", y2: "22", key: "1qhbu9" }],
        ["line", { x1: "4.93", x2: "7.76", y1: "4.93", y2: "7.76", key: "xae44r" }],
        ["line", { x1: "16.24", x2: "19.07", y1: "16.24", y2: "19.07", key: "bxnmvf" }],
        ["line", { x1: "2", x2: "6", y1: "12", y2: "12", key: "89khin" }],
        ["line", { x1: "18", x2: "22", y1: "12", y2: "12", key: "pb8tfm" }],
        ["line", { x1: "4.93", x2: "7.76", y1: "19.07", y2: "16.24", key: "1uxjnu" }],
        ["line", { x1: "16.24", x2: "19.07", y1: "7.76", y2: "4.93", key: "6duxfx" }]
      ]);
      var LocateFixed = createLucideIcon("LocateFixed", [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ]);
      var LocateOff = createLucideIcon("LocateOff", [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        [
          "path",
          {
            d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11",
            key: "1oh7ia"
          }
        ],
        [
          "path",
          {
            d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29",
            key: "3qdecy"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Locate = createLucideIcon("Locate", [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }]
      ]);
      var LockKeyhole = createLucideIcon("LockKeyhole", [
        ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
        ["rect", { x: "3", y: "10", width: "18", height: "12", rx: "2", key: "6s8ecr" }],
        ["path", { d: "M7 10V7a5 5 0 0 1 10 0v3", key: "1pqi11" }]
      ]);
      var Lock = createLucideIcon("Lock", [
        ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
        ["path", { d: "M7 11V7a5 5 0 0 1 10 0v4", key: "fwvmzm" }]
      ]);
      var LogIn = createLucideIcon("LogIn", [
        ["path", { d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4", key: "u53s6r" }],
        ["polyline", { points: "10 17 15 12 10 7", key: "1ail0h" }],
        ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }]
      ]);
      var LogOut = createLucideIcon("LogOut", [
        ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }],
        ["polyline", { points: "16 17 21 12 16 7", key: "1gabdz" }],
        ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }]
      ]);
      var Lollipop = createLucideIcon("Lollipop", [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
        ["path", { d: "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0", key: "107gwy" }]
      ]);
      var Luggage = createLucideIcon("Luggage", [
        [
          "path",
          {
            d: "M6 20h0a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h0",
            key: "1h5fkc"
          }
        ],
        ["path", { d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14", key: "1l99gc" }],
        ["path", { d: "M10 20h4", key: "ni2waw" }],
        ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
        ["circle", { cx: "8", cy: "20", r: "2", key: "ckkr5m" }]
      ]);
      var MSquare = createLucideIcon("MSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 16V8l4 4 4-4v8", key: "141u4e" }]
      ]);
      var Magnet = createLucideIcon("Magnet", [
        [
          "path",
          {
            d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15",
            key: "1i3lhw"
          }
        ],
        ["path", { d: "m5 8 4 4", key: "j6kj7e" }],
        ["path", { d: "m12 15 4 4", key: "lnac28" }]
      ]);
      var MailCheck = createLucideIcon("MailCheck", [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
      ]);
      var MailMinus = createLucideIcon("MailMinus", [
        ["path", { d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "fuxbkv" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }]
      ]);
      var MailOpen = createLucideIcon("MailOpen", [
        [
          "path",
          {
            d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z",
            key: "1jhwl8"
          }
        ],
        ["path", { d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10", key: "1qfld7" }]
      ]);
      var MailPlus = createLucideIcon("MailPlus", [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }]
      ]);
      var MailQuestion = createLucideIcon("MailQuestion", [
        ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        [
          "path",
          {
            d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
            key: "7z9rxb"
          }
        ],
        ["path", { d: "M20 22v.01", key: "12bgn6" }]
      ]);
      var MailSearch = createLucideIcon("MailSearch", [
        ["path", { d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5", key: "w80f2v" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z", key: "mgbru4" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
      ]);
      var MailWarning = createLucideIcon("MailWarning", [
        ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M20 14v4", key: "1hm744" }],
        ["path", { d: "M20 22v.01", key: "12bgn6" }]
      ]);
      var MailX = createLucideIcon("MailX", [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9", key: "1j9vog" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "m17 17 4 4", key: "1b3523" }],
        ["path", { d: "m21 17-4 4", key: "uinynz" }]
      ]);
      var Mail = createLucideIcon("Mail", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }]
      ]);
      var Mailbox = createLucideIcon("Mailbox", [
        [
          "path",
          {
            d: "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z",
            key: "1lbycx"
          }
        ],
        ["polyline", { points: "15,9 18,9 18,11", key: "1pm9c0" }],
        ["path", { d: "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2v0", key: "n6nfvi" }],
        ["line", { x1: "6", x2: "7", y1: "10", y2: "10", key: "1e2scm" }]
      ]);
      var Mails = createLucideIcon("Mails", [
        ["rect", { width: "16", height: "13", x: "6", y: "4", rx: "2", key: "1drq3f" }],
        ["path", { d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7", key: "xn252p" }],
        ["path", { d: "M2 8v11c0 1.1.9 2 2 2h14", key: "n13cji" }]
      ]);
      var MapPinOff = createLucideIcon("MapPinOff", [
        [
          "path",
          { d: "M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5", key: "12a8pk" }
        ],
        [
          "path",
          {
            d: "M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82",
            key: "1r9f6y"
          }
        ],
        [
          "path",
          { d: "M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13", key: "erynq7" }
        ],
        ["path", { d: "M14.9 9.25a3 3 0 0 0-2.15-2.16", key: "1hwwmx" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var MapPin = createLucideIcon("MapPin", [
        ["path", { d: "M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z", key: "2oe9fu" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
      ]);
      var MapPinned = createLucideIcon("MapPinned", [
        ["path", { d: "M18 8c0 4.5-6 9-6 9s-6-4.5-6-9a6 6 0 0 1 12 0", key: "yrbn30" }],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        [
          "path",
          {
            d: "M8.835 14H5a1 1 0 0 0-.9.7l-2 6c-.1.1-.1.2-.1.3 0 .6.4 1 1 1h18c.6 0 1-.4 1-1 0-.1 0-.2-.1-.3l-2-6a1 1 0 0 0-.9-.7h-3.835",
            key: "112zkj"
          }
        ]
      ]);
      var Map2 = createLucideIcon("Map", [
        ["polygon", { points: "3 6 9 3 15 6 21 3 21 18 15 21 9 18 3 21", key: "ok2ie8" }],
        ["line", { x1: "9", x2: "9", y1: "3", y2: "18", key: "w34qz5" }],
        ["line", { x1: "15", x2: "15", y1: "6", y2: "21", key: "volv9a" }]
      ]);
      var Martini = createLucideIcon("Martini", [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M12 11v11", key: "ur9y6a" }],
        ["path", { d: "m19 3-7 8-7-8Z", key: "1sgpiw" }]
      ]);
      var Maximize2 = createLucideIcon("Maximize2", [
        ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
        ["polyline", { points: "9 21 3 21 3 15", key: "1avn1i" }],
        ["line", { x1: "21", x2: "14", y1: "3", y2: "10", key: "ota7mn" }],
        ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
      ]);
      var Maximize = createLucideIcon("Maximize", [
        ["path", { d: "M8 3H5a2 2 0 0 0-2 2v3", key: "1dcmit" }],
        ["path", { d: "M21 8V5a2 2 0 0 0-2-2h-3", key: "1e4gt3" }],
        ["path", { d: "M3 16v3a2 2 0 0 0 2 2h3", key: "wsl5sc" }],
        ["path", { d: "M16 21h3a2 2 0 0 0 2-2v-3", key: "18trek" }]
      ]);
      var Medal = createLucideIcon("Medal", [
        [
          "path",
          {
            d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15",
            key: "143lza"
          }
        ],
        ["path", { d: "M11 12 5.12 2.2", key: "qhuxz6" }],
        ["path", { d: "m13 12 5.88-9.8", key: "hbye0f" }],
        ["path", { d: "M8 7h8", key: "i86dvs" }],
        ["circle", { cx: "12", cy: "17", r: "5", key: "qbz8iq" }],
        ["path", { d: "M12 18v-2h-.5", key: "fawc4q" }]
      ]);
      var MegaphoneOff = createLucideIcon("MegaphoneOff", [
        ["path", { d: "M9.26 9.26 3 11v3l14.14 3.14", key: "3429n" }],
        ["path", { d: "M21 15.34V6l-7.31 2.03", key: "4o1dh8" }],
        ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Megaphone = createLucideIcon("Megaphone", [
        ["path", { d: "m3 11 18-5v12L3 14v-3z", key: "n962bs" }],
        ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }]
      ]);
      var Meh = createLucideIcon("Meh", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "8", x2: "16", y1: "15", y2: "15", key: "1xb1d9" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ]);
      var MemoryStick = createLucideIcon("MemoryStick", [
        ["path", { d: "M6 19v-3", key: "1nvgqn" }],
        ["path", { d: "M10 19v-3", key: "iu8nkm" }],
        ["path", { d: "M14 19v-3", key: "kcehxu" }],
        ["path", { d: "M18 19v-3", key: "1vh91z" }],
        ["path", { d: "M8 11V9", key: "63erz4" }],
        ["path", { d: "M16 11V9", key: "fru6f3" }],
        ["path", { d: "M12 11V9", key: "ha00sb" }],
        ["path", { d: "M2 15h20", key: "16ne18" }],
        [
          "path",
          {
            d: "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z",
            key: "lhddv3"
          }
        ]
      ]);
      var MenuSquare = createLucideIcon("MenuSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 8h10", key: "1jw688" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M7 16h10", key: "wp8him" }]
      ]);
      var Menu = createLucideIcon("Menu", [
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
        ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
        ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }]
      ]);
      var Merge = createLucideIcon("Merge", [
        ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
        ["path", { d: "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22", key: "1hyw0i" }],
        ["path", { d: "m20 22-5-5", key: "1m27yz" }]
      ]);
      var MessageCircleCode = createLucideIcon("MessageCircleCode", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "m10 10-2 2 2 2", key: "p6et6i" }],
        ["path", { d: "m14 10 2 2-2 2", key: "1kkmpt" }]
      ]);
      var MessageCircleDashed = createLucideIcon("MessageCircleDashed", [
        ["path", { d: "M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1", key: "16ll65" }],
        ["path", { d: "M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1", key: "1nq77a" }],
        ["path", { d: "M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5", key: "1sf7wn" }],
        ["path", { d: "M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1", key: "x1hs5g" }],
        ["path", { d: "M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1", key: "19m18z" }],
        ["path", { d: "M3.5 17.5 2 22l4.5-1.5", key: "1f36qi" }],
        ["path", { d: "M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5", key: "1vz3ju" }],
        ["path", { d: "M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1", key: "19f9do" }]
      ]);
      var MessageCircleHeart = createLucideIcon("MessageCircleHeart", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        [
          "path",
          {
            d: "M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7",
            key: "43lnbm"
          }
        ]
      ]);
      var MessageCircleMore = createLucideIcon("MessageCircleMore", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }]
      ]);
      var MessageCircleOff = createLucideIcon("MessageCircleOff", [
        ["path", { d: "M20.5 14.9A9 9 0 0 0 9.1 3.5", key: "1iebmn" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M5.6 5.6C3 8.3 2.2 12.5 4 16l-2 6 6-2c3.4 1.8 7.6 1.1 10.3-1.7", key: "1ov8ce" }]
      ]);
      var MessageCirclePlus = createLucideIcon("MessageCirclePlus", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ]);
      var MessageCircleQuestion = createLucideIcon("MessageCircleQuestion", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var MessageCircleReply = createLucideIcon("MessageCircleReply", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }],
        ["path", { d: "M7 12h7a2 2 0 0 1 2 2v1", key: "1gheu4" }]
      ]);
      var MessageCircleWarning = createLucideIcon("MessageCircleWarning", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M12 8v4", key: "1got3b" }],
        ["path", { d: "M12 16h.01", key: "1drbdi" }]
      ]);
      var MessageCircleX = createLucideIcon("MessageCircleX", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ]);
      var MessageCircle = createLucideIcon("MessageCircle", [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }]
      ]);
      var MessageSquareCode = createLucideIcon("MessageSquareCode", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "m10 8-2 2 2 2", key: "19bv1o" }],
        ["path", { d: "m14 8 2 2-2 2", key: "1whylv" }]
      ]);
      var MessageSquareDashed = createLucideIcon("MessageSquareDashed", [
        ["path", { d: "M3 6V5c0-1.1.9-2 2-2h2", key: "9usibi" }],
        ["path", { d: "M11 3h3", key: "1c3ji7" }],
        ["path", { d: "M18 3h1c1.1 0 2 .9 2 2", key: "19esxn" }],
        ["path", { d: "M21 9v2", key: "p14lih" }],
        ["path", { d: "M21 15c0 1.1-.9 2-2 2h-1", key: "1fo1j8" }],
        ["path", { d: "M14 17h-3", key: "1w4p2m" }],
        ["path", { d: "m7 17-4 4v-5", key: "ph9x1h" }],
        ["path", { d: "M3 12v-2", key: "856n1q" }]
      ]);
      var MessageSquareDiff = createLucideIcon("MessageSquareDiff", [
        ["path", { d: "m5 19-2 2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2", key: "1xuzuj" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }],
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }]
      ]);
      var MessageSquareDot = createLucideIcon("MessageSquareDot", [
        ["path", { d: "M11.7 3H5a2 2 0 0 0-2 2v16l4-4h12a2 2 0 0 0 2-2v-2.7", key: "uodpkb" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }]
      ]);
      var MessageSquareHeart = createLucideIcon("MessageSquareHeart", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        [
          "path",
          {
            d: "M14.8 7.5a1.84 1.84 0 0 0-2.6 0l-.2.3-.3-.3a1.84 1.84 0 1 0-2.4 2.8L12 13l2.7-2.7c.9-.9.8-2.1.1-2.8",
            key: "1blaws"
          }
        ]
      ]);
      var MessageSquareMore = createLucideIcon("MessageSquareMore", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }]
      ]);
      var MessageSquareOff = createLucideIcon("MessageSquareOff", [
        ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M3.6 3.6c-.4.3-.6.8-.6 1.4v16l4-4h10", key: "pwpm4a" }]
      ]);
      var MessageSquarePlus = createLucideIcon("MessageSquarePlus", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ]);
      var MessageSquareQuote = createLucideIcon("MessageSquareQuote", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M8 12a2 2 0 0 0 2-2V8H8", key: "1jfesj" }],
        ["path", { d: "M14 12a2 2 0 0 0 2-2V8h-2", key: "1dq9mh" }]
      ]);
      var MessageSquareReply = createLucideIcon("MessageSquareReply", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "m10 7-3 3 3 3", key: "1eugdv" }],
        ["path", { d: "M17 13v-1a2 2 0 0 0-2-2H7", key: "ernfh3" }]
      ]);
      var MessageSquareShare = createLucideIcon("MessageSquareShare", [
        ["path", { d: "M21 12v3a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h7", key: "tqtdkg" }],
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "m16 8 5-5", key: "15mbrl" }]
      ]);
      var MessageSquareText = createLucideIcon("MessageSquareText", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M13 8H7", key: "14i4kc" }],
        ["path", { d: "M17 12H7", key: "16if0g" }]
      ]);
      var MessageSquareWarning = createLucideIcon("MessageSquareWarning", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M12 7v2", key: "stiyo7" }],
        ["path", { d: "M12 13h.01", key: "y0uutt" }]
      ]);
      var MessageSquareX = createLucideIcon("MessageSquareX", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
        ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
      ]);
      var MessageSquare = createLucideIcon("MessageSquare", [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
      ]);
      var MessagesSquare = createLucideIcon("MessagesSquare", [
        ["path", { d: "M14 9a2 2 0 0 1-2 2H6l-4 4V4c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v5Z", key: "16vlm8" }],
        ["path", { d: "M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1", key: "1cx29u" }]
      ]);
      var Mic2 = createLucideIcon("Mic2", [
        ["path", { d: "m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12", key: "zoua8r" }],
        ["circle", { cx: "17", cy: "7", r: "5", key: "1fomce" }]
      ]);
      var MicOff = createLucideIcon("MicOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2", key: "80xlxr" }],
        ["path", { d: "M5 10v2a7 7 0 0 0 12 5", key: "p2k8kg" }],
        ["path", { d: "M15 9.34V5a3 3 0 0 0-5.68-1.33", key: "1gzdoj" }],
        ["path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12", key: "r2i35w" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
      ]);
      var Mic = createLucideIcon("Mic", [
        ["path", { d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z", key: "131961" }],
        ["path", { d: "M19 10v2a7 7 0 0 1-14 0v-2", key: "1vc78b" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
      ]);
      var Microscope = createLucideIcon("Microscope", [
        ["path", { d: "M6 18h8", key: "1borvv" }],
        ["path", { d: "M3 22h18", key: "8prr45" }],
        ["path", { d: "M14 22a7 7 0 1 0 0-14h-1", key: "1jwaiy" }],
        ["path", { d: "M9 14h2", key: "197e7h" }],
        ["path", { d: "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z", key: "1bmzmy" }],
        ["path", { d: "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3", key: "1drr47" }]
      ]);
      var Microwave = createLucideIcon("Microwave", [
        ["rect", { width: "20", height: "15", x: "2", y: "4", rx: "2", key: "2no95f" }],
        ["rect", { width: "8", height: "7", x: "6", y: "8", rx: "1", key: "zh9wx" }],
        ["path", { d: "M18 8v7", key: "o5zi4n" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["path", { d: "M18 19v2", key: "1dawf0" }]
      ]);
      var Milestone = createLucideIcon("Milestone", [
        ["path", { d: "M18 6H5a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h13l4-3.5L18 6Z", key: "1mp5s7" }],
        ["path", { d: "M12 13v8", key: "1l5pq0" }],
        ["path", { d: "M12 3v3", key: "1n5kay" }]
      ]);
      var MilkOff = createLucideIcon("MilkOff", [
        ["path", { d: "M8 2h8", key: "1ssgc1" }],
        [
          "path",
          {
            d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3",
            key: "y0ejgx"
          }
        ],
        ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435", key: "iaxqsy" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Milk = createLucideIcon("Milk", [
        ["path", { d: "M8 2h8", key: "1ssgc1" }],
        [
          "path",
          {
            d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2",
            key: "qtp12x"
          }
        ],
        ["path", { d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "ygeh44" }]
      ]);
      var Minimize2 = createLucideIcon("Minimize2", [
        ["polyline", { points: "4 14 10 14 10 20", key: "11kfnr" }],
        ["polyline", { points: "20 10 14 10 14 4", key: "rlmsce" }],
        ["line", { x1: "14", x2: "21", y1: "10", y2: "3", key: "o5lafz" }],
        ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
      ]);
      var Minimize = createLucideIcon("Minimize", [
        ["path", { d: "M8 3v3a2 2 0 0 1-2 2H3", key: "hohbtr" }],
        ["path", { d: "M21 8h-3a2 2 0 0 1-2-2V3", key: "5jw1f3" }],
        ["path", { d: "M3 16h3a2 2 0 0 1 2 2v3", key: "198tvr" }],
        ["path", { d: "M16 21v-3a2 2 0 0 1 2-2h3", key: "ph8mxp" }]
      ]);
      var MinusCircle = createLucideIcon("MinusCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ]);
      var MinusSquare = createLucideIcon("MinusSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ]);
      var Minus = createLucideIcon("Minus", [["path", { d: "M5 12h14", key: "1ays0h" }]]);
      var MonitorCheck = createLucideIcon("MonitorCheck", [
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorDot = createLucideIcon("MonitorDot", [
        ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
        ["path", { d: "M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9", key: "1fet9y" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorDown = createLucideIcon("MonitorDown", [
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "m15 10-3 3-3-3", key: "lzhmyn" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorOff = createLucideIcon("MonitorOff", [
        ["path", { d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2", key: "k0q8oc" }],
        ["path", { d: "M22 15V5a2 2 0 0 0-2-2H9", key: "cp1ac0" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var MonitorPause = createLucideIcon("MonitorPause", [
        ["path", { d: "M10 13V7", key: "1u13u9" }],
        ["path", { d: "M14 13V7", key: "1vj9om" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorPlay = createLucideIcon("MonitorPlay", [
        ["path", { d: "m10 7 5 3-5 3Z", key: "29ljg6" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorSmartphone = createLucideIcon("MonitorSmartphone", [
        ["path", { d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8", key: "10dyio" }],
        ["path", { d: "M10 19v-3.96 3.15", key: "1irgej" }],
        ["path", { d: "M7 19h5", key: "qswx4l" }],
        ["rect", { width: "6", height: "10", x: "16", y: "12", rx: "2", key: "1egngj" }]
      ]);
      var MonitorSpeaker = createLucideIcon("MonitorSpeaker", [
        ["path", { d: "M5.5 20H8", key: "1k40s5" }],
        ["path", { d: "M17 9h.01", key: "1j24nn" }],
        ["rect", { width: "10", height: "16", x: "12", y: "4", rx: "2", key: "ixliua" }],
        ["path", { d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4", key: "1mp6e1" }],
        ["circle", { cx: "17", cy: "15", r: "1", key: "tqvash" }]
      ]);
      var MonitorStop = createLucideIcon("MonitorStop", [
        ["rect", { x: "9", y: "7", width: "6", height: "6", key: "4xvc6r" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorUp = createLucideIcon("MonitorUp", [
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var MonitorX = createLucideIcon("MonitorX", [
        ["path", { d: "m14.5 12.5-5-5", key: "1jahn5" }],
        ["path", { d: "m9.5 12.5 5-5", key: "1k2t7b" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ]);
      var Monitor = createLucideIcon("Monitor", [
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["line", { x1: "8", x2: "16", y1: "21", y2: "21", key: "1svkeh" }],
        ["line", { x1: "12", x2: "12", y1: "17", y2: "21", key: "vw1qmm" }]
      ]);
      var MoonStar = createLucideIcon("MoonStar", [
        ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }],
        ["path", { d: "M19 3v4", key: "vgv24u" }],
        ["path", { d: "M21 5h-4", key: "1wcg1f" }]
      ]);
      var Moon = createLucideIcon("Moon", [
        ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }]
      ]);
      var MoreHorizontal = createLucideIcon("MoreHorizontal", [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
        ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }]
      ]);
      var MoreVertical = createLucideIcon("MoreVertical", [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }]
      ]);
      var MountainSnow = createLucideIcon("MountainSnow", [
        ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }],
        [
          "path",
          { d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19", key: "1pvmmp" }
        ]
      ]);
      var Mountain = createLucideIcon("Mountain", [
        ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }]
      ]);
      var MousePointer2 = createLucideIcon("MousePointer2", [
        ["path", { d: "m4 4 7.07 17 2.51-7.39L21 11.07z", key: "1vqm48" }]
      ]);
      var MousePointerClick = createLucideIcon("MousePointerClick", [
        ["path", { d: "m9 9 5 12 1.8-5.2L21 14Z", key: "1b76lo" }],
        ["path", { d: "M7.2 2.2 8 5.1", key: "1cfko1" }],
        ["path", { d: "m5.1 8-2.9-.8", key: "1go3kf" }],
        ["path", { d: "M14 4.1 12 6", key: "ita8i4" }],
        ["path", { d: "m6 12-1.9 2", key: "mnht97" }]
      ]);
      var MousePointerSquareDashed = createLucideIcon("MousePointerSquareDashed", [
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "m12 12 4 10 1.7-4.3L22 16Z", key: "64ilsv" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M9 21h2", key: "1qve2z" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M21 9v2", key: "p14lih" }],
        ["path", { d: "M3 14v1", key: "vnatye" }]
      ]);
      var MousePointerSquare = createLucideIcon("MousePointerSquare", [
        ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }],
        ["path", { d: "m12 12 4 10 1.7-4.3L22 16Z", key: "64ilsv" }]
      ]);
      var MousePointer = createLucideIcon("MousePointer", [
        ["path", { d: "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z", key: "y2ucgo" }],
        ["path", { d: "m13 13 6 6", key: "1nhxnf" }]
      ]);
      var Mouse = createLucideIcon("Mouse", [
        ["rect", { x: "5", y: "2", width: "14", height: "20", rx: "7", key: "11ol66" }],
        ["path", { d: "M12 6v4", key: "16clxf" }]
      ]);
      var Move3d = createLucideIcon("Move3d", [
        ["path", { d: "M5 3v16h16", key: "1mqmf9" }],
        ["path", { d: "m5 19 6-6", key: "jh6hbb" }],
        ["path", { d: "m2 6 3-3 3 3", key: "tkyvxa" }],
        ["path", { d: "m18 16 3 3-3 3", key: "1d4glt" }]
      ]);
      var MoveDiagonal2 = createLucideIcon("MoveDiagonal2", [
        ["polyline", { points: "5 11 5 5 11 5", key: "ncfzxk" }],
        ["polyline", { points: "19 13 19 19 13 19", key: "1mk7hk" }],
        ["line", { x1: "5", x2: "19", y1: "5", y2: "19", key: "mcyte3" }]
      ]);
      var MoveDiagonal = createLucideIcon("MoveDiagonal", [
        ["polyline", { points: "13 5 19 5 19 11", key: "11219e" }],
        ["polyline", { points: "11 19 5 19 5 13", key: "sfq3wq" }],
        ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }]
      ]);
      var MoveDownLeft = createLucideIcon("MoveDownLeft", [
        ["path", { d: "M11 19H5V13", key: "1akmht" }],
        ["path", { d: "M19 5L5 19", key: "72u4yj" }]
      ]);
      var MoveDownRight = createLucideIcon("MoveDownRight", [
        ["path", { d: "M19 13V19H13", key: "10vkzq" }],
        ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
      ]);
      var MoveDown = createLucideIcon("MoveDown", [
        ["path", { d: "M8 18L12 22L16 18", key: "cskvfv" }],
        ["path", { d: "M12 2V22", key: "r89rzk" }]
      ]);
      var MoveHorizontal = createLucideIcon("MoveHorizontal", [
        ["polyline", { points: "18 8 22 12 18 16", key: "1hqrds" }],
        ["polyline", { points: "6 8 2 12 6 16", key: "f0ernq" }],
        ["line", { x1: "2", x2: "22", y1: "12", y2: "12", key: "1dnqot" }]
      ]);
      var MoveLeft = createLucideIcon("MoveLeft", [
        ["path", { d: "M6 8L2 12L6 16", key: "kyvwex" }],
        ["path", { d: "M2 12H22", key: "1m8cig" }]
      ]);
      var MoveRight = createLucideIcon("MoveRight", [
        ["path", { d: "M18 8L22 12L18 16", key: "1r0oui" }],
        ["path", { d: "M2 12H22", key: "1m8cig" }]
      ]);
      var MoveUpLeft = createLucideIcon("MoveUpLeft", [
        ["path", { d: "M5 11V5H11", key: "3q78g9" }],
        ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
      ]);
      var MoveUpRight = createLucideIcon("MoveUpRight", [
        ["path", { d: "M13 5H19V11", key: "1n1gyv" }],
        ["path", { d: "M19 5L5 19", key: "72u4yj" }]
      ]);
      var MoveUp = createLucideIcon("MoveUp", [
        ["path", { d: "M8 6L12 2L16 6", key: "1yvkyx" }],
        ["path", { d: "M12 2V22", key: "r89rzk" }]
      ]);
      var MoveVertical = createLucideIcon("MoveVertical", [
        ["polyline", { points: "8 18 12 22 16 18", key: "1uutw3" }],
        ["polyline", { points: "8 6 12 2 16 6", key: "d60sxy" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }]
      ]);
      var Move = createLucideIcon("Move", [
        ["polyline", { points: "5 9 2 12 5 15", key: "1r5uj5" }],
        ["polyline", { points: "9 5 12 2 15 5", key: "5v383o" }],
        ["polyline", { points: "15 19 12 22 9 19", key: "g7qi8m" }],
        ["polyline", { points: "19 9 22 12 19 15", key: "tpp73q" }],
        ["line", { x1: "2", x2: "22", y1: "12", y2: "12", key: "1dnqot" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }]
      ]);
      var Music2 = createLucideIcon("Music2", [
        ["circle", { cx: "8", cy: "18", r: "4", key: "1fc0mg" }],
        ["path", { d: "M12 18V2l7 4", key: "g04rme" }]
      ]);
      var Music3 = createLucideIcon("Music3", [
        ["circle", { cx: "12", cy: "18", r: "4", key: "m3r9ws" }],
        ["path", { d: "M16 18V2", key: "40x2m5" }]
      ]);
      var Music4 = createLucideIcon("Music4", [
        ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
        ["path", { d: "m9 9 12-2", key: "1e64n2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
      ]);
      var Music = createLucideIcon("Music", [
        ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
      ]);
      var Navigation2Off = createLucideIcon("Navigation2Off", [
        ["path", { d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17", key: "qoq2o2" }],
        ["path", { d: "M14.53 8.88 12 2l-1.17 3.17", key: "k3sjzy" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Navigation2 = createLucideIcon("Navigation2", [
        ["polygon", { points: "12 2 19 21 12 17 5 21 12 2", key: "x8c0qg" }]
      ]);
      var NavigationOff = createLucideIcon("NavigationOff", [
        ["path", { d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43", key: "1vdtb7" }],
        ["path", { d: "M17.39 11.73 22 2l-9.73 4.61", key: "tya3r6" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Navigation = createLucideIcon("Navigation", [
        ["polygon", { points: "3 11 22 2 13 21 11 13 3 11", key: "1ltx0t" }]
      ]);
      var Network = createLucideIcon("Network", [
        ["rect", { x: "16", y: "16", width: "6", height: "6", rx: "1", key: "4q2zg0" }],
        ["rect", { x: "2", y: "16", width: "6", height: "6", rx: "1", key: "8cvhb9" }],
        ["rect", { x: "9", y: "2", width: "6", height: "6", rx: "1", key: "1egb70" }],
        ["path", { d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3", key: "1jsf9p" }],
        ["path", { d: "M12 12V8", key: "2874zd" }]
      ]);
      var Newspaper = createLucideIcon("Newspaper", [
        [
          "path",
          {
            d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2",
            key: "7pis2x"
          }
        ],
        ["path", { d: "M18 14h-8", key: "sponae" }],
        ["path", { d: "M15 18h-5", key: "95g1m2" }],
        ["path", { d: "M10 6h8v4h-8V6Z", key: "smlsk5" }]
      ]);
      var Nfc = createLucideIcon("Nfc", [
        ["path", { d: "M6 8.32a7.43 7.43 0 0 1 0 7.36", key: "9iaqei" }],
        ["path", { d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "1yha7l" }],
        ["path", { d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "4iu2gk" }],
        ["path", { d: "M16.37 2a20.16 20.16 0 0 1 0 20", key: "sap9u2" }]
      ]);
      var NotebookPen = createLucideIcon("NotebookPen", [
        ["path", { d: "M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4", key: "re6nr2" }],
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["path", { d: "M18.4 2.6a2.17 2.17 0 0 1 3 3L16 11l-4 1 1-4Z", key: "1dba1m" }]
      ]);
      var NotebookTabs = createLucideIcon("NotebookTabs", [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M15 2v20", key: "dcj49h" }],
        ["path", { d: "M15 7h5", key: "1xj5lc" }],
        ["path", { d: "M15 12h5", key: "w5shd9" }],
        ["path", { d: "M15 17h5", key: "1qaofu" }]
      ]);
      var NotebookText = createLucideIcon("NotebookText", [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M9.5 8h5", key: "11mslq" }],
        ["path", { d: "M9.5 12H16", key: "ktog6x" }],
        ["path", { d: "M9.5 16H14", key: "p1seyn" }]
      ]);
      var Notebook = createLucideIcon("Notebook", [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M16 2v20", key: "rotuqe" }]
      ]);
      var NotepadTextDashed = createLucideIcon("NotepadTextDashed", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v2", key: "j91f56" }],
        ["path", { d: "M20 12v2", key: "w8o0tu" }],
        ["path", { d: "M20 18v2a2 2 0 0 1-2 2h-1", key: "1c9ggx" }],
        ["path", { d: "M13 22h-2", key: "191ugt" }],
        ["path", { d: "M7 22H6a2 2 0 0 1-2-2v-2", key: "1rt9px" }],
        ["path", { d: "M4 14v-2", key: "1v0sqh" }],
        ["path", { d: "M4 8V6a2 2 0 0 1 2-2h2", key: "1mwabg" }],
        ["path", { d: "M8 10h6", key: "3oa6kw" }],
        ["path", { d: "M8 14h8", key: "1fgep2" }],
        ["path", { d: "M8 18h5", key: "17enja" }]
      ]);
      var NotepadText = createLucideIcon("NotepadText", [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "16", height: "18", x: "4", y: "4", rx: "2", key: "1u9h20" }],
        ["path", { d: "M8 10h6", key: "3oa6kw" }],
        ["path", { d: "M8 14h8", key: "1fgep2" }],
        ["path", { d: "M8 18h5", key: "17enja" }]
      ]);
      var NutOff = createLucideIcon("NutOff", [
        ["path", { d: "M12 4V2", key: "1k5q1u" }],
        [
          "path",
          {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939",
            key: "1xcvy9"
          }
        ],
        ["path", { d: "M19 10v3.343", key: "163tfc" }],
        [
          "path",
          {
            d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192",
            key: "17914v"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Nut = createLucideIcon("Nut", [
        ["path", { d: "M12 4V2", key: "1k5q1u" }],
        [
          "path",
          {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4",
            key: "1tgyif"
          }
        ],
        [
          "path",
          {
            d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z",
            key: "tnsqj"
          }
        ]
      ]);
      var Octagon = createLucideIcon("Octagon", [
        [
          "polygon",
          {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
          }
        ]
      ]);
      var Option = createLucideIcon("Option", [
        ["path", { d: "M3 3h6l6 18h6", key: "ph9rgk" }],
        ["path", { d: "M14 3h7", key: "16f0ms" }]
      ]);
      var Orbit = createLucideIcon("Orbit", [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
        ["path", { d: "M10.4 21.9a10 10 0 0 0 9.941-15.416", key: "eohfx2" }],
        ["path", { d: "M13.5 2.1a10 10 0 0 0-9.841 15.416", key: "19pvbm" }]
      ]);
      var Outdent = createLucideIcon("Outdent", [
        ["polyline", { points: "7 8 3 12 7 16", key: "2j60jr" }],
        ["line", { x1: "21", x2: "11", y1: "12", y2: "12", key: "1fxxak" }],
        ["line", { x1: "21", x2: "11", y1: "6", y2: "6", key: "asgu94" }],
        ["line", { x1: "21", x2: "11", y1: "18", y2: "18", key: "13dsj7" }]
      ]);
      var Package2 = createLucideIcon("Package2", [
        ["path", { d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z", key: "1ront0" }],
        ["path", { d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9", key: "19h2x1" }],
        ["path", { d: "M12 3v6", key: "1holv5" }]
      ]);
      var PackageCheck = createLucideIcon("PackageCheck", [
        ["path", { d: "m16 16 2 2 4-4", key: "gfu2re" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ]);
      var PackageMinus = createLucideIcon("PackageMinus", [
        ["path", { d: "M16 16h6", key: "100bgy" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ]);
      var PackageOpen = createLucideIcon("PackageOpen", [
        [
          "path",
          {
            d: "M20.91 8.84 8.56 2.23a1.93 1.93 0 0 0-1.81 0L3.1 4.13a2.12 2.12 0 0 0-.05 3.69l12.22 6.93a2 2 0 0 0 1.94 0L21 12.51a2.12 2.12 0 0 0-.09-3.67Z",
            key: "1vy178"
          }
        ],
        [
          "path",
          {
            d: "m3.09 8.84 12.35-6.61a1.93 1.93 0 0 1 1.81 0l3.65 1.9a2.12 2.12 0 0 1 .1 3.69L8.73 14.75a2 2 0 0 1-1.94 0L3 12.51a2.12 2.12 0 0 1 .09-3.67Z",
            key: "s3bv25"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "13", key: "1o4xyi" }],
        [
          "path",
          {
            d: "M20 13.5v3.37a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13.5",
            key: "1na2nq"
          }
        ]
      ]);
      var PackagePlus = createLucideIcon("PackagePlus", [
        ["path", { d: "M16 16h6", key: "100bgy" }],
        ["path", { d: "M19 13v6", key: "85cyf1" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ]);
      var PackageSearch = createLucideIcon("PackageSearch", [
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
        ["circle", { cx: "18.5", cy: "15.5", r: "2.5", key: "b5zd12" }],
        ["path", { d: "M20.27 17.27 22 19", key: "1l4muz" }]
      ]);
      var PackageX = createLucideIcon("PackageX", [
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
        ["path", { d: "m17 13 5 5m-5 0 5-5", key: "im3w4b" }]
      ]);
      var Package = createLucideIcon("Package", [
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        [
          "path",
          {
            d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
            key: "hh9hay"
          }
        ],
        ["path", { d: "m3.3 7 8.7 5 8.7-5", key: "g66t2b" }],
        ["path", { d: "M12 22V12", key: "d0xqtd" }]
      ]);
      var PaintBucket = createLucideIcon("PaintBucket", [
        [
          "path",
          { d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z", key: "irua1i" }
        ],
        ["path", { d: "m5 2 5 5", key: "1lls2c" }],
        ["path", { d: "M2 13h15", key: "1hkzvu" }],
        ["path", { d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z", key: "xk76lq" }]
      ]);
      var PaintRoller = createLucideIcon("PaintRoller", [
        ["rect", { width: "16", height: "6", x: "2", y: "2", rx: "2", key: "jcyz7m" }],
        ["path", { d: "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2", key: "1b9h7c" }],
        ["rect", { width: "4", height: "6", x: "8", y: "16", rx: "1", key: "d6e7yl" }]
      ]);
      var Paintbrush2 = createLucideIcon("Paintbrush2", [
        [
          "path",
          { d: "M14 19.9V16h3a2 2 0 0 0 2-2v-2H5v2c0 1.1.9 2 2 2h3v3.9a2 2 0 1 0 4 0Z", key: "1c8kta" }
        ],
        ["path", { d: "M6 12V2h12v10", key: "1esbnf" }],
        ["path", { d: "M14 2v4", key: "qmzblu" }],
        ["path", { d: "M10 2v2", key: "7u0qdc" }]
      ]);
      var Paintbrush = createLucideIcon("Paintbrush", [
        [
          "path",
          {
            d: "M18.37 2.63 14 7l-1.59-1.59a2 2 0 0 0-2.82 0L8 7l9 9 1.59-1.59a2 2 0 0 0 0-2.82L17 10l4.37-4.37a2.12 2.12 0 1 0-3-3Z",
            key: "m6k5sh"
          }
        ],
        ["path", { d: "M9 8c-2 3-4 3.5-7 4l8 10c2-1 6-5 6-7", key: "arzq70" }],
        ["path", { d: "M14.5 17.5 4.5 15", key: "s7fvrz" }]
      ]);
      var Palette = createLucideIcon("Palette", [
        ["circle", { cx: "13.5", cy: "6.5", r: ".5", fill: "currentColor", key: "1okk4w" }],
        ["circle", { cx: "17.5", cy: "10.5", r: ".5", fill: "currentColor", key: "f64h9f" }],
        ["circle", { cx: "8.5", cy: "7.5", r: ".5", fill: "currentColor", key: "fotxhn" }],
        ["circle", { cx: "6.5", cy: "12.5", r: ".5", fill: "currentColor", key: "qy21gx" }],
        [
          "path",
          {
            d: "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",
            key: "12rzf8"
          }
        ]
      ]);
      var Palmtree = createLucideIcon("Palmtree", [
        ["path", { d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4", key: "foxbe7" }],
        [
          "path",
          { d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3", key: "18arnh" }
        ],
        [
          "path",
          {
            d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35z",
            key: "epoumf"
          }
        ],
        ["path", { d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14", key: "ft0feo" }]
      ]);
      var PanelBottomClose = createLucideIcon("PanelBottomClose", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "m15 8-3 3-3-3", key: "1oxy1z" }]
      ]);
      var PanelBottomDashed = createLucideIcon("PanelBottomDashed", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M14 15h1", key: "171nev" }],
        ["path", { d: "M19 15h2", key: "1vnucp" }],
        ["path", { d: "M3 15h2", key: "8bym0q" }],
        ["path", { d: "M9 15h1", key: "1tg3ks" }]
      ]);
      var PanelBottomOpen = createLucideIcon("PanelBottomOpen", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
      ]);
      var PanelBottom = createLucideIcon("PanelBottom", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }]
      ]);
      var PanelLeftClose = createLucideIcon("PanelLeftClose", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "m16 15-3-3 3-3", key: "14y99z" }]
      ]);
      var PanelLeftDashed = createLucideIcon("PanelLeftDashed", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 14v1", key: "askpd8" }],
        ["path", { d: "M9 19v2", key: "16tejx" }],
        ["path", { d: "M9 3v2", key: "1noubl" }],
        ["path", { d: "M9 9v1", key: "19ebxg" }]
      ]);
      var PanelLeftOpen = createLucideIcon("PanelLeftOpen", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "m14 9 3 3-3 3", key: "8010ee" }]
      ]);
      var PanelLeft = createLucideIcon("PanelLeft", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }]
      ]);
      var PanelRightClose = createLucideIcon("PanelRightClose", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["path", { d: "m8 9 3 3-3 3", key: "12hl5m" }]
      ]);
      var PanelRightDashed = createLucideIcon("PanelRightDashed", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 14v1", key: "ilsfch" }],
        ["path", { d: "M15 19v2", key: "1fst2f" }],
        ["path", { d: "M15 3v2", key: "z204g4" }],
        ["path", { d: "M15 9v1", key: "z2a8b1" }]
      ]);
      var PanelRightOpen = createLucideIcon("PanelRightOpen", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }]
      ]);
      var PanelRight = createLucideIcon("PanelRight", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ]);
      var PanelTopClose = createLucideIcon("PanelTopClose", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "m9 16 3-3 3 3", key: "1idcnm" }]
      ]);
      var PanelTopDashed = createLucideIcon("PanelTopDashed", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M14 9h1", key: "l0svgy" }],
        ["path", { d: "M19 9h2", key: "te2zfg" }],
        ["path", { d: "M3 9h2", key: "1h4ldw" }],
        ["path", { d: "M9 9h1", key: "15jzuz" }]
      ]);
      var PanelTopOpen = createLucideIcon("PanelTopOpen", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "m15 14-3 3-3-3", key: "g215vf" }]
      ]);
      var PanelTop = createLucideIcon("PanelTop", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }]
      ]);
      var PanelsLeftBottom = createLucideIcon("PanelsLeftBottom", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M9 15h12", key: "5ijen5" }]
      ]);
      var PanelsRightBottom = createLucideIcon("PanelsRightBottom", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h12", key: "1wkqb3" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ]);
      var PanelsTopLeft = createLucideIcon("PanelsTopLeft", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M9 21V9", key: "1oto5p" }]
      ]);
      var Paperclip = createLucideIcon("Paperclip", [
        [
          "path",
          {
            d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48",
            key: "1u3ebp"
          }
        ]
      ]);
      var Parentheses = createLucideIcon("Parentheses", [
        ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
        ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }]
      ]);
      var ParkingCircleOff = createLucideIcon("ParkingCircleOff", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m5 5 14 14", key: "11anup" }],
        ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
        ["path", { d: "M9 17v-2.34", key: "a9qo08" }]
      ]);
      var ParkingCircle = createLucideIcon("ParkingCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
      ]);
      var ParkingMeter = createLucideIcon("ParkingMeter", [
        ["path", { d: "M9 9a3 3 0 1 1 6 0", key: "jdoeu8" }],
        ["path", { d: "M12 12v3", key: "158kv8" }],
        ["path", { d: "M11 15h2", key: "199qp6" }],
        [
          "path",
          {
            d: "M19 9a7 7 0 1 0-13.6 2.3C6.4 14.4 8 19 8 19h8s1.6-4.6 2.6-7.7c.3-.8.4-1.5.4-2.3",
            key: "1l50wn"
          }
        ],
        ["path", { d: "M12 19v3", key: "npa21l" }]
      ]);
      var ParkingSquareOff = createLucideIcon("ParkingSquareOff", [
        ["path", { d: "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41", key: "9l1ft6" }],
        ["path", { d: "M3 8.7V19a2 2 0 0 0 2 2h10.3", key: "17knke" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
        ["path", { d: "M9 17v-2.3", key: "1jxgo2" }]
      ]);
      var ParkingSquare = createLucideIcon("ParkingSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
      ]);
      var PartyPopper = createLucideIcon("PartyPopper", [
        ["path", { d: "M5.8 11.3 2 22l10.7-3.79", key: "gwxi1d" }],
        ["path", { d: "M4 3h.01", key: "1vcuye" }],
        ["path", { d: "M22 8h.01", key: "1mrtc2" }],
        ["path", { d: "M15 2h.01", key: "1cjtqr" }],
        ["path", { d: "M22 20h.01", key: "1mrys2" }],
        [
          "path",
          {
            d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12v0c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10",
            key: "bpx1uq"
          }
        ],
        [
          "path",
          { d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11v0c-.11.7-.72 1.22-1.43 1.22H17", key: "1pd0s7" }
        ],
        [
          "path",
          { d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98v0C9.52 4.9 9 5.52 9 6.23V7", key: "zq5xbz" }
        ],
        [
          "path",
          {
            d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z",
            key: "4kbmks"
          }
        ]
      ]);
      var PauseCircle = createLucideIcon("PauseCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "10", x2: "10", y1: "15", y2: "9", key: "c1nkhi" }],
        ["line", { x1: "14", x2: "14", y1: "15", y2: "9", key: "h65svq" }]
      ]);
      var PauseOctagon = createLucideIcon("PauseOctagon", [
        ["path", { d: "M10 15V9", key: "1lckn7" }],
        ["path", { d: "M14 15V9", key: "1muqhk" }],
        [
          "path",
          { d: "M7.714 2h8.572L22 7.714v8.572L16.286 22H7.714L2 16.286V7.714L7.714 2z", key: "1m7qra" }
        ]
      ]);
      var Pause = createLucideIcon("Pause", [
        ["rect", { width: "4", height: "16", x: "6", y: "4", key: "iffhe4" }],
        ["rect", { width: "4", height: "16", x: "14", y: "4", key: "sjin7j" }]
      ]);
      var PawPrint = createLucideIcon("PawPrint", [
        ["circle", { cx: "11", cy: "4", r: "2", key: "vol9p0" }],
        ["circle", { cx: "18", cy: "8", r: "2", key: "17gozi" }],
        ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }],
        [
          "path",
          {
            d: "M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z",
            key: "1ydw1z"
          }
        ]
      ]);
      var PcCase = createLucideIcon("PcCase", [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", key: "1uq1d7" }],
        ["path", { d: "M15 14h.01", key: "1kp3bh" }],
        ["path", { d: "M9 6h6", key: "dgm16u" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ]);
      var PenLine = createLucideIcon("PenLine", [
        ["path", { d: "M12 20h9", key: "t2du7b" }],
        ["path", { d: "M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z", key: "ymcmye" }]
      ]);
      var PenTool = createLucideIcon("PenTool", [
        ["path", { d: "m12 19 7-7 3 3-7 7-3-3z", key: "rklqx2" }],
        ["path", { d: "m18 13-1.5-7.5L2 2l3.5 14.5L13 18l5-5z", key: "1et58u" }],
        ["path", { d: "m2 2 7.586 7.586", key: "etlp93" }],
        ["circle", { cx: "11", cy: "11", r: "2", key: "xmgehs" }]
      ]);
      var Pen = createLucideIcon("Pen", [
        ["path", { d: "M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z", key: "5qss01" }]
      ]);
      var PencilLine = createLucideIcon("PencilLine", [
        ["path", { d: "M12 20h9", key: "t2du7b" }],
        ["path", { d: "M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z", key: "ymcmye" }],
        ["path", { d: "m15 5 3 3", key: "1w25hb" }]
      ]);
      var PencilRuler = createLucideIcon("PencilRuler", [
        ["path", { d: "m15 5 4 4", key: "1mk7zo" }],
        [
          "path",
          { d: "M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13", key: "orapub" }
        ],
        ["path", { d: "m8 6 2-2", key: "115y1s" }],
        ["path", { d: "m2 22 5.5-1.5L21.17 6.83a2.82 2.82 0 0 0-4-4L3.5 16.5Z", key: "hes763" }],
        ["path", { d: "m18 16 2-2", key: "ee94s4" }],
        [
          "path",
          {
            d: "m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17",
            key: "cfq27r"
          }
        ]
      ]);
      var Pencil = createLucideIcon("Pencil", [
        ["path", { d: "M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z", key: "5qss01" }],
        ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
      ]);
      var Pentagon = createLucideIcon("Pentagon", [
        [
          "path",
          {
            d: "M3.5 8.7c-.7.5-1 1.4-.7 2.2l2.8 8.7c.3.8 1 1.4 1.9 1.4h9.1c.9 0 1.6-.6 1.9-1.4l2.8-8.7c.3-.8 0-1.7-.7-2.2l-7.4-5.3a2.1 2.1 0 0 0-2.4 0Z",
            key: "hsj90r"
          }
        ]
      ]);
      var PercentCircle = createLucideIcon("PercentCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ]);
      var PercentDiamond = createLucideIcon("PercentDiamond", [
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z",
            key: "1tpxz2"
          }
        ],
        ["path", { d: "M9.2 9.2h.01", key: "1b7bvt" }],
        ["path", { d: "m14.5 9.5-5 5", key: "17q4r4" }],
        ["path", { d: "M14.7 14.8h.01", key: "17nsh4" }]
      ]);
      var PercentSquare = createLucideIcon("PercentSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ]);
      var Percent = createLucideIcon("Percent", [
        ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }],
        ["circle", { cx: "6.5", cy: "6.5", r: "2.5", key: "4mh3h7" }],
        ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
      ]);
      var PersonStanding = createLucideIcon("PersonStanding", [
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
        ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
        ["path", { d: "M12 10v4", key: "1kjpxc" }]
      ]);
      var PhoneCall = createLucideIcon("PhoneCall", [
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ],
        ["path", { d: "M14.05 2a9 9 0 0 1 8 7.94", key: "vmijpz" }],
        ["path", { d: "M14.05 6A5 5 0 0 1 18 10", key: "13nbpp" }]
      ]);
      var PhoneForwarded = createLucideIcon("PhoneForwarded", [
        ["polyline", { points: "18 2 22 6 18 10", key: "6vjanh" }],
        ["line", { x1: "14", x2: "22", y1: "6", y2: "6", key: "1jsywh" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ]);
      var PhoneIncoming = createLucideIcon("PhoneIncoming", [
        ["polyline", { points: "16 2 16 8 22 8", key: "1ygljm" }],
        ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ]);
      var PhoneMissed = createLucideIcon("PhoneMissed", [
        ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
        ["line", { x1: "16", x2: "22", y1: "2", y2: "8", key: "13zxdn" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ]);
      var PhoneOff = createLucideIcon("PhoneOff", [
        [
          "path",
          {
            d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91",
            key: "z86iuo"
          }
        ],
        ["line", { x1: "22", x2: "2", y1: "2", y2: "22", key: "11kh81" }]
      ]);
      var PhoneOutgoing = createLucideIcon("PhoneOutgoing", [
        ["polyline", { points: "22 8 22 2 16 2", key: "1g204g" }],
        ["line", { x1: "16", x2: "22", y1: "8", y2: "2", key: "1ggias" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ]);
      var Phone = createLucideIcon("Phone", [
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ]);
      var PiSquare = createLucideIcon("PiSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7h10", key: "udp07y" }],
        ["path", { d: "M10 7v10", key: "i1d9ee" }],
        ["path", { d: "M16 17a2 2 0 0 1-2-2V7", key: "ftwdc7" }]
      ]);
      var Pi = createLucideIcon("Pi", [
        ["line", { x1: "9", x2: "9", y1: "4", y2: "20", key: "ovs5a5" }],
        ["path", { d: "M4 7c0-1.7 1.3-3 3-3h13", key: "10pag4" }],
        ["path", { d: "M18 20c-1.7 0-3-1.3-3-3V4", key: "1gaosr" }]
      ]);
      var Piano = createLucideIcon("Piano", [
        [
          "path",
          {
            d: "M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8",
            key: "lag0yf"
          }
        ],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M6 14v4", key: "9ng0ue" }],
        ["path", { d: "M10 14v4", key: "1v8uk5" }],
        ["path", { d: "M14 14v4", key: "1tqops" }],
        ["path", { d: "M18 14v4", key: "18uqwm" }]
      ]);
      var PictureInPicture2 = createLucideIcon("PictureInPicture2", [
        ["path", { d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4", key: "daa4of" }],
        ["rect", { width: "10", height: "7", x: "12", y: "13", rx: "2", key: "1nb8gs" }]
      ]);
      var PictureInPicture = createLucideIcon("PictureInPicture", [
        [
          "path",
          {
            d: "M8 4.5v5H3m-1-6 6 6m13 0v-3c0-1.16-.84-2-2-2h-7m-9 9v2c0 1.05.95 2 2 2h3",
            key: "bcd8fb"
          }
        ],
        ["rect", { width: "10", height: "7", x: "12", y: "13.5", ry: "2", key: "136fx3" }]
      ]);
      var PieChart = createLucideIcon("PieChart", [
        ["path", { d: "M21.21 15.89A10 10 0 1 1 8 2.83", key: "k2fpak" }],
        ["path", { d: "M22 12A10 10 0 0 0 12 2v10z", key: "1rfc4y" }]
      ]);
      var PiggyBank = createLucideIcon("PiggyBank", [
        [
          "path",
          {
            d: "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2h0V5z",
            key: "uf6l00"
          }
        ],
        ["path", { d: "M2 9v1c0 1.1.9 2 2 2h1", key: "nm575m" }],
        ["path", { d: "M16 11h0", key: "k2aug8" }]
      ]);
      var PilcrowSquare = createLucideIcon("PilcrowSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 12H9.5a2.5 2.5 0 0 1 0-5H17", key: "1l9586" }],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M16 7v10", key: "lavkr4" }]
      ]);
      var Pilcrow = createLucideIcon("Pilcrow", [
        ["path", { d: "M13 4v16", key: "8vvj80" }],
        ["path", { d: "M17 4v16", key: "7dpous" }],
        ["path", { d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13", key: "sh4n9v" }]
      ]);
      var Pill = createLucideIcon("Pill", [
        [
          "path",
          { d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z", key: "wa1lgi" }
        ],
        ["path", { d: "m8.5 8.5 7 7", key: "rvfmvr" }]
      ]);
      var PinOff = createLucideIcon("PinOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["line", { x1: "12", x2: "12", y1: "17", y2: "22", key: "1jrz49" }],
        ["path", { d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V17h12", key: "13x2n8" }],
        ["path", { d: "M15 9.34V6h1a2 2 0 0 0 0-4H7.89", key: "reo3ki" }]
      ]);
      var Pin = createLucideIcon("Pin", [
        ["line", { x1: "12", x2: "12", y1: "17", y2: "22", key: "1jrz49" }],
        [
          "path",
          {
            d: "M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z",
            key: "13yl11"
          }
        ]
      ]);
      var Pipette = createLucideIcon("Pipette", [
        ["path", { d: "m2 22 1-1h3l9-9", key: "1sre89" }],
        ["path", { d: "M3 21v-3l9-9", key: "hpe2y6" }],
        [
          "path",
          {
            d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z",
            key: "196du1"
          }
        ]
      ]);
      var Pizza = createLucideIcon("Pizza", [
        ["path", { d: "M15 11h.01", key: "rns66s" }],
        ["path", { d: "M11 15h.01", key: "k85uqc" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }],
        ["path", { d: "m2 16 20 6-6-20A20 20 0 0 0 2 16", key: "e4slt2" }],
        ["path", { d: "M5.71 17.11a17.04 17.04 0 0 1 11.4-11.4", key: "rerf8f" }]
      ]);
      var PlaneLanding = createLucideIcon("PlaneLanding", [
        ["path", { d: "M2 22h20", key: "272qi7" }],
        [
          "path",
          {
            d: "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z",
            key: "1ma21e"
          }
        ]
      ]);
      var PlaneTakeoff = createLucideIcon("PlaneTakeoff", [
        ["path", { d: "M2 22h20", key: "272qi7" }],
        [
          "path",
          {
            d: "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z",
            key: "fkigj9"
          }
        ]
      ]);
      var Plane = createLucideIcon("Plane", [
        [
          "path",
          {
            d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z",
            key: "1v9wt8"
          }
        ]
      ]);
      var PlayCircle = createLucideIcon("PlayCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polygon", { points: "10 8 16 12 10 16 10 8", key: "1cimsy" }]
      ]);
      var PlaySquare = createLucideIcon("PlaySquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m9 8 6 4-6 4Z", key: "f1r3lt" }]
      ]);
      var Play = createLucideIcon("Play", [
        ["polygon", { points: "5 3 19 12 5 21 5 3", key: "191637" }]
      ]);
      var Plug2 = createLucideIcon("Plug2", [
        ["path", { d: "M9 2v6", key: "17ngun" }],
        ["path", { d: "M15 2v6", key: "s7yy2p" }],
        ["path", { d: "M12 17v5", key: "bb1du9" }],
        ["path", { d: "M5 8h14", key: "pcz4l3" }],
        ["path", { d: "M6 11V8h12v3a6 6 0 1 1-12 0v0Z", key: "nd4hoy" }]
      ]);
      var PlugZap2 = createLucideIcon("PlugZap2", [
        ["path", { d: "m13 2-2 2.5h3L12 7", key: "1me98u" }],
        ["path", { d: "M10 14v-3", key: "1mllf3" }],
        ["path", { d: "M14 14v-3", key: "1l3fkq" }],
        ["path", { d: "M11 19c-1.7 0-3-1.3-3-3v-2h8v2c0 1.7-1.3 3-3 3Z", key: "jd5pat" }],
        ["path", { d: "M12 22v-3", key: "kmzjlo" }]
      ]);
      var PlugZap = createLucideIcon("PlugZap", [
        [
          "path",
          { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
        ],
        ["path", { d: "m2 22 3-3", key: "19mgm9" }],
        ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
        ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
        ["path", { d: "m18 3-4 4h6l-4 4", key: "16psg9" }]
      ]);
      var Plug = createLucideIcon("Plug", [
        ["path", { d: "M12 22v-5", key: "1ega77" }],
        ["path", { d: "M9 8V2", key: "14iosj" }],
        ["path", { d: "M15 8V2", key: "18g5xt" }],
        ["path", { d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z", key: "osxo6l" }]
      ]);
      var PlusCircle = createLucideIcon("PlusCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ]);
      var PlusSquare = createLucideIcon("PlusSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ]);
      var Plus = createLucideIcon("Plus", [
        ["path", { d: "M5 12h14", key: "1ays0h" }],
        ["path", { d: "M12 5v14", key: "s699le" }]
      ]);
      var PocketKnife = createLucideIcon("PocketKnife", [
        ["path", { d: "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2", key: "19w3oe" }],
        ["path", { d: "M18 6h.01", key: "1v4wsw" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z", key: "6fykxj" }],
        ["path", { d: "M18 11.66V22a4 4 0 0 0 4-4V6", key: "1utzek" }]
      ]);
      var Pocket = createLucideIcon("Pocket", [
        [
          "path",
          {
            d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z",
            key: "1mz881"
          }
        ],
        ["polyline", { points: "8 10 12 14 16 10", key: "w4mbv5" }]
      ]);
      var Podcast = createLucideIcon("Podcast", [
        ["circle", { cx: "12", cy: "11", r: "1", key: "1gvufo" }],
        [
          "path",
          {
            d: "M11 17a1 1 0 0 1 2 0c0 .5-.34 3-.5 4.5a.5.5 0 0 1-1 0c-.16-1.5-.5-4-.5-4.5Z",
            key: "1n5fvv"
          }
        ],
        ["path", { d: "M8 14a5 5 0 1 1 8 0", key: "fc81rn" }],
        ["path", { d: "M17 18.5a9 9 0 1 0-10 0", key: "jqtxkf" }]
      ]);
      var PointerOff = createLucideIcon("PointerOff", [
        ["path", { d: "M10 4.5V4a2 2 0 0 0-2.41-1.957", key: "jsi14n" }],
        ["path", { d: "M13.9 8.4a2 2 0 0 0-1.26-1.295", key: "hirc7f" }],
        [
          "path",
          { d: "M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158", key: "1jxb2e" }
        ],
        [
          "path",
          {
            d: "m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343",
            key: "10r7hm"
          }
        ],
        ["path", { d: "M6 6v8", key: "tv5xkp" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var Pointer = createLucideIcon("Pointer", [
        ["path", { d: "M22 14a8 8 0 0 1-8 8", key: "56vcr3" }],
        ["path", { d: "M18 11v-1a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "1pp0yd" }],
        ["path", { d: "M14 10V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1", key: "u654g" }],
        ["path", { d: "M10 9.5V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v10", key: "1e2dtv" }],
        [
          "path",
          {
            d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "g6ys72"
          }
        ]
      ]);
      var Popcorn = createLucideIcon("Popcorn", [
        [
          "path",
          {
            d: "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4",
            key: "10td1f"
          }
        ],
        ["path", { d: "M10 22 9 8", key: "yjptiv" }],
        ["path", { d: "m14 22 1-14", key: "8jwc8b" }],
        [
          "path",
          {
            d: "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z",
            key: "1qo33t"
          }
        ]
      ]);
      var Popsicle = createLucideIcon("Popsicle", [
        [
          "path",
          {
            d: "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z",
            key: "1o68ps"
          }
        ],
        ["path", { d: "m22 22-5.5-5.5", key: "17o70y" }]
      ]);
      var PoundSterling = createLucideIcon("PoundSterling", [
        ["path", { d: "M18 7c0-5.333-8-5.333-8 0", key: "1prm2n" }],
        ["path", { d: "M10 7v14", key: "18tmcs" }],
        ["path", { d: "M6 21h12", key: "4dkmi1" }],
        ["path", { d: "M6 13h10", key: "ybwr4a" }]
      ]);
      var PowerCircle = createLucideIcon("PowerCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 12V6", key: "30zewn" }],
        ["path", { d: "M8 7.5A6.1 6.1 0 0 0 12 18a6 6 0 0 0 4-10.5", key: "1r0tk2" }]
      ]);
      var PowerOff = createLucideIcon("PowerOff", [
        ["path", { d: "M18.36 6.64A9 9 0 0 1 20.77 15", key: "dxknvb" }],
        ["path", { d: "M6.16 6.16a9 9 0 1 0 12.68 12.68", key: "1x7qb5" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var PowerSquare = createLucideIcon("PowerSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 7v5", key: "ma6bk" }],
        ["path", { d: "M8 9a5.14 5.14 0 0 0 4 8 4.95 4.95 0 0 0 4-8", key: "15eubv" }]
      ]);
      var Power = createLucideIcon("Power", [
        ["path", { d: "M12 2v10", key: "mnfbl" }],
        ["path", { d: "M18.4 6.6a9 9 0 1 1-12.77.04", key: "obofu9" }]
      ]);
      var Presentation = createLucideIcon("Presentation", [
        ["path", { d: "M2 3h20", key: "91anmk" }],
        ["path", { d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3", key: "2k9sn8" }],
        ["path", { d: "m7 21 5-5 5 5", key: "bip4we" }]
      ]);
      var Printer = createLucideIcon("Printer", [
        ["polyline", { points: "6 9 6 2 18 2 18 9", key: "1306q4" }],
        [
          "path",
          {
            d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "143wyd"
          }
        ],
        ["rect", { width: "12", height: "8", x: "6", y: "14", key: "5ipwut" }]
      ]);
      var Projector = createLucideIcon("Projector", [
        ["path", { d: "M5 7 3 5", key: "1yys58" }],
        ["path", { d: "M9 6V3", key: "1ptz9u" }],
        ["path", { d: "m13 7 2-2", key: "1w3vmq" }],
        ["circle", { cx: "9", cy: "13", r: "3", key: "1mma13" }],
        [
          "path",
          {
            d: "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17",
            key: "2frwzc"
          }
        ],
        ["path", { d: "M16 16h2", key: "dnq2od" }]
      ]);
      var Puzzle = createLucideIcon("Puzzle", [
        [
          "path",
          {
            d: "M19.439 7.85c-.049.322.059.648.289.878l1.568 1.568c.47.47.706 1.087.706 1.704s-.235 1.233-.706 1.704l-1.611 1.611a.98.98 0 0 1-.837.276c-.47-.07-.802-.48-.968-.925a2.501 2.501 0 1 0-3.214 3.214c.446.166.855.497.925.968a.979.979 0 0 1-.276.837l-1.61 1.61a2.404 2.404 0 0 1-1.705.707 2.402 2.402 0 0 1-1.704-.706l-1.568-1.568a1.026 1.026 0 0 0-.877-.29c-.493.074-.84.504-1.02.968a2.5 2.5 0 1 1-3.237-3.237c.464-.18.894-.527.967-1.02a1.026 1.026 0 0 0-.289-.877l-1.568-1.568A2.402 2.402 0 0 1 1.998 12c0-.617.236-1.234.706-1.704L4.23 8.77c.24-.24.581-.353.917-.303.515.077.877.528 1.073 1.01a2.5 2.5 0 1 0 3.259-3.259c-.482-.196-.933-.558-1.01-1.073-.05-.336.062-.676.303-.917l1.525-1.525A2.402 2.402 0 0 1 12 1.998c.617 0 1.234.236 1.704.706l1.568 1.568c.23.23.556.338.877.29.493-.074.84-.504 1.02-.968a2.5 2.5 0 1 1 3.237 3.237c-.464.18-.894.527-.967 1.02Z",
            key: "i0oyt7"
          }
        ]
      ]);
      var Pyramid = createLucideIcon("Pyramid", [
        [
          "path",
          {
            d: "M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z",
            key: "aenxs0"
          }
        ],
        ["path", { d: "M12 2v20", key: "t6zp3m" }]
      ]);
      var QrCode = createLucideIcon("QrCode", [
        ["rect", { width: "5", height: "5", x: "3", y: "3", rx: "1", key: "1tu5fj" }],
        ["rect", { width: "5", height: "5", x: "16", y: "3", rx: "1", key: "1v8r4q" }],
        ["rect", { width: "5", height: "5", x: "3", y: "16", rx: "1", key: "1x03jg" }],
        ["path", { d: "M21 16h-3a2 2 0 0 0-2 2v3", key: "177gqh" }],
        ["path", { d: "M21 21v.01", key: "ents32" }],
        ["path", { d: "M12 7v3a2 2 0 0 1-2 2H7", key: "8crl2c" }],
        ["path", { d: "M3 12h.01", key: "nlz23k" }],
        ["path", { d: "M12 3h.01", key: "n36tog" }],
        ["path", { d: "M12 16v.01", key: "133mhm" }],
        ["path", { d: "M16 12h1", key: "1slzba" }],
        ["path", { d: "M21 12v.01", key: "1lwtk9" }],
        ["path", { d: "M12 21v-1", key: "1880an" }]
      ]);
      var Quote = createLucideIcon("Quote", [
        [
          "path",
          {
            d: "M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z",
            key: "4rm80e"
          }
        ],
        [
          "path",
          {
            d: "M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z",
            key: "10za9r"
          }
        ]
      ]);
      var Rabbit = createLucideIcon("Rabbit", [
        ["path", { d: "M13 16a3 3 0 0 1 2.24 5", key: "1epib5" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }],
        [
          "path",
          {
            d: "M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3",
            key: "ue9ozu"
          }
        ],
        ["path", { d: "M20 8.54V4a2 2 0 1 0-4 0v3", key: "49iql8" }],
        ["path", { d: "M7.612 12.524a3 3 0 1 0-1.6 4.3", key: "1e33i0" }]
      ]);
      var Radar = createLucideIcon("Radar", [
        ["path", { d: "M19.07 4.93A10 10 0 0 0 6.99 3.34", key: "z3du51" }],
        ["path", { d: "M4 6h.01", key: "oypzma" }],
        ["path", { d: "M2.29 9.62A10 10 0 1 0 21.31 8.35", key: "qzzz0" }],
        ["path", { d: "M16.24 7.76A6 6 0 1 0 8.23 16.67", key: "1yjesh" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M17.99 11.66A6 6 0 0 1 15.77 16.67", key: "1u2y91" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "m13.41 10.59 5.66-5.66", key: "mhq4k0" }]
      ]);
      var Radiation = createLucideIcon("Radiation", [
        ["path", { d: "M12 12h0.01", key: "6ztbls" }],
        [
          "path",
          {
            d: "M7.5 4.2c-.3-.5-.9-.7-1.3-.4C3.9 5.5 2.3 8.1 2 11c-.1.5.4 1 1 1h5c0-1.5.8-2.8 2-3.4-1.1-1.9-2-3.5-2.5-4.4z",
            key: "wy49g3"
          }
        ],
        [
          "path",
          {
            d: "M21 12c.6 0 1-.4 1-1-.3-2.9-1.8-5.5-4.1-7.1-.4-.3-1.1-.2-1.3.3-.6.9-1.5 2.5-2.6 4.3 1.2.7 2 2 2 3.5h5z",
            key: "vklnvr"
          }
        ],
        [
          "path",
          {
            d: "M7.5 19.8c-.3.5-.1 1.1.4 1.3 2.6 1.2 5.6 1.2 8.2 0 .5-.2.7-.8.4-1.3-.5-.9-1.4-2.5-2.5-4.3-1.2.7-2.8.7-4 0-1.1 1.8-2 3.4-2.5 4.3z",
            key: "wkdf1o"
          }
        ]
      ]);
      var RadioReceiver = createLucideIcon("RadioReceiver", [
        ["path", { d: "M5 16v2", key: "g5qcv5" }],
        ["path", { d: "M19 16v2", key: "1gbaio" }],
        ["rect", { width: "20", height: "8", x: "2", y: "8", rx: "2", key: "vjsjur" }],
        ["path", { d: "M18 12h0", key: "1ucjzd" }]
      ]);
      var RadioTower = createLucideIcon("RadioTower", [
        ["path", { d: "M4.9 16.1C1 12.2 1 5.8 4.9 1.9", key: "s0qx1y" }],
        ["path", { d: "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5", key: "1idnkw" }],
        ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }],
        ["path", { d: "M16.2 4.8c2 2 2.26 5.11.8 7.47", key: "ojru2q" }],
        ["path", { d: "M19.1 1.9a9.96 9.96 0 0 1 0 14.1", key: "rhi7fg" }],
        ["path", { d: "M9.5 18h5", key: "mfy3pd" }],
        ["path", { d: "m8 22 4-11 4 11", key: "25yftu" }]
      ]);
      var Radio = createLucideIcon("Radio", [
        ["path", { d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9", key: "1vaf9d" }],
        ["path", { d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5", key: "u1ii0m" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5", key: "1j5fej" }],
        ["path", { d: "M19.1 4.9C23 8.8 23 15.1 19.1 19", key: "10b0cb" }]
      ]);
      var Radius = createLucideIcon("Radius", [
        ["path", { d: "M20.34 17.52a10 10 0 1 0-2.82 2.82", key: "fydyku" }],
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["path", { d: "m13.41 13.41 4.18 4.18", key: "1gqbwc" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ]);
      var RailSymbol = createLucideIcon("RailSymbol", [
        ["path", { d: "M5 15h14", key: "m0yey3" }],
        ["path", { d: "M5 9h14", key: "7tsvo6" }],
        ["path", { d: "m14 20-5-5 6-6-5-5", key: "1jo42i" }]
      ]);
      var Rainbow = createLucideIcon("Rainbow", [
        ["path", { d: "M22 17a10 10 0 0 0-20 0", key: "ozegv" }],
        ["path", { d: "M6 17a6 6 0 0 1 12 0", key: "5giftw" }],
        ["path", { d: "M10 17a2 2 0 0 1 4 0", key: "gnsikk" }]
      ]);
      var Rat = createLucideIcon("Rat", [
        [
          "path",
          {
            d: "M17 5c0-1.7-1.3-3-3-3s-3 1.3-3 3c0 .8.3 1.5.8 2H11c-3.9 0-7 3.1-7 7v0c0 2.2 1.8 4 4 4",
            key: "16aj0u"
          }
        ],
        [
          "path",
          {
            d: "M16.8 3.9c.3-.3.6-.5 1-.7 1.5-.6 3.3.1 3.9 1.6.6 1.5-.1 3.3-1.6 3.9l1.6 2.8c.2.3.2.7.2 1-.2.8-.9 1.2-1.7 1.1 0 0-1.6-.3-2.7-.6H17c-1.7 0-3 1.3-3 3",
            key: "1crdmb"
          }
        ],
        ["path", { d: "M13.2 18a3 3 0 0 0-2.2-5", key: "1ol3lk" }],
        ["path", { d: "M13 22H4a2 2 0 0 1 0-4h12", key: "bt3f23" }],
        ["path", { d: "M16 9h.01", key: "1bdo4e" }]
      ]);
      var Ratio = createLucideIcon("Ratio", [
        ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }],
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ]);
      var ReceiptCent = createLucideIcon("ReceiptCent", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M12 6.5v11", key: "ecfhkf" }],
        ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
      ]);
      var ReceiptEuro = createLucideIcon("ReceiptEuro", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 12h5", key: "1g6qi8" }],
        ["path", { d: "M16 9.5a4 4 0 1 0 0 5.2", key: "b2px4r" }]
      ]);
      var ReceiptIndianRupee = createLucideIcon("ReceiptIndianRupee", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 7h8", key: "i86dvs" }],
        ["path", { d: "M12 17.5 8 15h1a4 4 0 0 0 0-8", key: "grpkl4" }],
        ["path", { d: "M8 11h8", key: "vwpz6n" }]
      ]);
      var ReceiptJapaneseYen = createLucideIcon("ReceiptJapaneseYen", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "m12 10 3-3", key: "1mc12w" }],
        ["path", { d: "m9 7 3 3v7.5", key: "39i0xv" }],
        ["path", { d: "M9 11h6", key: "1fldmi" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }]
      ]);
      var ReceiptPoundSterling = createLucideIcon("ReceiptPoundSterling", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 13h5", key: "1k9z8w" }],
        ["path", { d: "M10 17V9.5a2.5 2.5 0 0 1 5 0", key: "1dzgp0" }],
        ["path", { d: "M8 17h7", key: "8mjdqu" }]
      ]);
      var ReceiptRussianRuble = createLucideIcon("ReceiptRussianRuble", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 15h5", key: "vxg57a" }],
        ["path", { d: "M8 11h5a2 2 0 1 0 0-4h-3v10", key: "1usi5u" }]
      ]);
      var ReceiptSwissFranc = createLucideIcon("ReceiptSwissFranc", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M10 17V7h5", key: "k7jq18" }],
        ["path", { d: "M10 11h4", key: "1i0mka" }],
        ["path", { d: "M8 15h5", key: "vxg57a" }]
      ]);
      var ReceiptText = createLucideIcon("ReceiptText", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M14 8H8", key: "1l3xfs" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }],
        ["path", { d: "M13 16H8", key: "wsln4y" }]
      ]);
      var Receipt = createLucideIcon("Receipt", [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 17.5v-11", key: "1jc1ny" }]
      ]);
      var RectangleHorizontal = createLucideIcon("RectangleHorizontal", [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ]);
      var RectangleVertical = createLucideIcon("RectangleVertical", [
        ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }]
      ]);
      var Recycle = createLucideIcon("Recycle", [
        [
          "path",
          {
            d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5",
            key: "x6z5xu"
          }
        ],
        [
          "path",
          {
            d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12",
            key: "1x4zh5"
          }
        ],
        ["path", { d: "m14 16-3 3 3 3", key: "f6jyew" }],
        ["path", { d: "M8.293 13.596 7.196 9.5 3.1 10.598", key: "wf1obh" }],
        [
          "path",
          {
            d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843",
            key: "9tzpgr"
          }
        ],
        ["path", { d: "m13.378 9.633 4.096 1.098 1.097-4.096", key: "1oe83g" }]
      ]);
      var Redo2 = createLucideIcon("Redo2", [
        ["path", { d: "m15 14 5-5-5-5", key: "12vg1m" }],
        ["path", { d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5v0A5.5 5.5 0 0 0 9.5 20H13", key: "19mnr4" }]
      ]);
      var RedoDot = createLucideIcon("RedoDot", [
        ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }],
        ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
        ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
      ]);
      var Redo = createLucideIcon("Redo", [
        ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
        ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
      ]);
      var RefreshCcwDot = createLucideIcon("RefreshCcwDot", [
        ["path", { d: "M3 2v6h6", key: "18ldww" }],
        ["path", { d: "M21 12A9 9 0 0 0 6 5.3L3 8", key: "1pbrqz" }],
        ["path", { d: "M21 22v-6h-6", key: "usdfbe" }],
        ["path", { d: "M3 12a9 9 0 0 0 15 6.7l3-2.7", key: "1hosoe" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ]);
      var RefreshCcw = createLucideIcon("RefreshCcw", [
        ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
        ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
        ["path", { d: "M16 16h5v5", key: "ccwih5" }]
      ]);
      var RefreshCwOff = createLucideIcon("RefreshCwOff", [
        ["path", { d: "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47", key: "1krf6h" }],
        ["path", { d: "M8 16H3v5", key: "1cv678" }],
        ["path", { d: "M3 12C3 9.51 4 7.26 5.64 5.64", key: "ruvoct" }],
        ["path", { d: "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64", key: "19q130" }],
        ["path", { d: "M21 12c0 1-.16 1.97-.47 2.87", key: "4w8emr" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
        ["path", { d: "M22 22 2 2", key: "1r8tn9" }]
      ]);
      var RefreshCw = createLucideIcon("RefreshCw", [
        ["path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8", key: "v9h5vc" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
        ["path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16", key: "3uifl3" }],
        ["path", { d: "M8 16H3v5", key: "1cv678" }]
      ]);
      var Refrigerator = createLucideIcon("Refrigerator", [
        [
          "path",
          { d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z", key: "fpq118" }
        ],
        ["path", { d: "M5 10h14", key: "elsbfy" }],
        ["path", { d: "M15 7v6", key: "1nx30x" }]
      ]);
      var Regex = createLucideIcon("Regex", [
        ["path", { d: "M17 3v10", key: "15fgeh" }],
        ["path", { d: "m12.67 5.5 8.66 5", key: "1gpheq" }],
        ["path", { d: "m12.67 10.5 8.66-5", key: "1dkfa6" }],
        [
          "path",
          { d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z", key: "swwfx4" }
        ]
      ]);
      var RemoveFormatting = createLucideIcon("RemoveFormatting", [
        ["path", { d: "M4 7V4h16v3", key: "9msm58" }],
        ["path", { d: "M5 20h6", key: "1h6pxn" }],
        ["path", { d: "M13 4 8 20", key: "kqq6aj" }],
        ["path", { d: "m15 15 5 5", key: "me55sn" }],
        ["path", { d: "m20 15-5 5", key: "11p7ol" }]
      ]);
      var Repeat1 = createLucideIcon("Repeat1", [
        ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
        ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
        ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
        ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }],
        ["path", { d: "M11 10h1v4", key: "70cz1p" }]
      ]);
      var Repeat2 = createLucideIcon("Repeat2", [
        ["path", { d: "m2 9 3-3 3 3", key: "1ltn5i" }],
        ["path", { d: "M13 18H7a2 2 0 0 1-2-2V6", key: "1r6tfw" }],
        ["path", { d: "m22 15-3 3-3-3", key: "4rnwn2" }],
        ["path", { d: "M11 6h6a2 2 0 0 1 2 2v10", key: "2f72bc" }]
      ]);
      var Repeat = createLucideIcon("Repeat", [
        ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
        ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
        ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
        ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }]
      ]);
      var ReplaceAll = createLucideIcon("ReplaceAll", [
        ["path", { d: "M14 4c0-1.1.9-2 2-2", key: "1mvvbw" }],
        ["path", { d: "M20 2c1.1 0 2 .9 2 2", key: "1mj6oe" }],
        ["path", { d: "M22 8c0 1.1-.9 2-2 2", key: "v1wql3" }],
        ["path", { d: "M16 10c-1.1 0-2-.9-2-2", key: "821ux0" }],
        ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
        ["path", { d: "M6 10V5c0-1.7 1.3-3 3-3h1", key: "13af7h" }],
        ["rect", { width: "8", height: "8", x: "2", y: "14", rx: "2", key: "17ihk4" }],
        ["path", { d: "M14 14c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2", key: "1w9p8c" }],
        ["path", { d: "M20 14c1.1 0 2 .9 2 2v4c0 1.1-.9 2-2 2", key: "m45eaa" }]
      ]);
      var Replace = createLucideIcon("Replace", [
        ["path", { d: "M14 4c0-1.1.9-2 2-2", key: "1mvvbw" }],
        ["path", { d: "M20 2c1.1 0 2 .9 2 2", key: "1mj6oe" }],
        ["path", { d: "M22 8c0 1.1-.9 2-2 2", key: "v1wql3" }],
        ["path", { d: "M16 10c-1.1 0-2-.9-2-2", key: "821ux0" }],
        ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
        ["path", { d: "M6 10V5c0-1.7 1.3-3 3-3h1", key: "13af7h" }],
        ["rect", { width: "8", height: "8", x: "2", y: "14", rx: "2", key: "17ihk4" }]
      ]);
      var ReplyAll = createLucideIcon("ReplyAll", [
        ["polyline", { points: "7 17 2 12 7 7", key: "t83bqg" }],
        ["polyline", { points: "12 17 7 12 12 7", key: "1g4ajm" }],
        ["path", { d: "M22 18v-2a4 4 0 0 0-4-4H7", key: "1fcyog" }]
      ]);
      var Reply = createLucideIcon("Reply", [
        ["polyline", { points: "9 17 4 12 9 7", key: "hvgpf2" }],
        ["path", { d: "M20 18v-2a4 4 0 0 0-4-4H4", key: "5vmcpk" }]
      ]);
      var Rewind = createLucideIcon("Rewind", [
        ["polygon", { points: "11 19 2 12 11 5 11 19", key: "14yba5" }],
        ["polygon", { points: "22 19 13 12 22 5 22 19", key: "1pi1cj" }]
      ]);
      var Ribbon = createLucideIcon("Ribbon", [
        [
          "path",
          {
            d: "M17.75 9.01c-.52 2.08-1.83 3.64-3.18 5.49l-2.6 3.54-2.97 4-3.5-2.54 3.85-4.97c-1.86-2.61-2.8-3.77-3.16-5.44",
            key: "1njedg"
          }
        ],
        [
          "path",
          {
            d: "M17.75 9.01A7 7 0 0 0 6.2 9.1C6.06 8.5 6 7.82 6 7c0-3.5 2.83-5 5.98-5C15.24 2 18 3.5 18 7c0 .73-.09 1.4-.25 2.01Z",
            key: "10len7"
          }
        ],
        ["path", { d: "m9.35 14.53 2.64-3.31", key: "1wfi09" }],
        ["path", { d: "m11.97 18.04 2.99 4 3.54-2.54-3.93-5", key: "1ezyge" }],
        ["path", { d: "M14 8c0 1-1 2-2.01 3.22C11 10 10 9 10 8a2 2 0 1 1 4 0", key: "aw0zq5" }]
      ]);
      var Rocket = createLucideIcon("Rocket", [
        [
          "path",
          {
            d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
            key: "m3kijz"
          }
        ],
        [
          "path",
          {
            d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
            key: "1fmvmk"
          }
        ],
        ["path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0", key: "1f8sc4" }],
        ["path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5", key: "qeys4" }]
      ]);
      var RockingChair = createLucideIcon("RockingChair", [
        ["polyline", { points: "3.5 2 6.5 12.5 18 12.5", key: "y3iy52" }],
        ["line", { x1: "9.5", x2: "5.5", y1: "12.5", y2: "20", key: "19vg5i" }],
        ["line", { x1: "15", x2: "18.5", y1: "12.5", y2: "20", key: "1inpmv" }],
        ["path", { d: "M2.75 18a13 13 0 0 0 18.5 0", key: "1nquas" }]
      ]);
      var RollerCoaster = createLucideIcon("RollerCoaster", [
        ["path", { d: "M6 19V5", key: "1r845m" }],
        ["path", { d: "M10 19V6.8", key: "9j2tfs" }],
        ["path", { d: "M14 19v-7.8", key: "10s8qv" }],
        ["path", { d: "M18 5v4", key: "1tajlv" }],
        ["path", { d: "M18 19v-6", key: "ielfq3" }],
        ["path", { d: "M22 19V9", key: "158nzp" }],
        ["path", { d: "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65", key: "1930oh" }]
      ]);
      var Rotate3d = createLucideIcon("Rotate3d", [
        [
          "path",
          {
            d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2",
            key: "10n0gc"
          }
        ],
        ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814", key: "16shm9" }],
        [
          "path",
          {
            d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4",
            key: "1lxi77"
          }
        ]
      ]);
      var RotateCcw = createLucideIcon("RotateCcw", [
        ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }]
      ]);
      var RotateCw = createLucideIcon("RotateCw", [
        ["path", { d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8", key: "1p45f6" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }]
      ]);
      var RouteOff = createLucideIcon("RouteOff", [
        ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
        ["path", { d: "M9 19h8.5c.4 0 .9-.1 1.3-.2", key: "1effex" }],
        ["path", { d: "M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12", key: "k9y2ds" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M21 15.3a3.5 3.5 0 0 0-3.3-3.3", key: "11nlu2" }],
        ["path", { d: "M15 5h-4.3", key: "6537je" }],
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
      ]);
      var Route = createLucideIcon("Route", [
        ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
        ["path", { d: "M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15", key: "1d8sl" }],
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
      ]);
      var Router = createLucideIcon("Router", [
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6.01 18H6", key: "19vcac" }],
        ["path", { d: "M10.01 18H10", key: "uamcmx" }],
        ["path", { d: "M15 10v4", key: "qjz1xs" }],
        ["path", { d: "M17.84 7.17a4 4 0 0 0-5.66 0", key: "1rif40" }],
        ["path", { d: "M20.66 4.34a8 8 0 0 0-11.31 0", key: "6a5xfq" }]
      ]);
      var Rows2 = createLucideIcon("Rows2", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }]
      ]);
      var Rows3 = createLucideIcon("Rows3", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 9H3", key: "1338ky" }],
        ["path", { d: "M21 15H3", key: "9uk58r" }]
      ]);
      var Rows4 = createLucideIcon("Rows4", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 7.5H3", key: "1hm9pq" }],
        ["path", { d: "M21 12H3", key: "2avoz0" }],
        ["path", { d: "M21 16.5H3", key: "n7jzkj" }]
      ]);
      var Rss = createLucideIcon("Rss", [
        ["path", { d: "M4 11a9 9 0 0 1 9 9", key: "pv89mb" }],
        ["path", { d: "M4 4a16 16 0 0 1 16 16", key: "k0647b" }],
        ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
      ]);
      var Ruler = createLucideIcon("Ruler", [
        [
          "path",
          {
            d: "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z",
            key: "icamh8"
          }
        ],
        ["path", { d: "m14.5 12.5 2-2", key: "inckbg" }],
        ["path", { d: "m11.5 9.5 2-2", key: "fmmyf7" }],
        ["path", { d: "m8.5 6.5 2-2", key: "vc6u1g" }],
        ["path", { d: "m17.5 15.5 2-2", key: "wo5hmg" }]
      ]);
      var RussianRuble = createLucideIcon("RussianRuble", [
        ["path", { d: "M6 11h8a4 4 0 0 0 0-8H9v18", key: "18ai8t" }],
        ["path", { d: "M6 15h8", key: "1y8f6l" }]
      ]);
      var Sailboat = createLucideIcon("Sailboat", [
        ["path", { d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z", key: "1404fh" }],
        ["path", { d: "M21 14 10 2 3 14h18Z", key: "1nzg7v" }],
        ["path", { d: "M10 2v16", key: "1labyt" }]
      ]);
      var Salad = createLucideIcon("Salad", [
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
        [
          "path",
          {
            d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1",
            key: "10xrj0"
          }
        ],
        ["path", { d: "m13 12 4-4", key: "1hckqy" }],
        ["path", { d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2", key: "1p4srx" }]
      ]);
      var Sandwich = createLucideIcon("Sandwich", [
        ["path", { d: "M3 11v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-3", key: "34v9d7" }],
        [
          "path",
          {
            d: "M12 19H4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3.83",
            key: "1k5vfb"
          }
        ],
        ["path", { d: "m3 11 7.77-6.04a2 2 0 0 1 2.46 0L21 11H3Z", key: "1oe7l6" }],
        ["path", { d: "M12.97 19.77 7 15h12.5l-3.75 4.5a2 2 0 0 1-2.78.27Z", key: "1ts2ri" }]
      ]);
      var SatelliteDish = createLucideIcon("SatelliteDish", [
        ["path", { d: "M4 10a7.31 7.31 0 0 0 10 10Z", key: "1fzpp3" }],
        ["path", { d: "m9 15 3-3", key: "88sc13" }],
        ["path", { d: "M17 13a6 6 0 0 0-6-6", key: "15cc6u" }],
        ["path", { d: "M21 13A10 10 0 0 0 11 3", key: "11nf8s" }]
      ]);
      var Satellite = createLucideIcon("Satellite", [
        ["path", { d: "M13 7 9 3 5 7l4 4", key: "vyckw6" }],
        ["path", { d: "m17 11 4 4-4 4-4-4", key: "rchckc" }],
        ["path", { d: "m8 12 4 4 6-6-4-4Z", key: "1sshf7" }],
        ["path", { d: "m16 8 3-3", key: "x428zp" }],
        ["path", { d: "M9 21a6 6 0 0 0-6-6", key: "1iajcf" }]
      ]);
      var SaveAll = createLucideIcon("SaveAll", [
        ["path", { d: "M6 4a2 2 0 0 1 2-2h10l4 4v10.2a2 2 0 0 1-2 1.8H8a2 2 0 0 1-2-2Z", key: "1unput" }],
        ["path", { d: "M10 2v4h6", key: "1p5sg6" }],
        ["path", { d: "M18 18v-7h-8v7", key: "1oniuk" }],
        ["path", { d: "M18 22H4a2 2 0 0 1-2-2V6", key: "pblm9e" }]
      ]);
      var Save = createLucideIcon("Save", [
        ["path", { d: "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z", key: "1owoqh" }],
        ["polyline", { points: "17 21 17 13 7 13 7 21", key: "1md35c" }],
        ["polyline", { points: "7 3 7 8 15 8", key: "8nz8an" }]
      ]);
      var Scale3d = createLucideIcon("Scale3d", [
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }],
        ["path", { d: "M5 7v12h12", key: "vtaa4r" }],
        ["path", { d: "m5 19 6-6", key: "jh6hbb" }]
      ]);
      var Scale = createLucideIcon("Scale", [
        ["path", { d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "7g6ntu" }],
        ["path", { d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "ijws7r" }],
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["path", { d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2", key: "3gwbw2" }]
      ]);
      var Scaling = createLucideIcon("Scaling", [
        ["path", { d: "M21 3 9 15", key: "15kdhq" }],
        ["path", { d: "M12 3H3v18h18v-9", key: "8suug0" }],
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "M14 15H9v-5", key: "pi4jk9" }]
      ]);
      var ScanBarcode = createLucideIcon("ScanBarcode", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M8 7v10", key: "23sfjj" }],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M17 7v10", key: "578dap" }]
      ]);
      var ScanEye = createLucideIcon("ScanEye", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["path", { d: "M5 12s2.5-5 7-5 7 5 7 5-2.5 5-7 5-7-5-7-5", key: "nhuolu" }]
      ]);
      var ScanFace = createLucideIcon("ScanFace", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 9h.01", key: "x1ddxp" }]
      ]);
      var ScanLine = createLucideIcon("ScanLine", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }]
      ]);
      var ScanSearch = createLucideIcon("ScanSearch", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "m16 16-1.9-1.9", key: "1dq9hf" }]
      ]);
      var ScanText = createLucideIcon("ScanText", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M7 8h8", key: "1jbsf9" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M7 16h6", key: "1vyc9m" }]
      ]);
      var Scan = createLucideIcon("Scan", [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
      ]);
      var ScatterChart = createLucideIcon("ScatterChart", [
        ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
        ["circle", { cx: "18.5", cy: "5.5", r: ".5", fill: "currentColor", key: "lysivs" }],
        ["circle", { cx: "11.5", cy: "11.5", r: ".5", fill: "currentColor", key: "byv1b8" }],
        ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
        ["circle", { cx: "17.5", cy: "14.5", r: ".5", fill: "currentColor", key: "1gjh6j" }],
        ["path", { d: "M3 3v18h18", key: "1s2lah" }]
      ]);
      var School2 = createLucideIcon("School2", [
        ["circle", { cx: "12", cy: "10", r: "1", key: "1gnqs8" }],
        ["path", { d: "M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z", key: "8z0lq4" }],
        ["path", { d: "M6 17v.01", key: "roodi6" }],
        ["path", { d: "M6 13v.01", key: "67c122" }],
        ["path", { d: "M18 17v.01", key: "12ktxm" }],
        ["path", { d: "M18 13v.01", key: "tn1rt1" }],
        ["path", { d: "M14 22v-5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5", key: "jfgdp0" }]
      ]);
      var School = createLucideIcon("School", [
        ["path", { d: "m4 6 8-4 8 4", key: "1q0ilc" }],
        ["path", { d: "m18 10 4 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8l4-2", key: "1vwozw" }],
        ["path", { d: "M14 22v-4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v4", key: "cpkuc4" }],
        ["path", { d: "M18 5v17", key: "1sw6gf" }],
        ["path", { d: "M6 5v17", key: "1xfsm0" }],
        ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }]
      ]);
      var ScissorsLineDashed = createLucideIcon("ScissorsLineDashed", [
        ["path", { d: "M5.42 9.42 8 12", key: "12pkuq" }],
        ["circle", { cx: "4", cy: "8", r: "2", key: "107mxr" }],
        ["path", { d: "m14 6-8.58 8.58", key: "gvzu5l" }],
        ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
        ["path", { d: "M10.8 14.8 14 18", key: "ax7m9r" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ]);
      var ScissorsSquareDashedBottom = createLucideIcon("ScissorsSquareDashedBottom", [
        [
          "path",
          { d: "M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2", key: "1vzg26" }
        ],
        ["path", { d: "M10 22H8", key: "euku7a" }],
        ["path", { d: "M16 22h-2", key: "18d249" }],
        ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
        ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
        ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
        ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
        ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
      ]);
      var ScissorsSquare = createLucideIcon("ScissorsSquare", [
        ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "2", key: "1btzen" }],
        ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
        ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
        ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
        ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
        ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
      ]);
      var Scissors = createLucideIcon("Scissors", [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M8.12 8.12 12 12", key: "1alkpv" }],
        ["path", { d: "M20 4 8.12 15.88", key: "xgtan2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["path", { d: "M14.8 14.8 20 20", key: "ptml3r" }]
      ]);
      var ScreenShareOff = createLucideIcon("ScreenShareOff", [
        ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m22 3-5 5", key: "12jva0" }],
        ["path", { d: "m17 3 5 5", key: "k36vhe" }]
      ]);
      var ScreenShare = createLucideIcon("ScreenShare", [
        ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m17 8 5-5", key: "fqif7o" }],
        ["path", { d: "M17 3h5v5", key: "1o3tu8" }]
      ]);
      var ScrollText = createLucideIcon("ScrollText", [
        [
          "path",
          { d: "M8 21h12a2 2 0 0 0 2-2v-2H10v2a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v3h4", key: "13a6an" }
        ],
        ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
        ["path", { d: "M15 8h-5", key: "1khuty" }],
        ["path", { d: "M15 12h-5", key: "r7krc0" }]
      ]);
      var Scroll = createLucideIcon("Scroll", [
        [
          "path",
          { d: "M8 21h12a2 2 0 0 0 2-2v-2H10v2a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v3h4", key: "13a6an" }
        ],
        ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }]
      ]);
      var SearchCheck = createLucideIcon("SearchCheck", [
        ["path", { d: "m8 11 2 2 4-4", key: "1sed1v" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ]);
      var SearchCode = createLucideIcon("SearchCode", [
        ["path", { d: "m9 9-2 2 2 2", key: "17gsfh" }],
        ["path", { d: "m13 13 2-2-2-2", key: "186z8k" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ]);
      var SearchSlash = createLucideIcon("SearchSlash", [
        ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ]);
      var SearchX = createLucideIcon("SearchX", [
        ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
        ["path", { d: "m8.5 8.5 5 5", key: "a8mexj" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ]);
      var Search = createLucideIcon("Search", [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ]);
      var SendHorizontal = createLucideIcon("SendHorizontal", [
        ["path", { d: "m3 3 3 9-3 9 19-9Z", key: "1aobqy" }],
        ["path", { d: "M6 12h16", key: "s4cdu5" }]
      ]);
      var SendToBack = createLucideIcon("SendToBack", [
        ["rect", { x: "14", y: "14", width: "8", height: "8", rx: "2", key: "1b0bso" }],
        ["rect", { x: "2", y: "2", width: "8", height: "8", rx: "2", key: "1x09vl" }],
        ["path", { d: "M7 14v1a2 2 0 0 0 2 2h1", key: "pao6x6" }],
        ["path", { d: "M14 7h1a2 2 0 0 1 2 2v1", key: "19tdru" }]
      ]);
      var Send = createLucideIcon("Send", [
        ["path", { d: "m22 2-7 20-4-9-9-4Z", key: "1q3vgg" }],
        ["path", { d: "M22 2 11 13", key: "nzbqef" }]
      ]);
      var SeparatorHorizontal = createLucideIcon("SeparatorHorizontal", [
        ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
        ["polyline", { points: "8 8 12 4 16 8", key: "zo8t4w" }],
        ["polyline", { points: "16 16 12 20 8 16", key: "1oyrid" }]
      ]);
      var SeparatorVertical = createLucideIcon("SeparatorVertical", [
        ["line", { x1: "12", x2: "12", y1: "3", y2: "21", key: "1efggb" }],
        ["polyline", { points: "8 8 4 12 8 16", key: "bnfmv4" }],
        ["polyline", { points: "16 16 20 12 16 8", key: "u90052" }]
      ]);
      var ServerCog = createLucideIcon("ServerCog", [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        [
          "path",
          {
            d: "M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5",
            key: "tn8das"
          }
        ],
        [
          "path",
          {
            d: "M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5",
            key: "1g2pve"
          }
        ],
        ["path", { d: "M6 6h.01", key: "1utrut" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "m15.7 13.4-.9-.3", key: "1jwmzr" }],
        ["path", { d: "m9.2 10.9-.9-.3", key: "qapnim" }],
        ["path", { d: "m10.6 15.7.3-.9", key: "quwk0k" }],
        ["path", { d: "m13.6 15.7-.4-1", key: "cb9xp7" }],
        ["path", { d: "m10.8 9.3-.4-1", key: "1uaiz5" }],
        ["path", { d: "m8.3 13.6 1-.4", key: "s6srou" }],
        ["path", { d: "m14.7 10.8 1-.4", key: "4d31cq" }],
        ["path", { d: "m13.4 8.3-.3.9", key: "1bm987" }]
      ]);
      var ServerCrash = createLucideIcon("ServerCrash", [
        [
          "path",
          {
            d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2",
            key: "4b9dqc"
          }
        ],
        [
          "path",
          {
            d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2",
            key: "22nnkd"
          }
        ],
        ["path", { d: "M6 6h.01", key: "1utrut" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "m13 6-4 6h6l-4 6", key: "14hqih" }]
      ]);
      var ServerOff = createLucideIcon("ServerOff", [
        ["path", { d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5", key: "bt2siv" }],
        ["path", { d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z", key: "1hjrv1" }],
        ["path", { d: "M22 17v-1a2 2 0 0 0-2-2h-1", key: "1iynyr" }],
        ["path", { d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z", key: "161ggg" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var Server = createLucideIcon("Server", [
        ["rect", { width: "20", height: "8", x: "2", y: "2", rx: "2", ry: "2", key: "ngkwjq" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", ry: "2", key: "iecqi9" }],
        ["line", { x1: "6", x2: "6.01", y1: "6", y2: "6", key: "16zg32" }],
        ["line", { x1: "6", x2: "6.01", y1: "18", y2: "18", key: "nzw8ys" }]
      ]);
      var Settings2 = createLucideIcon("Settings2", [
        ["path", { d: "M20 7h-9", key: "3s1dr2" }],
        ["path", { d: "M14 17H5", key: "gfn3mx" }],
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
        ["circle", { cx: "7", cy: "7", r: "3", key: "dfmy0x" }]
      ]);
      var Settings = createLucideIcon("Settings", [
        [
          "path",
          {
            d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
            key: "1qme2f"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ]);
      var Shapes = createLucideIcon("Shapes", [
        [
          "path",
          {
            d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
            key: "1bo67w"
          }
        ],
        ["rect", { x: "3", y: "14", width: "7", height: "7", rx: "1", key: "1bkyp8" }],
        ["circle", { cx: "17.5", cy: "17.5", r: "3.5", key: "w3z12y" }]
      ]);
      var Share2 = createLucideIcon("Share2", [
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }],
        ["circle", { cx: "6", cy: "12", r: "3", key: "w7nqdw" }],
        ["circle", { cx: "18", cy: "19", r: "3", key: "1xt0gg" }],
        ["line", { x1: "8.59", x2: "15.42", y1: "13.51", y2: "17.49", key: "47mynk" }],
        ["line", { x1: "15.41", x2: "8.59", y1: "6.51", y2: "10.49", key: "1n3mei" }]
      ]);
      var Share = createLucideIcon("Share", [
        ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
        ["polyline", { points: "16 6 12 2 8 6", key: "m901s6" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "15", key: "1p0rca" }]
      ]);
      var Sheet = createLucideIcon("Sheet", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["line", { x1: "3", x2: "21", y1: "9", y2: "9", key: "1vqk6q" }],
        ["line", { x1: "3", x2: "21", y1: "15", y2: "15", key: "o2sbyz" }],
        ["line", { x1: "9", x2: "9", y1: "9", y2: "21", key: "1ib60c" }],
        ["line", { x1: "15", x2: "15", y1: "9", y2: "21", key: "1n26ft" }]
      ]);
      var Shell = createLucideIcon("Shell", [
        [
          "path",
          {
            d: "M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44",
            key: "1cn552"
          }
        ]
      ]);
      var ShieldAlert = createLucideIcon("ShieldAlert", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M12 8v4", key: "1got3b" }],
        ["path", { d: "M12 16h.01", key: "1drbdi" }]
      ]);
      var ShieldBan = createLucideIcon("ShieldBan", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "m4 5 14 12", key: "1ta6nf" }]
      ]);
      var ShieldCheck = createLucideIcon("ShieldCheck", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ]);
      var ShieldEllipsis = createLucideIcon("ShieldEllipsis", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M8 11h.01", key: "1dfujw" }],
        ["path", { d: "M12 11h.01", key: "z322tv" }],
        ["path", { d: "M16 11h.01", key: "xkw8gn" }]
      ]);
      var ShieldHalf = createLucideIcon("ShieldHalf", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M12 22V2", key: "zs6s6o" }]
      ]);
      var ShieldMinus = createLucideIcon("ShieldMinus", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M8 11h8", key: "vwpz6n" }]
      ]);
      var ShieldOff = createLucideIcon("ShieldOff", [
        ["path", { d: "M19.7 14a6.9 6.9 0 0 0 .3-2V5l-8-3-3.2 1.2", key: "342pvf" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M4.7 4.7 4 5v7c0 6 8 10 8 10a20.3 20.3 0 0 0 5.62-4.38", key: "p0ycf4" }]
      ]);
      var ShieldPlus = createLucideIcon("ShieldPlus", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M8 11h8", key: "vwpz6n" }],
        ["path", { d: "M12 15V7", key: "1ycneb" }]
      ]);
      var ShieldQuestion = createLucideIcon("ShieldQuestion", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3", key: "mhlwft" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ]);
      var ShieldX = createLucideIcon("ShieldX", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }],
        ["path", { d: "m14.5 9-5 5", key: "1m49dw" }],
        ["path", { d: "m9.5 9 5 5", key: "wyx7zg" }]
      ]);
      var Shield = createLucideIcon("Shield", [
        ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10", key: "1irkt0" }]
      ]);
      var ShipWheel = createLucideIcon("ShipWheel", [
        ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
        ["path", { d: "M12 2v7.5", key: "1e5rl5" }],
        ["path", { d: "m19 5-5.23 5.23", key: "1ezxxf" }],
        ["path", { d: "M22 12h-7.5", key: "le1719" }],
        ["path", { d: "m19 19-5.23-5.23", key: "p3fmgn" }],
        ["path", { d: "M12 14.5V22", key: "dgcmos" }],
        ["path", { d: "M10.23 13.77 5 19", key: "qwopd4" }],
        ["path", { d: "M9.5 12H2", key: "r7bup8" }],
        ["path", { d: "M10.23 10.23 5 5", key: "k2y7lj" }],
        ["circle", { cx: "12", cy: "12", r: "2.5", key: "ix0uyj" }]
      ]);
      var Ship = createLucideIcon("Ship", [
        [
          "path",
          {
            d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1 .6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "iegodh"
          }
        ],
        [
          "path",
          { d: "M19.38 20A11.6 11.6 0 0 0 21 14l-9-4-9 4c0 2.9.94 5.34 2.81 7.76", key: "fp8vka" }
        ],
        ["path", { d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6", key: "qpkstq" }],
        ["path", { d: "M12 10v4", key: "1kjpxc" }],
        ["path", { d: "M12 2v3", key: "qbqxhf" }]
      ]);
      var Shirt = createLucideIcon("Shirt", [
        [
          "path",
          {
            d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z",
            key: "1wgbhj"
          }
        ]
      ]);
      var ShoppingBag = createLucideIcon("ShoppingBag", [
        ["path", { d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z", key: "hou9p0" }],
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M16 10a4 4 0 0 1-8 0", key: "1ltviw" }]
      ]);
      var ShoppingBasket = createLucideIcon("ShoppingBasket", [
        ["path", { d: "m5 11 4-7", key: "116ra9" }],
        ["path", { d: "m19 11-4-7", key: "cnml18" }],
        ["path", { d: "M2 11h20", key: "3eubbj" }],
        ["path", { d: "m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8c.9 0 1.8-.7 2-1.6l1.7-7.4", key: "1x2lvw" }],
        ["path", { d: "m9 11 1 9", key: "1ojof7" }],
        ["path", { d: "M4.5 15.5h15", key: "13mye1" }],
        ["path", { d: "m15 11-1 9", key: "5wnq3a" }]
      ]);
      var ShoppingCart = createLucideIcon("ShoppingCart", [
        ["circle", { cx: "8", cy: "21", r: "1", key: "jimo8o" }],
        ["circle", { cx: "19", cy: "21", r: "1", key: "13723u" }],
        [
          "path",
          {
            d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
            key: "9zh506"
          }
        ]
      ]);
      var Shovel = createLucideIcon("Shovel", [
        ["path", { d: "M2 22v-5l5-5 5 5-5 5z", key: "1fh25c" }],
        ["path", { d: "M9.5 14.5 16 8", key: "1smz5x" }],
        [
          "path",
          { d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2", key: "1q8uv5" }
        ]
      ]);
      var ShowerHead = createLucideIcon("ShowerHead", [
        ["path", { d: "m4 4 2.5 2.5", key: "uv2vmf" }],
        ["path", { d: "M13.5 6.5a4.95 4.95 0 0 0-7 7", key: "frdkwv" }],
        ["path", { d: "M15 5 5 15", key: "1ag8rq" }],
        ["path", { d: "M14 17v.01", key: "eokfpp" }],
        ["path", { d: "M10 16v.01", key: "14uyyl" }],
        ["path", { d: "M13 13v.01", key: "1v1k97" }],
        ["path", { d: "M16 10v.01", key: "5169yg" }],
        ["path", { d: "M11 20v.01", key: "cj92p8" }],
        ["path", { d: "M17 14v.01", key: "11cswd" }],
        ["path", { d: "M20 11v.01", key: "19e0od" }]
      ]);
      var Shrink = createLucideIcon("Shrink", [
        ["path", { d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8", key: "17vawe" }],
        ["path", { d: "M9 19.8V15m0 0H4.2M9 15l-6 6", key: "chjx8e" }],
        ["path", { d: "M15 4.2V9m0 0h4.8M15 9l6-6", key: "lav6yq" }],
        ["path", { d: "M9 4.2V9m0 0H4.2M9 9 3 3", key: "1pxi2q" }]
      ]);
      var Shrub = createLucideIcon("Shrub", [
        ["path", { d: "M12 22v-7l-2-2", key: "eqv9mc" }],
        [
          "path",
          { d: "M17 8v.8A6 6 0 0 1 13.8 20v0H10v0A6.5 6.5 0 0 1 7 8h0a5 5 0 0 1 10 0Z", key: "12jcau" }
        ],
        ["path", { d: "m14 14-2 2", key: "847xa2" }]
      ]);
      var Shuffle = createLucideIcon("Shuffle", [
        ["path", { d: "M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22", key: "1wmou1" }],
        ["path", { d: "m18 2 4 4-4 4", key: "pucp1d" }],
        ["path", { d: "M2 6h1.9c1.5 0 2.9.9 3.6 2.2", key: "10bdb2" }],
        ["path", { d: "M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8", key: "vgxac0" }],
        ["path", { d: "m18 14 4 4-4 4", key: "10pe0f" }]
      ]);
      var SigmaSquare = createLucideIcon("SigmaSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M16 8.9V7H8l4 5-4 5h8v-1.9", key: "9nih0i" }]
      ]);
      var Sigma = createLucideIcon("Sigma", [
        ["path", { d: "M18 7V4H6l6 8-6 8h12v-3", key: "zis8ev" }]
      ]);
      var SignalHigh = createLucideIcon("SignalHigh", [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M17 20V8", key: "1tkaf5" }]
      ]);
      var SignalLow = createLucideIcon("SignalLow", [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }]
      ]);
      var SignalMedium = createLucideIcon("SignalMedium", [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }]
      ]);
      var SignalZero = createLucideIcon("SignalZero", [["path", { d: "M2 20h.01", key: "4haj6o" }]]);
      var Signal = createLucideIcon("Signal", [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M17 20V8", key: "1tkaf5" }],
        ["path", { d: "M22 4v16", key: "sih9yq" }]
      ]);
      var SignpostBig = createLucideIcon("SignpostBig", [
        ["path", { d: "M10 9H4L2 7l2-2h6", key: "1hq7x2" }],
        ["path", { d: "M14 5h6l2 2-2 2h-6", key: "bv62ej" }],
        ["path", { d: "M10 22V4a2 2 0 1 1 4 0v18", key: "eqpcf2" }],
        ["path", { d: "M8 22h8", key: "rmew8v" }]
      ]);
      var Signpost = createLucideIcon("Signpost", [
        ["path", { d: "M12 3v3", key: "1n5kay" }],
        ["path", { d: "M18.5 13h-13L2 9.5 5.5 6h13L22 9.5Z", key: "27os56" }],
        ["path", { d: "M12 13v8", key: "1l5pq0" }]
      ]);
      var Siren = createLucideIcon("Siren", [
        ["path", { d: "M7 12a5 5 0 0 1 5-5v0a5 5 0 0 1 5 5v6H7v-6Z", key: "rmc51c" }],
        ["path", { d: "M5 20a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v2H5v-2Z", key: "yyvmjy" }],
        ["path", { d: "M21 12h1", key: "jtio3y" }],
        ["path", { d: "M18.5 4.5 18 5", key: "g5sp9y" }],
        ["path", { d: "M2 12h1", key: "1uaihz" }],
        ["path", { d: "M12 2v1", key: "11qlp1" }],
        ["path", { d: "m4.929 4.929.707.707", key: "1i51kw" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }]
      ]);
      var SkipBack = createLucideIcon("SkipBack", [
        ["polygon", { points: "19 20 9 12 19 4 19 20", key: "o2sva" }],
        ["line", { x1: "5", x2: "5", y1: "19", y2: "5", key: "1ocqjk" }]
      ]);
      var SkipForward = createLucideIcon("SkipForward", [
        ["polygon", { points: "5 4 15 12 5 20 5 4", key: "16p6eg" }],
        ["line", { x1: "19", x2: "19", y1: "5", y2: "19", key: "futhcm" }]
      ]);
      var Skull = createLucideIcon("Skull", [
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
        ["path", { d: "M8 20v2h8v-2", key: "ded4og" }],
        ["path", { d: "m12.5 17-.5-1-.5 1h1z", key: "3me087" }],
        ["path", { d: "M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20", key: "xq9p5u" }]
      ]);
      var Slack = createLucideIcon("Slack", [
        ["rect", { width: "3", height: "8", x: "13", y: "2", rx: "1.5", key: "diqz80" }],
        ["path", { d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5", key: "183iwg" }],
        ["rect", { width: "3", height: "8", x: "8", y: "14", rx: "1.5", key: "hqg7r1" }],
        ["path", { d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5", key: "76g71w" }],
        ["rect", { width: "8", height: "3", x: "14", y: "13", rx: "1.5", key: "1kmz0a" }],
        ["path", { d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5", key: "jc4sz0" }],
        ["rect", { width: "8", height: "3", x: "2", y: "8", rx: "1.5", key: "1omvl4" }],
        ["path", { d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5", key: "16f3cl" }]
      ]);
      var SlashSquare = createLucideIcon("SlashSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }]
      ]);
      var Slash = createLucideIcon("Slash", [["path", { d: "M22 2 2 22", key: "y4kqgn" }]]);
      var Slice = createLucideIcon("Slice", [
        ["path", { d: "m8 14-6 6h9v-3", key: "zo3j9a" }],
        ["path", { d: "M18.37 3.63 8 14l3 3L21.37 6.63a2.12 2.12 0 1 0-3-3Z", key: "1dzx0j" }]
      ]);
      var SlidersHorizontal = createLucideIcon("SlidersHorizontal", [
        ["line", { x1: "21", x2: "14", y1: "4", y2: "4", key: "obuewd" }],
        ["line", { x1: "10", x2: "3", y1: "4", y2: "4", key: "1q6298" }],
        ["line", { x1: "21", x2: "12", y1: "12", y2: "12", key: "1iu8h1" }],
        ["line", { x1: "8", x2: "3", y1: "12", y2: "12", key: "ntss68" }],
        ["line", { x1: "21", x2: "16", y1: "20", y2: "20", key: "14d8ph" }],
        ["line", { x1: "12", x2: "3", y1: "20", y2: "20", key: "m0wm8r" }],
        ["line", { x1: "14", x2: "14", y1: "2", y2: "6", key: "14e1ph" }],
        ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
        ["line", { x1: "16", x2: "16", y1: "18", y2: "22", key: "1lctlv" }]
      ]);
      var Sliders = createLucideIcon("Sliders", [
        ["line", { x1: "4", x2: "4", y1: "21", y2: "14", key: "1p332r" }],
        ["line", { x1: "4", x2: "4", y1: "10", y2: "3", key: "gb41h5" }],
        ["line", { x1: "12", x2: "12", y1: "21", y2: "12", key: "hf2csr" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "3", key: "1kfi7u" }],
        ["line", { x1: "20", x2: "20", y1: "21", y2: "16", key: "1lhrwl" }],
        ["line", { x1: "20", x2: "20", y1: "12", y2: "3", key: "16vvfq" }],
        ["line", { x1: "2", x2: "6", y1: "14", y2: "14", key: "1uebub" }],
        ["line", { x1: "10", x2: "14", y1: "8", y2: "8", key: "1yglbp" }],
        ["line", { x1: "18", x2: "22", y1: "16", y2: "16", key: "1jxqpz" }]
      ]);
      var SmartphoneCharging = createLucideIcon("SmartphoneCharging", [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
        ["path", { d: "M12.667 8 10 12h4l-2.667 4", key: "h9lk2d" }]
      ]);
      var SmartphoneNfc = createLucideIcon("SmartphoneNfc", [
        ["rect", { width: "7", height: "12", x: "2", y: "6", rx: "1", key: "5nje8w" }],
        ["path", { d: "M13 8.32a7.43 7.43 0 0 1 0 7.36", key: "1g306n" }],
        ["path", { d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "uqvjvo" }],
        ["path", { d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "ujntz3" }]
      ]);
      var Smartphone = createLucideIcon("Smartphone", [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }]
      ]);
      var SmilePlus = createLucideIcon("SmilePlus", [
        ["path", { d: "M22 11v1a10 10 0 1 1-9-10", key: "ew0xw9" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }],
        ["path", { d: "M16 5h6", key: "1vod17" }],
        ["path", { d: "M19 2v6", key: "4bpg5p" }]
      ]);
      var Smile = createLucideIcon("Smile", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ]);
      var Snail = createLucideIcon("Snail", [
        ["path", { d: "M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0", key: "hneq2s" }],
        ["circle", { cx: "10", cy: "13", r: "8", key: "194lz3" }],
        ["path", { d: "M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6", key: "ixqyt7" }],
        ["path", { d: "M18 3 19.1 5.2", key: "9tjm43" }],
        ["path", { d: "M22 3 20.9 5.2", key: "j3odrs" }]
      ]);
      var Snowflake = createLucideIcon("Snowflake", [
        ["line", { x1: "2", x2: "22", y1: "12", y2: "12", key: "1dnqot" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
        ["path", { d: "m20 16-4-4 4-4", key: "rquw4f" }],
        ["path", { d: "m4 8 4 4-4 4", key: "12s3z9" }],
        ["path", { d: "m16 4-4 4-4-4", key: "1tumq1" }],
        ["path", { d: "m8 20 4-4 4 4", key: "9p200w" }]
      ]);
      var Sofa = createLucideIcon("Sofa", [
        ["path", { d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3", key: "1dgpiv" }],
        [
          "path",
          {
            d: "M2 11v5a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H6v-2a2 2 0 0 0-4 0Z",
            key: "u5qfb7"
          }
        ],
        ["path", { d: "M4 18v2", key: "jwo5n2" }],
        ["path", { d: "M20 18v2", key: "1ar1qi" }],
        ["path", { d: "M12 4v9", key: "oqhhn3" }]
      ]);
      var Soup = createLucideIcon("Soup", [
        ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M19.5 12 22 6", key: "shfsr5" }],
        [
          "path",
          {
            d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62",
            key: "rpc6vp"
          }
        ],
        [
          "path",
          {
            d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62",
            key: "1lf63m"
          }
        ],
        [
          "path",
          { d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62", key: "97tijn" }
        ]
      ]);
      var Space = createLucideIcon("Space", [
        ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
      ]);
      var Spade = createLucideIcon("Spade", [
        [
          "path",
          {
            d: "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z",
            key: "40bo9n"
          }
        ],
        ["path", { d: "M12 18v4", key: "jadmvz" }]
      ]);
      var Sparkle = createLucideIcon("Sparkle", [
        [
          "path",
          {
            d: "m12 3-1.9 5.8a2 2 0 0 1-1.287 1.288L3 12l5.8 1.9a2 2 0 0 1 1.288 1.287L12 21l1.9-5.8a2 2 0 0 1 1.287-1.288L21 12l-5.8-1.9a2 2 0 0 1-1.288-1.287Z",
            key: "nraa5p"
          }
        ]
      ]);
      var Sparkles = createLucideIcon("Sparkles", [
        [
          "path",
          {
            d: "m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z",
            key: "17u4zn"
          }
        ],
        ["path", { d: "M5 3v4", key: "bklmnn" }],
        ["path", { d: "M19 17v4", key: "iiml17" }],
        ["path", { d: "M3 5h4", key: "nem4j1" }],
        ["path", { d: "M17 19h4", key: "lbex7p" }]
      ]);
      var Speaker = createLucideIcon("Speaker", [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M12 6h.01", key: "1vi96p" }],
        ["circle", { cx: "12", cy: "14", r: "4", key: "1jruaj" }],
        ["path", { d: "M12 14h.01", key: "1etili" }]
      ]);
      var Speech = createLucideIcon("Speech", [
        [
          "path",
          {
            d: "M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20",
            key: "11atix"
          }
        ],
        ["path", { d: "M19.8 17.8a7.5 7.5 0 0 0 .003-10.603", key: "yol142" }],
        ["path", { d: "M17 15a3.5 3.5 0 0 0-.025-4.975", key: "ssbmkc" }]
      ]);
      var SpellCheck2 = createLucideIcon("SpellCheck2", [
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        [
          "path",
          {
            d: "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1",
            key: "8mdmtu"
          }
        ]
      ]);
      var SpellCheck = createLucideIcon("SpellCheck", [
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
      ]);
      var Spline = createLucideIcon("Spline", [
        ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
        ["path", { d: "M5 17A12 12 0 0 1 17 5", key: "1okkup" }]
      ]);
      var SplitSquareHorizontal = createLucideIcon("SplitSquareHorizontal", [
        ["path", { d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3", key: "lubmu8" }],
        ["path", { d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3", key: "1ag34g" }],
        ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
      ]);
      var SplitSquareVertical = createLucideIcon("SplitSquareVertical", [
        ["path", { d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3", key: "1pi83i" }],
        ["path", { d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3", key: "ido5k7" }],
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
      ]);
      var Split = createLucideIcon("Split", [
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "M8 3H3v5", key: "15dfkv" }],
        ["path", { d: "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3", key: "1qrqzj" }],
        ["path", { d: "m15 9 6-6", key: "ko1vev" }]
      ]);
      var SprayCan = createLucideIcon("SprayCan", [
        ["path", { d: "M3 3h.01", key: "159qn6" }],
        ["path", { d: "M7 5h.01", key: "1hq22a" }],
        ["path", { d: "M11 7h.01", key: "1osv80" }],
        ["path", { d: "M3 7h.01", key: "1xzrh3" }],
        ["path", { d: "M7 9h.01", key: "19b3jx" }],
        ["path", { d: "M3 11h.01", key: "1eifu7" }],
        ["rect", { width: "4", height: "4", x: "15", y: "5", key: "mri9e4" }],
        ["path", { d: "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2", key: "aib6hk" }],
        ["path", { d: "m13 14 8-2", key: "1d7bmk" }],
        ["path", { d: "m13 19 8-2", key: "1y2vml" }]
      ]);
      var Sprout = createLucideIcon("Sprout", [
        ["path", { d: "M7 20h10", key: "e6iznv" }],
        ["path", { d: "M10 20c5.5-2.5.8-6.4 3-10", key: "161w41" }],
        [
          "path",
          {
            d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z",
            key: "9gtqwd"
          }
        ],
        [
          "path",
          {
            d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z",
            key: "bkxnd2"
          }
        ]
      ]);
      var SquareDashedBottomCode = createLucideIcon("SquareDashedBottomCode", [
        ["path", { d: "m10 10-2 2 2 2", key: "p6et6i" }],
        ["path", { d: "m14 14 2-2-2-2", key: "m075q2" }],
        [
          "path",
          { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
        ],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }]
      ]);
      var SquareDashedBottom = createLucideIcon("SquareDashedBottom", [
        [
          "path",
          { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
        ],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }]
      ]);
      var SquarePen = createLucideIcon("SquarePen", [
        ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
        ["path", { d: "M18.375 2.625a2.121 2.121 0 1 1 3 3L12 15l-4 1 1-4Z", key: "1lpok0" }]
      ]);
      var SquareStack = createLucideIcon("SquareStack", [
        ["path", { d: "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "4i38lg" }],
        ["path", { d: "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "mlte4a" }],
        ["rect", { width: "8", height: "8", x: "14", y: "14", rx: "2", key: "1fa9i4" }]
      ]);
      var SquareUserRound = createLucideIcon("SquareUserRound", [
        ["path", { d: "M18 21a6 6 0 0 0-12 0", key: "kaz2du" }],
        ["circle", { cx: "12", cy: "11", r: "4", key: "1gt34v" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ]);
      var SquareUser = createLucideIcon("SquareUser", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2", key: "1m6ac2" }]
      ]);
      var Square = createLucideIcon("Square", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ]);
      var Squircle = createLucideIcon("Squircle", [
        ["path", { d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9", key: "garfkc" }]
      ]);
      var Squirrel = createLucideIcon("Squirrel", [
        ["path", { d: "M15.236 22a3 3 0 0 0-2.2-5", key: "21bitc" }],
        ["path", { d: "M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4", key: "oh0fg0" }],
        ["path", { d: "M18 13h.01", key: "9veqaj" }],
        [
          "path",
          {
            d: "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10",
            key: "980v8a"
          }
        ]
      ]);
      var Stamp = createLucideIcon("Stamp", [
        ["path", { d: "M5 22h14", key: "ehvnwv" }],
        [
          "path",
          {
            d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z",
            key: "1sy9ra"
          }
        ],
        [
          "path",
          { d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13", key: "cnxgux" }
        ]
      ]);
      var StarHalf = createLucideIcon("StarHalf", [
        ["path", { d: "M12 17.8 5.8 21 7 14.1 2 9.3l7-1L12 2", key: "nare05" }]
      ]);
      var StarOff = createLucideIcon("StarOff", [
        ["path", { d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43", key: "16m0ql" }],
        ["path", { d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91", key: "1vt8nq" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Star = createLucideIcon("Star", [
        [
          "polygon",
          {
            points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2",
            key: "8f66p6"
          }
        ]
      ]);
      var StepBack = createLucideIcon("StepBack", [
        ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
        ["polygon", { points: "14,20 4,12 14,4", key: "ypakod" }]
      ]);
      var StepForward = createLucideIcon("StepForward", [
        ["line", { x1: "6", x2: "6", y1: "4", y2: "20", key: "fy8qot" }],
        ["polygon", { points: "10,4 20,12 10,20", key: "1mc1pf" }]
      ]);
      var Stethoscope = createLucideIcon("Stethoscope", [
        [
          "path",
          {
            d: "M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3",
            key: "1jd90r"
          }
        ],
        ["path", { d: "M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4", key: "126ukv" }],
        ["circle", { cx: "20", cy: "10", r: "2", key: "ts1r5v" }]
      ]);
      var Sticker = createLucideIcon("Sticker", [
        [
          "path",
          { d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z", key: "1wis1t" }
        ],
        ["path", { d: "M14 3v4a2 2 0 0 0 2 2h4", key: "36rjfy" }],
        ["path", { d: "M8 13h0", key: "jdup5h" }],
        ["path", { d: "M16 13h0", key: "l4i2ga" }],
        ["path", { d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1", key: "1vvgv3" }]
      ]);
      var StickyNote = createLucideIcon("StickyNote", [
        ["path", { d: "M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z", key: "qazsjp" }],
        ["path", { d: "M15 3v4a2 2 0 0 0 2 2h4", key: "40519r" }]
      ]);
      var StopCircle = createLucideIcon("StopCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["rect", { width: "6", height: "6", x: "9", y: "9", key: "1wrtvo" }]
      ]);
      var Store = createLucideIcon("Store", [
        ["path", { d: "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7", key: "ztvudi" }],
        ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
        ["path", { d: "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4", key: "2ebpfo" }],
        ["path", { d: "M2 7h20", key: "1fcdvo" }],
        [
          "path",
          {
            d: "M22 7v3a2 2 0 0 1-2 2v0a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12v0a2 2 0 0 1-2-2V7",
            key: "jon5kx"
          }
        ]
      ]);
      var StretchHorizontal = createLucideIcon("StretchHorizontal", [
        ["rect", { width: "20", height: "6", x: "2", y: "4", rx: "2", key: "qdearl" }],
        ["rect", { width: "20", height: "6", x: "2", y: "14", rx: "2", key: "1xrn6j" }]
      ]);
      var StretchVertical = createLucideIcon("StretchVertical", [
        ["rect", { width: "6", height: "20", x: "4", y: "2", rx: "2", key: "19qu7m" }],
        ["rect", { width: "6", height: "20", x: "14", y: "2", rx: "2", key: "24v0nk" }]
      ]);
      var Strikethrough = createLucideIcon("Strikethrough", [
        ["path", { d: "M16 4H9a3 3 0 0 0-2.83 4", key: "43sutm" }],
        ["path", { d: "M14 12a4 4 0 0 1 0 8H6", key: "nlfj13" }],
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
      ]);
      var Subscript = createLucideIcon("Subscript", [
        ["path", { d: "m4 5 8 8", key: "1eunvl" }],
        ["path", { d: "m12 5-8 8", key: "1ah0jp" }],
        [
          "path",
          {
            d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07",
            key: "e8ta8j"
          }
        ]
      ]);
      var Subtitles = createLucideIcon("Subtitles", [
        ["path", { d: "M7 13h4", key: "1m1xj0" }],
        ["path", { d: "M15 13h2", key: "vgjay3" }],
        ["path", { d: "M7 9h2", key: "1q072n" }],
        ["path", { d: "M13 9h4", key: "o7fxw0" }],
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2Z", key: "5somay" }]
      ]);
      var SunDim = createLucideIcon("SunDim", [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 4h.01", key: "1ujb9j" }],
        ["path", { d: "M20 12h.01", key: "1ykeid" }],
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M4 12h.01", key: "158zrr" }],
        ["path", { d: "M17.657 6.343h.01", key: "31pqzk" }],
        ["path", { d: "M17.657 17.657h.01", key: "jehnf4" }],
        ["path", { d: "M6.343 17.657h.01", key: "gdk6ow" }],
        ["path", { d: "M6.343 6.343h.01", key: "1uurf0" }]
      ]);
      var SunMedium = createLucideIcon("SunMedium", [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 3v1", key: "1asbbs" }],
        ["path", { d: "M12 20v1", key: "1wcdkc" }],
        ["path", { d: "M3 12h1", key: "lp3yf2" }],
        ["path", { d: "M20 12h1", key: "1vloll" }],
        ["path", { d: "m18.364 5.636-.707.707", key: "1hakh0" }],
        ["path", { d: "m6.343 17.657-.707.707", key: "18m9nf" }],
        ["path", { d: "m5.636 5.636.707.707", key: "1xv1c5" }],
        ["path", { d: "m17.657 17.657.707.707", key: "vl76zb" }]
      ]);
      var SunMoon = createLucideIcon("SunMoon", [
        ["path", { d: "M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4", key: "1fu5g2" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m4.9 4.9 1.4 1.4", key: "b9915j" }],
        ["path", { d: "m17.7 17.7 1.4 1.4", key: "qc3ed3" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m6.3 17.7-1.4 1.4", key: "5gca6" }],
        ["path", { d: "m19.1 4.9-1.4 1.4", key: "wpu9u6" }]
      ]);
      var SunSnow = createLucideIcon("SunSnow", [
        ["path", { d: "M10 9a3 3 0 1 0 0 6", key: "6zmtdl" }],
        ["path", { d: "M2 12h1", key: "1uaihz" }],
        ["path", { d: "M14 21V3", key: "1llu3z" }],
        ["path", { d: "M10 4V3", key: "pkzwkn" }],
        ["path", { d: "M10 21v-1", key: "1u8rkd" }],
        ["path", { d: "m3.64 18.36.7-.7", key: "105rm9" }],
        ["path", { d: "m4.34 6.34-.7-.7", key: "d3unjp" }],
        ["path", { d: "M14 12h8", key: "4f43i9" }],
        ["path", { d: "m17 4-3 3", key: "15jcng" }],
        ["path", { d: "m14 17 3 3", key: "6tlq38" }],
        ["path", { d: "m21 15-3-3 3-3", key: "1nlnje" }]
      ]);
      var Sun = createLucideIcon("Sun", [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
      ]);
      var Sunrise = createLucideIcon("Sunrise", [
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
        ["path", { d: "M2 18h2", key: "j10viu" }],
        ["path", { d: "M20 18h2", key: "wocana" }],
        ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }],
        ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
        ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
      ]);
      var Sunset = createLucideIcon("Sunset", [
        ["path", { d: "M12 10V2", key: "16sf7g" }],
        ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
        ["path", { d: "M2 18h2", key: "j10viu" }],
        ["path", { d: "M20 18h2", key: "wocana" }],
        ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }],
        ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
        ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
      ]);
      var Superscript = createLucideIcon("Superscript", [
        ["path", { d: "m4 19 8-8", key: "hr47gm" }],
        ["path", { d: "m12 19-8-8", key: "1dhhmo" }],
        [
          "path",
          {
            d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06",
            key: "1dfcux"
          }
        ]
      ]);
      var SwatchBook = createLucideIcon("SwatchBook", [
        ["path", { d: "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z", key: "1ldrpk" }],
        ["path", { d: "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7", key: "11i5po" }],
        ["path", { d: "M 7 17h0.01", key: "10821z" }],
        [
          "path",
          {
            d: "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8",
            key: "o2gii7"
          }
        ]
      ]);
      var SwissFranc = createLucideIcon("SwissFranc", [
        ["path", { d: "M10 21V3h8", key: "br2l0g" }],
        ["path", { d: "M6 16h9", key: "2py0wn" }],
        ["path", { d: "M10 9.5h7", key: "13dmhz" }]
      ]);
      var SwitchCamera = createLucideIcon("SwitchCamera", [
        ["path", { d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5", key: "mtk2lu" }],
        ["path", { d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5", key: "120jsl" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "m18 22-3-3 3-3", key: "kgdoj7" }],
        ["path", { d: "m6 2 3 3-3 3", key: "1fnbkv" }]
      ]);
      var Sword = createLucideIcon("Sword", [
        ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
        ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
        ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
        ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }]
      ]);
      var Swords = createLucideIcon("Swords", [
        ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
        ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
        ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
        ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }],
        ["polyline", { points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5", key: "hbey2j" }],
        ["line", { x1: "5", x2: "9", y1: "14", y2: "18", key: "1hf58s" }],
        ["line", { x1: "7", x2: "4", y1: "17", y2: "20", key: "pidxm4" }],
        ["line", { x1: "3", x2: "5", y1: "19", y2: "21", key: "1pehsh" }]
      ]);
      var Syringe = createLucideIcon("Syringe", [
        ["path", { d: "m18 2 4 4", key: "22kx64" }],
        ["path", { d: "m17 7 3-3", key: "1w1zoj" }],
        ["path", { d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5", key: "1exhtz" }],
        ["path", { d: "m9 11 4 4", key: "rovt3i" }],
        ["path", { d: "m5 19-3 3", key: "59f2uf" }],
        ["path", { d: "m14 4 6 6", key: "yqp9t2" }]
      ]);
      var Table2 = createLucideIcon("Table2", [
        [
          "path",
          {
            d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
            key: "gugj83"
          }
        ]
      ]);
      var TableProperties = createLucideIcon("TableProperties", [
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 9H3", key: "1338ky" }],
        ["path", { d: "M21 15H3", key: "9uk58r" }]
      ]);
      var Table = createLucideIcon("Table", [
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M3 15h18", key: "5xshup" }]
      ]);
      var TabletSmartphone = createLucideIcon("TabletSmartphone", [
        ["rect", { width: "10", height: "14", x: "3", y: "8", rx: "2", key: "1vrsiq" }],
        ["path", { d: "M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4", key: "1j4zmg" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }]
      ]);
      var Tablet = createLucideIcon("Tablet", [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
        ["line", { x1: "12", x2: "12.01", y1: "18", y2: "18", key: "1dp563" }]
      ]);
      var Tablets = createLucideIcon("Tablets", [
        ["circle", { cx: "7", cy: "7", r: "5", key: "x29byf" }],
        ["circle", { cx: "17", cy: "17", r: "5", key: "1op1d2" }],
        ["path", { d: "M12 17h10", key: "ls21zv" }],
        ["path", { d: "m3.46 10.54 7.08-7.08", key: "1rehiu" }]
      ]);
      var Tag = createLucideIcon("Tag", [
        [
          "path",
          {
            d: "M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",
            key: "14b2ls"
          }
        ],
        ["path", { d: "M7 7h.01", key: "7u93v4" }]
      ]);
      var Tags = createLucideIcon("Tags", [
        [
          "path",
          {
            d: "M9 5H2v7l6.29 6.29c.94.94 2.48.94 3.42 0l3.58-3.58c.94-.94.94-2.48 0-3.42L9 5Z",
            key: "gt587u"
          }
        ],
        ["path", { d: "M6 9.01V9", key: "1flxpt" }],
        ["path", { d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19", key: "1cbfv1" }]
      ]);
      var Tally1 = createLucideIcon("Tally1", [["path", { d: "M4 4v16", key: "6qkkli" }]]);
      var Tally2 = createLucideIcon("Tally2", [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }]
      ]);
      var Tally3 = createLucideIcon("Tally3", [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }]
      ]);
      var Tally4 = createLucideIcon("Tally4", [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }],
        ["path", { d: "M19 4v16", key: "8ij5ei" }]
      ]);
      var Tally5 = createLucideIcon("Tally5", [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }],
        ["path", { d: "M19 4v16", key: "8ij5ei" }],
        ["path", { d: "M22 6 2 18", key: "h9moai" }]
      ]);
      var Tangent = createLucideIcon("Tangent", [
        ["circle", { cx: "17", cy: "4", r: "2", key: "y5j2s2" }],
        ["path", { d: "M15.59 5.41 5.41 15.59", key: "l0vprr" }],
        ["circle", { cx: "4", cy: "17", r: "2", key: "9p4efm" }],
        ["path", { d: "M12 22s-4-9-1.5-11.5S22 12 22 12", key: "1twk4o" }]
      ]);
      var Target = createLucideIcon("Target", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ]);
      var TentTree = createLucideIcon("TentTree", [
        ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }],
        ["path", { d: "m14 5 3-3 3 3", key: "1sorif" }],
        ["path", { d: "m14 10 3-3 3 3", key: "1jyi9h" }],
        ["path", { d: "M17 14V2", key: "8ymqnk" }],
        ["path", { d: "M17 14H7l-5 8h20Z", key: "13ar7p" }],
        ["path", { d: "M8 14v8", key: "1ghmqk" }],
        ["path", { d: "m9 14 5 8", key: "13pgi6" }]
      ]);
      var Tent = createLucideIcon("Tent", [
        ["path", { d: "M3.5 21 14 3", key: "1szst5" }],
        ["path", { d: "M20.5 21 10 3", key: "1310c3" }],
        ["path", { d: "M15.5 21 12 15l-3.5 6", key: "1ddtfw" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }]
      ]);
      var TerminalSquare = createLucideIcon("TerminalSquare", [
        ["path", { d: "m7 11 2-2-2-2", key: "1lz0vl" }],
        ["path", { d: "M11 13h4", key: "1p7l4v" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }]
      ]);
      var Terminal = createLucideIcon("Terminal", [
        ["polyline", { points: "4 17 10 11 4 5", key: "akl6gq" }],
        ["line", { x1: "12", x2: "20", y1: "19", y2: "19", key: "q2wloq" }]
      ]);
      var TestTube2 = createLucideIcon("TestTube2", [
        [
          "path",
          { d: "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01v0a2.83 2.83 0 0 1 0-4L17 3", key: "dg8b2p" }
        ],
        ["path", { d: "m16 2 6 6", key: "1gw87d" }],
        ["path", { d: "M12 16H4", key: "1cjfip" }]
      ]);
      var TestTube = createLucideIcon("TestTube", [
        ["path", { d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5h0c-1.4 0-2.5-1.1-2.5-2.5V2", key: "187lwq" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }],
        ["path", { d: "M14.5 16h-5", key: "1ox875" }]
      ]);
      var TestTubes = createLucideIcon("TestTubes", [
        ["path", { d: "M9 2v17.5A2.5 2.5 0 0 1 6.5 22v0A2.5 2.5 0 0 1 4 19.5V2", key: "12z67u" }],
        ["path", { d: "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5v0a2.5 2.5 0 0 1-2.5-2.5V2", key: "1q2nfy" }],
        ["path", { d: "M3 2h7", key: "7s29d5" }],
        ["path", { d: "M14 2h7", key: "7sicin" }],
        ["path", { d: "M9 16H4", key: "1bfye3" }],
        ["path", { d: "M20 16h-5", key: "ddnjpe" }]
      ]);
      var TextCursorInput = createLucideIcon("TextCursorInput", [
        ["path", { d: "M5 4h1a3 3 0 0 1 3 3 3 3 0 0 1 3-3h1", key: "18xjzo" }],
        ["path", { d: "M13 20h-1a3 3 0 0 1-3-3 3 3 0 0 1-3 3H5", key: "fj48gi" }],
        ["path", { d: "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1", key: "1n9rhb" }],
        ["path", { d: "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7", key: "13ksps" }],
        ["path", { d: "M9 7v10", key: "1vc8ob" }]
      ]);
      var TextCursor = createLucideIcon("TextCursor", [
        ["path", { d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1", key: "uvaxm9" }],
        ["path", { d: "M7 22h1a4 4 0 0 0 4-4v-1", key: "11xy8d" }],
        ["path", { d: "M7 2h1a4 4 0 0 1 4 4v1", key: "1uw06m" }]
      ]);
      var TextQuote = createLucideIcon("TextQuote", [
        ["path", { d: "M17 6H3", key: "16j9eg" }],
        ["path", { d: "M21 12H8", key: "scolzb" }],
        ["path", { d: "M21 18H8", key: "1wfozv" }],
        ["path", { d: "M3 12v6", key: "fv4c87" }]
      ]);
      var TextSearch = createLucideIcon("TextSearch", [
        ["path", { d: "M21 6H3", key: "1jwq7v" }],
        ["path", { d: "M10 12H3", key: "1ulcyk" }],
        ["path", { d: "M10 18H3", key: "13769t" }],
        ["circle", { cx: "17", cy: "15", r: "3", key: "1upz2a" }],
        ["path", { d: "m21 19-1.9-1.9", key: "dwi7p8" }]
      ]);
      var TextSelect = createLucideIcon("TextSelect", [
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M21 14v1", key: "169vum" }],
        ["line", { x1: "7", x2: "15", y1: "8", y2: "8", key: "1758g8" }],
        ["line", { x1: "7", x2: "17", y1: "12", y2: "12", key: "197423" }],
        ["line", { x1: "7", x2: "13", y1: "16", y2: "16", key: "37cgm6" }]
      ]);
      var Text = createLucideIcon("Text", [
        ["path", { d: "M17 6.1H3", key: "wptmhv" }],
        ["path", { d: "M21 12.1H3", key: "1j38uz" }],
        ["path", { d: "M15.1 18H3", key: "1nb16a" }]
      ]);
      var Theater = createLucideIcon("Theater", [
        ["path", { d: "M2 10s3-3 3-8", key: "3xiif0" }],
        ["path", { d: "M22 10s-3-3-3-8", key: "ioaa5q" }],
        ["path", { d: "M10 2c0 4.4-3.6 8-8 8", key: "16fkpi" }],
        ["path", { d: "M14 2c0 4.4 3.6 8 8 8", key: "b9eulq" }],
        ["path", { d: "M2 10s2 2 2 5", key: "1au1lb" }],
        ["path", { d: "M22 10s-2 2-2 5", key: "qi2y5e" }],
        ["path", { d: "M8 15h8", key: "45n4r" }],
        ["path", { d: "M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "1vsc2m" }],
        ["path", { d: "M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "hrha4u" }]
      ]);
      var ThermometerSnowflake = createLucideIcon("ThermometerSnowflake", [
        ["path", { d: "M2 12h10", key: "19562f" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "m3 9 3 3-3 3", key: "1sas0l" }],
        ["path", { d: "M12 6 9 9 6 6", key: "pfrgxu" }],
        ["path", { d: "m6 18 3-3 1.5 1.5", key: "1e277p" }],
        ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }]
      ]);
      var ThermometerSun = createLucideIcon("ThermometerSun", [
        ["path", { d: "M12 9a4 4 0 0 0-2 7.5", key: "1jvsq6" }],
        ["path", { d: "M12 3v2", key: "1w22ol" }],
        ["path", { d: "m6.6 18.4-1.4 1.4", key: "w2yidj" }],
        ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }],
        ["path", { d: "M4 13H2", key: "118le4" }],
        ["path", { d: "M6.34 7.34 4.93 5.93", key: "1brd51" }]
      ]);
      var Thermometer = createLucideIcon("Thermometer", [
        ["path", { d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "17jzev" }]
      ]);
      var ThumbsDown = createLucideIcon("ThumbsDown", [
        ["path", { d: "M17 14V2", key: "8ymqnk" }],
        [
          "path",
          {
            d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z",
            key: "s6e0r"
          }
        ]
      ]);
      var ThumbsUp = createLucideIcon("ThumbsUp", [
        ["path", { d: "M7 10v12", key: "1qc93n" }],
        [
          "path",
          {
            d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z",
            key: "y3tblf"
          }
        ]
      ]);
      var TicketCheck = createLucideIcon("TicketCheck", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ]);
      var TicketMinus = createLucideIcon("TicketMinus", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }]
      ]);
      var TicketPercent = createLucideIcon("TicketPercent", [
        [
          "path",
          {
            d: "M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "1l48ns"
          }
        ],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ]);
      var TicketPlus = createLucideIcon("TicketPlus", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }],
        ["path", { d: "M12 9v6", key: "199k2o" }]
      ]);
      var TicketSlash = createLucideIcon("TicketSlash", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }]
      ]);
      var TicketX = createLucideIcon("TicketX", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }],
        ["path", { d: "m9.5 9.5 5 5", key: "18nt4w" }]
      ]);
      var Ticket = createLucideIcon("Ticket", [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M13 5v2", key: "dyzc3o" }],
        ["path", { d: "M13 17v2", key: "1ont0d" }],
        ["path", { d: "M13 11v2", key: "1wjjxi" }]
      ]);
      var TimerOff = createLucideIcon("TimerOff", [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        ["path", { d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7", key: "10he05" }],
        ["path", { d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2", key: "15f7sh" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M12 12v-2", key: "fwoke6" }]
      ]);
      var TimerReset = createLucideIcon("TimerReset", [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        ["path", { d: "M12 14v-4", key: "1evpnu" }],
        ["path", { d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6", key: "1ts96g" }],
        ["path", { d: "M9 17H4v5", key: "8t5av" }]
      ]);
      var Timer = createLucideIcon("Timer", [
        ["line", { x1: "10", x2: "14", y1: "2", y2: "2", key: "14vaq8" }],
        ["line", { x1: "12", x2: "15", y1: "14", y2: "11", key: "17fdiu" }],
        ["circle", { cx: "12", cy: "14", r: "8", key: "1e1u0o" }]
      ]);
      var ToggleLeft = createLucideIcon("ToggleLeft", [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "6", ry: "6", key: "f2vt7d" }],
        ["circle", { cx: "8", cy: "12", r: "2", key: "1nvbw3" }]
      ]);
      var ToggleRight = createLucideIcon("ToggleRight", [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "6", ry: "6", key: "f2vt7d" }],
        ["circle", { cx: "16", cy: "12", r: "2", key: "4ma0v8" }]
      ]);
      var Tornado = createLucideIcon("Tornado", [
        ["path", { d: "M21 4H3", key: "1hwok0" }],
        ["path", { d: "M18 8H6", key: "41n648" }],
        ["path", { d: "M19 12H9", key: "1g4lpz" }],
        ["path", { d: "M16 16h-6", key: "1j5d54" }],
        ["path", { d: "M11 20H9", key: "39obr8" }]
      ]);
      var Torus = createLucideIcon("Torus", [
        ["ellipse", { cx: "12", cy: "11", rx: "3", ry: "2", key: "1b2qxu" }],
        ["ellipse", { cx: "12", cy: "12.5", rx: "10", ry: "8.5", key: "h8emeu" }]
      ]);
      var TouchpadOff = createLucideIcon("TouchpadOff", [
        ["path", { d: "M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16", key: "lnt0bk" }],
        ["path", { d: "M2 14h12", key: "d8icqz" }],
        ["path", { d: "M22 14h-2", key: "jrx26d" }],
        ["path", { d: "M12 20v-6", key: "1rm09r" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M22 16V6a2 2 0 0 0-2-2H10", key: "11y8e4" }]
      ]);
      var Touchpad = createLucideIcon("Touchpad", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M12 20v-6", key: "1rm09r" }]
      ]);
      var TowerControl = createLucideIcon("TowerControl", [
        [
          "path",
          { d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z", key: "1pledb" }
        ],
        ["path", { d: "M8 13v9", key: "hmv0ci" }],
        ["path", { d: "M16 22v-9", key: "ylnf1u" }],
        ["path", { d: "m9 6 1 7", key: "dpdgam" }],
        ["path", { d: "m15 6-1 7", key: "ls7zgu" }],
        ["path", { d: "M12 6V2", key: "1pj48d" }],
        ["path", { d: "M13 2h-2", key: "mj6ths" }]
      ]);
      var ToyBrick = createLucideIcon("ToyBrick", [
        ["rect", { width: "18", height: "12", x: "3", y: "8", rx: "1", key: "158fvp" }],
        ["path", { d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3", key: "s0042v" }],
        ["path", { d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3", key: "9wmeh2" }]
      ]);
      var Tractor = createLucideIcon("Tractor", [
        ["path", { d: "M3 4h9l1 7", key: "1ftpo8" }],
        ["path", { d: "M4 11V4", key: "9ft8pt" }],
        ["path", { d: "M8 10V4", key: "1y5f7n" }],
        ["path", { d: "M18 5c-.6 0-1 .4-1 1v5.6", key: "10zbvr" }],
        ["path", { d: "m10 11 11 .9c.6 0 .9.5.8 1.1l-.8 5h-1", key: "2w242w" }],
        ["circle", { cx: "7", cy: "15", r: ".5", key: "fbsjqy" }],
        ["circle", { cx: "7", cy: "15", r: "5", key: "ddtuc" }],
        ["path", { d: "M16 18h-5", key: "bq60fd" }],
        ["circle", { cx: "18", cy: "18", r: "2", key: "1emm8v" }]
      ]);
      var TrafficCone = createLucideIcon("TrafficCone", [
        ["path", { d: "M9.3 6.2a4.55 4.55 0 0 0 5.4 0", key: "flyxqv" }],
        ["path", { d: "M7.9 10.7c.9.8 2.4 1.3 4.1 1.3s3.2-.5 4.1-1.3", key: "1nlxxg" }],
        [
          "path",
          {
            d: "M13.9 3.5a1.93 1.93 0 0 0-3.8-.1l-3 10c-.1.2-.1.4-.1.6 0 1.7 2.2 3 5 3s5-1.3 5-3c0-.2 0-.4-.1-.5Z",
            key: "vz7x1l"
          }
        ],
        [
          "path",
          {
            d: "m7.5 12.2-4.7 2.7c-.5.3-.8.7-.8 1.1s.3.8.8 1.1l7.6 4.5c.9.5 2.1.5 3 0l7.6-4.5c.7-.3 1-.7 1-1.1s-.3-.8-.8-1.1l-4.7-2.8",
            key: "1xfzlw"
          }
        ]
      ]);
      var TrainFrontTunnel = createLucideIcon("TrainFrontTunnel", [
        ["path", { d: "M2 22V12a10 10 0 1 1 20 0v10", key: "o0fyp0" }],
        ["path", { d: "M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8", key: "m8q3n9" }],
        ["path", { d: "M10 15h.01", key: "44in9x" }],
        ["path", { d: "M14 15h.01", key: "5mohn5" }],
        ["path", { d: "M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z", key: "hckbmu" }],
        ["path", { d: "m9 19-2 3", key: "iij7hm" }],
        ["path", { d: "m15 19 2 3", key: "npx8sa" }]
      ]);
      var TrainFront = createLucideIcon("TrainFront", [
        ["path", { d: "M8 3.1V7a4 4 0 0 0 8 0V3.1", key: "1v71zp" }],
        ["path", { d: "m9 15-1-1", key: "1yrq24" }],
        ["path", { d: "m15 15 1-1", key: "1t0d6s" }],
        ["path", { d: "M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z", key: "1p0hjs" }],
        ["path", { d: "m8 19-2 3", key: "13i0xs" }],
        ["path", { d: "m16 19 2 3", key: "xo31yx" }]
      ]);
      var TrainTrack = createLucideIcon("TrainTrack", [
        ["path", { d: "M2 17 17 2", key: "18b09t" }],
        ["path", { d: "m2 14 8 8", key: "1gv9hu" }],
        ["path", { d: "m5 11 8 8", key: "189pqp" }],
        ["path", { d: "m8 8 8 8", key: "1imecy" }],
        ["path", { d: "m11 5 8 8", key: "ummqn6" }],
        ["path", { d: "m14 2 8 8", key: "1vk7dn" }],
        ["path", { d: "M7 22 22 7", key: "15mb1i" }]
      ]);
      var TramFront = createLucideIcon("TramFront", [
        ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
        ["path", { d: "M4 11h16", key: "mpoxn0" }],
        ["path", { d: "M12 3v8", key: "1h2ygw" }],
        ["path", { d: "m8 19-2 3", key: "13i0xs" }],
        ["path", { d: "m18 22-2-3", key: "1p0ohu" }],
        ["path", { d: "M8 15h0", key: "q9eq1f" }],
        ["path", { d: "M16 15h0", key: "pzrbjg" }]
      ]);
      var Trash2 = createLucideIcon("Trash2", [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
        ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
        ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }]
      ]);
      var Trash = createLucideIcon("Trash", [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
        ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
      ]);
      var TreeDeciduous = createLucideIcon("TreeDeciduous", [
        [
          "path",
          {
            d: "M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z",
            key: "oadzkq"
          }
        ],
        ["path", { d: "M12 19v3", key: "npa21l" }]
      ]);
      var TreePine = createLucideIcon("TreePine", [
        [
          "path",
          {
            d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z",
            key: "cpyugq"
          }
        ],
        ["path", { d: "M12 22v-3", key: "kmzjlo" }]
      ]);
      var Trees = createLucideIcon("Trees", [
        [
          "path",
          { d: "M10 10v.2A3 3 0 0 1 8.9 16v0H5v0h0a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z", key: "yh07w9" }
        ],
        ["path", { d: "M7 16v6", key: "1a82de" }],
        ["path", { d: "M13 19v3", key: "13sx9i" }],
        [
          "path",
          {
            d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5",
            key: "1sj9kv"
          }
        ]
      ]);
      var Trello = createLucideIcon("Trello", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["rect", { width: "3", height: "9", x: "7", y: "7", key: "14n3xi" }],
        ["rect", { width: "3", height: "5", x: "14", y: "7", key: "s4azjd" }]
      ]);
      var TrendingDown = createLucideIcon("TrendingDown", [
        ["polyline", { points: "22 17 13.5 8.5 8.5 13.5 2 7", key: "1r2t7k" }],
        ["polyline", { points: "16 17 22 17 22 11", key: "11uiuu" }]
      ]);
      var TrendingUp = createLucideIcon("TrendingUp", [
        ["polyline", { points: "22 7 13.5 15.5 8.5 10.5 2 17", key: "126l90" }],
        ["polyline", { points: "16 7 22 7 22 13", key: "kwv8wd" }]
      ]);
      var TriangleRight = createLucideIcon("TriangleRight", [
        [
          "path",
          {
            d: "M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z",
            key: "183wce"
          }
        ]
      ]);
      var Triangle = createLucideIcon("Triangle", [
        [
          "path",
          { d: "M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z", key: "14u9p9" }
        ]
      ]);
      var Trophy = createLucideIcon("Trophy", [
        ["path", { d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6", key: "17hqa7" }],
        ["path", { d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18", key: "lmptdp" }],
        ["path", { d: "M4 22h16", key: "57wxv0" }],
        ["path", { d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22", key: "1nw9bq" }],
        ["path", { d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22", key: "1np0yb" }],
        ["path", { d: "M18 2H6v7a6 6 0 0 0 12 0V2Z", key: "u46fv3" }]
      ]);
      var Truck = createLucideIcon("Truck", [
        ["path", { d: "M5 18H3c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h10c.6 0 1 .4 1 1v11", key: "hs4xqm" }],
        ["path", { d: "M14 9h4l4 4v4c0 .6-.4 1-1 1h-2", key: "11fp61" }],
        ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }],
        ["path", { d: "M15 18H9", key: "1lyqi6" }],
        ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }]
      ]);
      var Turtle = createLucideIcon("Turtle", [
        [
          "path",
          {
            d: "m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z",
            key: "1lbbv7"
          }
        ],
        ["path", { d: "M4.82 7.9 8 10", key: "m9wose" }],
        ["path", { d: "M15.18 7.9 12 10", key: "p8dp2u" }],
        ["path", { d: "M16.93 10H20a2 2 0 0 1 0 4H2", key: "12nsm7" }]
      ]);
      var Tv2 = createLucideIcon("Tv2", [
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }]
      ]);
      var Tv = createLucideIcon("Tv", [
        ["rect", { width: "20", height: "15", x: "2", y: "7", rx: "2", ry: "2", key: "10ag99" }],
        ["polyline", { points: "17 2 12 7 7 2", key: "11pgbg" }]
      ]);
      var Twitch = createLucideIcon("Twitch", [
        ["path", { d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7", key: "c0yzno" }]
      ]);
      var Twitter = createLucideIcon("Twitter", [
        [
          "path",
          {
            d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z",
            key: "pff0z6"
          }
        ]
      ]);
      var Type = createLucideIcon("Type", [
        ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
        ["line", { x1: "9", x2: "15", y1: "20", y2: "20", key: "swin9y" }],
        ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
      ]);
      var UmbrellaOff = createLucideIcon("UmbrellaOff", [
        ["path", { d: "M12 2v1", key: "11qlp1" }],
        ["path", { d: "M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575", key: "eki10q" }],
        ["path", { d: "M17.5 12H22A10 10 0 0 0 9.004 3.455", key: "n2ayka" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var Umbrella = createLucideIcon("Umbrella", [
        ["path", { d: "M22 12a10.06 10.06 1 0 0-20 0Z", key: "1teyop" }],
        ["path", { d: "M12 12v8a2 2 0 0 0 4 0", key: "ulpmoc" }],
        ["path", { d: "M12 2v1", key: "11qlp1" }]
      ]);
      var Underline = createLucideIcon("Underline", [
        ["path", { d: "M6 4v6a6 6 0 0 0 12 0V4", key: "9kb039" }],
        ["line", { x1: "4", x2: "20", y1: "20", y2: "20", key: "nun2al" }]
      ]);
      var Undo2 = createLucideIcon("Undo2", [
        ["path", { d: "M9 14 4 9l5-5", key: "102s5s" }],
        ["path", { d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11", key: "llx8ln" }]
      ]);
      var UndoDot = createLucideIcon("UndoDot", [
        ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }],
        ["path", { d: "M3 7v6h6", key: "1v2h90" }],
        ["path", { d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13", key: "1r6uu6" }]
      ]);
      var Undo = createLucideIcon("Undo", [
        ["path", { d: "M3 7v6h6", key: "1v2h90" }],
        ["path", { d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13", key: "1r6uu6" }]
      ]);
      var UnfoldHorizontal = createLucideIcon("UnfoldHorizontal", [
        ["path", { d: "M16 12h6", key: "15xry1" }],
        ["path", { d: "M8 12H2", key: "1jqql6" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m19 15 3-3-3-3", key: "wjy7rq" }],
        ["path", { d: "m5 9-3 3 3 3", key: "j64kie" }]
      ]);
      var UnfoldVertical = createLucideIcon("UnfoldVertical", [
        ["path", { d: "M12 22v-6", key: "6o8u61" }],
        ["path", { d: "M12 8V2", key: "1wkif3" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }],
        ["path", { d: "m15 19-3 3-3-3", key: "11eu04" }],
        ["path", { d: "m15 5-3-3-3 3", key: "itvq4r" }]
      ]);
      var Ungroup = createLucideIcon("Ungroup", [
        ["rect", { width: "8", height: "6", x: "5", y: "4", rx: "1", key: "nzclkv" }],
        ["rect", { width: "8", height: "6", x: "11", y: "14", rx: "1", key: "4tytwb" }]
      ]);
      var Unlink2 = createLucideIcon("Unlink2", [
        ["path", { d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2", key: "1re2ne" }]
      ]);
      var Unlink = createLucideIcon("Unlink", [
        [
          "path",
          {
            d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71",
            key: "yqzxt4"
          }
        ],
        [
          "path",
          {
            d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71",
            key: "4qinb0"
          }
        ],
        ["line", { x1: "8", x2: "8", y1: "2", y2: "5", key: "1041cp" }],
        ["line", { x1: "2", x2: "5", y1: "8", y2: "8", key: "14m1p5" }],
        ["line", { x1: "16", x2: "16", y1: "19", y2: "22", key: "rzdirn" }],
        ["line", { x1: "19", x2: "22", y1: "16", y2: "16", key: "ox905f" }]
      ]);
      var UnlockKeyhole = createLucideIcon("UnlockKeyhole", [
        ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
        ["rect", { x: "3", y: "10", width: "18", height: "12", rx: "2", key: "6s8ecr" }],
        ["path", { d: "M7 10V7a5 5 0 0 1 9.33-2.5", key: "car5b7" }]
      ]);
      var Unlock = createLucideIcon("Unlock", [
        ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
        ["path", { d: "M7 11V7a5 5 0 0 1 9.9-1", key: "1mm8w8" }]
      ]);
      var Unplug = createLucideIcon("Unplug", [
        ["path", { d: "m19 5 3-3", key: "yk6iyv" }],
        ["path", { d: "m2 22 3-3", key: "19mgm9" }],
        [
          "path",
          { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
        ],
        ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
        ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
        [
          "path",
          { d: "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z", key: "1snsnr" }
        ]
      ]);
      var UploadCloud = createLucideIcon("UploadCloud", [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M12 12v9", key: "192myk" }],
        ["path", { d: "m16 16-4-4-4 4", key: "119tzi" }]
      ]);
      var Upload = createLucideIcon("Upload", [
        ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
        ["polyline", { points: "17 8 12 3 7 8", key: "t8dd8p" }],
        ["line", { x1: "12", x2: "12", y1: "3", y2: "15", key: "widbto" }]
      ]);
      var Usb = createLucideIcon("Usb", [
        ["circle", { cx: "10", cy: "7", r: "1", key: "dypaad" }],
        ["circle", { cx: "4", cy: "20", r: "1", key: "22iqad" }],
        ["path", { d: "M4.7 19.3 19 5", key: "1enqfc" }],
        ["path", { d: "m21 3-3 1 2 2Z", key: "d3ov82" }],
        ["path", { d: "M9.26 7.68 5 12l2 5", key: "1esawj" }],
        ["path", { d: "m10 14 5 2 3.5-3.5", key: "v8oal5" }],
        ["path", { d: "m18 12 1-1 1 1-1 1Z", key: "1bh22v" }]
      ]);
      var UserCheck = createLucideIcon("UserCheck", [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
      ]);
      var UserCog = createLucideIcon("UserCog", [
        ["circle", { cx: "18", cy: "15", r: "3", key: "gjjjvw" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["path", { d: "M10 15H6a4 4 0 0 0-4 4v2", key: "1nfge6" }],
        ["path", { d: "m21.7 16.4-.9-.3", key: "12j9ji" }],
        ["path", { d: "m15.2 13.9-.9-.3", key: "1fdjdi" }],
        ["path", { d: "m16.6 18.7.3-.9", key: "heedtr" }],
        ["path", { d: "m19.1 12.2.3-.9", key: "1af3ki" }],
        ["path", { d: "m19.6 18.7-.4-1", key: "1x9vze" }],
        ["path", { d: "m16.8 12.3-.4-1", key: "vqeiwj" }],
        ["path", { d: "m14.3 16.6 1-.4", key: "1qlj63" }],
        ["path", { d: "m20.7 13.8 1-.4", key: "1v5t8k" }]
      ]);
      var UserMinus = createLucideIcon("UserMinus", [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
      ]);
      var UserPlus = createLucideIcon("UserPlus", [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "19", x2: "19", y1: "8", y2: "14", key: "1bvyxn" }],
        ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
      ]);
      var UserRoundCheck = createLucideIcon("UserRoundCheck", [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
      ]);
      var UserRoundCog = createLucideIcon("UserRoundCog", [
        ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m19.5 14.3-.4.9", key: "1eb35c" }],
        ["path", { d: "m16.9 20.8-.4.9", key: "dfjc4z" }],
        ["path", { d: "m21.7 19.5-.9-.4", key: "q4dx6b" }],
        ["path", { d: "m15.2 16.9-.9-.4", key: "1r0w5f" }],
        ["path", { d: "m21.7 16.5-.9.4", key: "1knoei" }],
        ["path", { d: "m15.2 19.1-.9.4", key: "j188fs" }],
        ["path", { d: "m19.5 21.7-.4-.9", key: "1tonu5" }],
        ["path", { d: "m16.9 15.2-.4-.9", key: "699xu" }]
      ]);
      var UserRoundMinus = createLucideIcon("UserRoundMinus", [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M22 19h-6", key: "vcuq98" }]
      ]);
      var UserRoundPlus = createLucideIcon("UserRoundPlus", [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M22 19h-6", key: "vcuq98" }]
      ]);
      var UserRoundSearch = createLucideIcon("UserRoundSearch", [
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m22 22-1.9-1.9", key: "1e5ubv" }]
      ]);
      var UserRoundX = createLucideIcon("UserRoundX", [
        ["path", { d: "M2 21a8 8 0 0 1 11.873-7", key: "74fkxq" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "m17 17 5 5", key: "p7ous7" }],
        ["path", { d: "m22 17-5 5", key: "gqnmv0" }]
      ]);
      var UserRound = createLucideIcon("UserRound", [
        ["circle", { cx: "12", cy: "8", r: "5", key: "1hypcn" }],
        ["path", { d: "M20 21a8 8 0 0 0-16 0", key: "rfgkzh" }]
      ]);
      var UserSearch = createLucideIcon("UserSearch", [
        ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }],
        ["path", { d: "M10.3 15H7a4 4 0 0 0-4 4v2", key: "3bnktk" }],
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
        ["path", { d: "m21 21-1.9-1.9", key: "1g2n9r" }]
      ]);
      var UserX = createLucideIcon("UserX", [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "17", x2: "22", y1: "8", y2: "13", key: "3nzzx3" }],
        ["line", { x1: "22", x2: "17", y1: "8", y2: "13", key: "1swrse" }]
      ]);
      var User = createLucideIcon("User", [
        ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
        ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
      ]);
      var UsersRound = createLucideIcon("UsersRound", [
        ["path", { d: "M18 21a8 8 0 0 0-16 0", key: "3ypg7q" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3", key: "10s06x" }]
      ]);
      var Users = createLucideIcon("Users", [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
        ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
      ]);
      var UtensilsCrossed = createLucideIcon("UtensilsCrossed", [
        ["path", { d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8", key: "n7qcjb" }],
        [
          "path",
          { d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7", key: "d0u48b" }
        ],
        ["path", { d: "m2.1 21.8 6.4-6.3", key: "yn04lh" }],
        ["path", { d: "m19 5-7 7", key: "194lzd" }]
      ]);
      var Utensils = createLucideIcon("Utensils", [
        ["path", { d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2", key: "cjf0a3" }],
        ["path", { d: "M7 2v20", key: "1473qp" }],
        ["path", { d: "M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7", key: "1ogz0v" }]
      ]);
      var UtilityPole = createLucideIcon("UtilityPole", [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "M2 5h20", key: "1fs1ex" }],
        ["path", { d: "M3 3v2", key: "9imdir" }],
        ["path", { d: "M7 3v2", key: "n0os7" }],
        ["path", { d: "M17 3v2", key: "1l2re6" }],
        ["path", { d: "M21 3v2", key: "1duuac" }],
        ["path", { d: "m19 5-7 7-7-7", key: "133zxf" }]
      ]);
      var Variable = createLucideIcon("Variable", [
        ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
        ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }],
        ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
        ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
      ]);
      var Vault = createLucideIcon("Vault", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
        ["path", { d: "m7.9 7.9 2.7 2.7", key: "hpeyl3" }],
        ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }],
        ["path", { d: "m13.4 10.6 2.7-2.7", key: "264c1n" }],
        ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
        ["path", { d: "m7.9 16.1 2.7-2.7", key: "p81g5e" }],
        ["circle", { cx: "16.5", cy: "16.5", r: ".5", fill: "currentColor", key: "fubopw" }],
        ["path", { d: "m13.4 13.4 2.7 2.7", key: "abhel3" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ]);
      var Vegan = createLucideIcon("Vegan", [
        ["path", { d: "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14", key: "qiv7li" }],
        ["path", { d: "M16 8c4 0 6-2 6-6-4 0-6 2-6 6", key: "n7eohy" }],
        ["path", { d: "M17.41 3.6a10 10 0 1 0 3 3", key: "1dion0" }]
      ]);
      var VenetianMask = createLucideIcon("VenetianMask", [
        [
          "path",
          {
            d: "M2 12a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V7h-5a8 8 0 0 0-5 2 8 8 0 0 0-5-2H2Z",
            key: "1g6z3j"
          }
        ],
        ["path", { d: "M6 11c1.5 0 3 .5 3 2-2 0-3 0-3-2Z", key: "c2lwnf" }],
        ["path", { d: "M18 11c-1.5 0-3 .5-3 2 2 0 3 0 3-2Z", key: "njd9zo" }]
      ]);
      var VibrateOff = createLucideIcon("VibrateOff", [
        ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
        ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
        ["path", { d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2", key: "1hbad5" }],
        ["path", { d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34", key: "1x5tf0" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Vibrate = createLucideIcon("Vibrate", [
        ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
        ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
        ["rect", { width: "8", height: "14", x: "8", y: "5", rx: "1", key: "1oyrl4" }]
      ]);
      var VideoOff = createLucideIcon("VideoOff", [
        ["path", { d: "M10.66 6H14a2 2 0 0 1 2 2v2.34l1 1L22 8v8", key: "ubwiq0" }],
        ["path", { d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2l10 10Z", key: "1l10zd" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Video = createLucideIcon("Video", [
        ["path", { d: "m22 8-6 4 6 4V8Z", key: "50v9me" }],
        ["rect", { width: "14", height: "12", x: "2", y: "6", rx: "2", ry: "2", key: "1rqjg6" }]
      ]);
      var Videotape = createLucideIcon("Videotape", [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M2 8h20", key: "d11cs7" }],
        ["circle", { cx: "8", cy: "14", r: "2", key: "1k2qr5" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["circle", { cx: "16", cy: "14", r: "2", key: "14k7lr" }]
      ]);
      var View = createLucideIcon("View", [
        [
          "path",
          { d: "M5 12s2.545-5 7-5c4.454 0 7 5 7 5s-2.546 5-7 5c-4.455 0-7-5-7-5z", key: "vptub8" }
        ],
        ["path", { d: "M12 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2z", key: "10lhjs" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2", key: "mrq65r" }],
        ["path", { d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2", key: "be3xqs" }]
      ]);
      var Voicemail = createLucideIcon("Voicemail", [
        ["circle", { cx: "6", cy: "12", r: "4", key: "1ehtga" }],
        ["circle", { cx: "18", cy: "12", r: "4", key: "4vafl8" }],
        ["line", { x1: "6", x2: "18", y1: "16", y2: "16", key: "pmt8us" }]
      ]);
      var Volume1 = createLucideIcon("Volume1", [
        ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
        ["path", { d: "M15.54 8.46a5 5 0 0 1 0 7.07", key: "ltjumu" }]
      ]);
      var Volume2 = createLucideIcon("Volume2", [
        ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
        ["path", { d: "M15.54 8.46a5 5 0 0 1 0 7.07", key: "ltjumu" }],
        ["path", { d: "M19.07 4.93a10 10 0 0 1 0 14.14", key: "1kegas" }]
      ]);
      var VolumeX = createLucideIcon("VolumeX", [
        ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
        ["line", { x1: "22", x2: "16", y1: "9", y2: "15", key: "1ewh16" }],
        ["line", { x1: "16", x2: "22", y1: "9", y2: "15", key: "5ykzw1" }]
      ]);
      var Volume = createLucideIcon("Volume", [
        ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }]
      ]);
      var Vote = createLucideIcon("Vote", [
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }],
        ["path", { d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z", key: "1ezoue" }],
        ["path", { d: "M22 19H2", key: "nuriw5" }]
      ]);
      var Wallet2 = createLucideIcon("Wallet2", [
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        [
          "path",
          {
            d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14",
            key: "u1rqew"
          }
        ]
      ]);
      var WalletCards = createLucideIcon("WalletCards", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2", key: "4125el" }],
        [
          "path",
          {
            d: "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21",
            key: "1dpki6"
          }
        ]
      ]);
      var Wallet = createLucideIcon("Wallet", [
        ["path", { d: "M21 12V7H5a2 2 0 0 1 0-4h14v4", key: "195gfw" }],
        ["path", { d: "M3 5v14a2 2 0 0 0 2 2h16v-5", key: "195n9w" }],
        ["path", { d: "M18 12a2 2 0 0 0 0 4h4v-4Z", key: "vllfpd" }]
      ]);
      var Wallpaper = createLucideIcon("Wallpaper", [
        ["circle", { cx: "8", cy: "9", r: "2", key: "gjzl9d" }],
        [
          "path",
          {
            d: "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2",
            key: "69xh40"
          }
        ],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }]
      ]);
      var Wand2 = createLucideIcon("Wand2", [
        [
          "path",
          {
            d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72Z",
            key: "1bcowg"
          }
        ],
        ["path", { d: "m14 7 3 3", key: "1r5n42" }],
        ["path", { d: "M5 6v4", key: "ilb8ba" }],
        ["path", { d: "M19 14v4", key: "blhpug" }],
        ["path", { d: "M10 2v2", key: "7u0qdc" }],
        ["path", { d: "M7 8H3", key: "zfb6yr" }],
        ["path", { d: "M21 16h-4", key: "1cnmox" }],
        ["path", { d: "M11 3H9", key: "1obp7u" }]
      ]);
      var Wand = createLucideIcon("Wand", [
        ["path", { d: "M15 4V2", key: "z1p9b7" }],
        ["path", { d: "M15 16v-2", key: "px0unx" }],
        ["path", { d: "M8 9h2", key: "1g203m" }],
        ["path", { d: "M20 9h2", key: "19tzq7" }],
        ["path", { d: "M17.8 11.8 19 13", key: "yihg8r" }],
        ["path", { d: "M15 9h0", key: "kg5t1u" }],
        ["path", { d: "M17.8 6.2 19 5", key: "fd4us0" }],
        ["path", { d: "m3 21 9-9", key: "1jfql5" }],
        ["path", { d: "M12.2 6.2 11 5", key: "i3da3b" }]
      ]);
      var Warehouse = createLucideIcon("Warehouse", [
        [
          "path",
          {
            d: "M22 8.35V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8.35A2 2 0 0 1 3.26 6.5l8-3.2a2 2 0 0 1 1.48 0l8 3.2A2 2 0 0 1 22 8.35Z",
            key: "gksnxg"
          }
        ],
        ["path", { d: "M6 18h12", key: "9pbo8z" }],
        ["path", { d: "M6 14h12", key: "4cwo0f" }],
        ["rect", { width: "12", height: "12", x: "6", y: "10", key: "apd30q" }]
      ]);
      var WashingMachine = createLucideIcon("WashingMachine", [
        ["path", { d: "M3 6h3", key: "155dbl" }],
        ["path", { d: "M17 6h.01", key: "e2y6kg" }],
        ["rect", { width: "18", height: "20", x: "3", y: "2", rx: "2", key: "od3kk9" }],
        ["circle", { cx: "12", cy: "13", r: "5", key: "nlbqau" }],
        ["path", { d: "M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5", key: "17lach" }]
      ]);
      var Watch = createLucideIcon("Watch", [
        ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
        ["polyline", { points: "12 10 12 12 13 13", key: "19dquz" }],
        [
          "path",
          { d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05", key: "18k57s" }
        ],
        ["path", { d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05", key: "16ny36" }]
      ]);
      var Waves = createLucideIcon("Waves", [
        [
          "path",
          {
            d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "knzxuh"
          }
        ],
        [
          "path",
          {
            d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "2jd2cc"
          }
        ],
        [
          "path",
          {
            d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "rd2r6e"
          }
        ]
      ]);
      var Waypoints = createLucideIcon("Waypoints", [
        ["circle", { cx: "12", cy: "4.5", r: "2.5", key: "r5ysbb" }],
        ["path", { d: "m10.2 6.3-3.9 3.9", key: "1nzqf6" }],
        ["circle", { cx: "4.5", cy: "12", r: "2.5", key: "jydg6v" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["circle", { cx: "19.5", cy: "12", r: "2.5", key: "1piiel" }],
        ["path", { d: "m13.8 17.7 3.9-3.9", key: "1wyg1y" }],
        ["circle", { cx: "12", cy: "19.5", r: "2.5", key: "13o1pw" }]
      ]);
      var Webcam = createLucideIcon("Webcam", [
        ["circle", { cx: "12", cy: "10", r: "8", key: "1gshiw" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 22h10", key: "10w4w3" }],
        ["path", { d: "M12 22v-4", key: "1utk9m" }]
      ]);
      var WebhookOff = createLucideIcon("WebhookOff", [
        ["path", { d: "M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15", key: "1tvl6x" }],
        ["path", { d: "M9 3.4a4 4 0 0 1 6.52.66", key: "q04jfq" }],
        ["path", { d: "m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05", key: "azowf0" }],
        ["path", { d: "M20.3 20.3a4 4 0 0 1-2.3.7", key: "5joiws" }],
        ["path", { d: "M18.6 13a4 4 0 0 1 3.357 3.414", key: "cangb8" }],
        ["path", { d: "m12 6 .6 1", key: "tpjl1n" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ]);
      var Webhook = createLucideIcon("Webhook", [
        [
          "path",
          {
            d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2",
            key: "q3hayz"
          }
        ],
        ["path", { d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06", key: "1go1hn" }],
        ["path", { d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8", key: "qlwsc0" }]
      ]);
      var Weight = createLucideIcon("Weight", [
        ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }],
        [
          "path",
          {
            d: "M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z",
            key: "56o5sh"
          }
        ]
      ]);
      var WheatOff = createLucideIcon("WheatOff", [
        ["path", { d: "m2 22 10-10", key: "28ilpk" }],
        ["path", { d: "m16 8-1.17 1.17", key: "1qqm82" }],
        [
          "path",
          {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
          }
        ],
        [
          "path",
          { d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97", key: "4wz8re" }
        ],
        [
          "path",
          { d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62", key: "rves66" }
        ],
        ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
        [
          "path",
          {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
          }
        ],
        [
          "path",
          {
            d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98",
            key: "ak46r"
          }
        ],
        [
          "path",
          {
            d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28",
            key: "1tw520"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Wheat = createLucideIcon("Wheat", [
        ["path", { d: "M2 22 16 8", key: "60hf96" }],
        [
          "path",
          {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
          }
        ],
        [
          "path",
          {
            d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1sdzmb"
          }
        ],
        [
          "path",
          {
            d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "eoatbi"
          }
        ],
        ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
        [
          "path",
          {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
          }
        ],
        [
          "path",
          {
            d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "2m8kc5"
          }
        ],
        [
          "path",
          {
            d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "vex3ng"
          }
        ]
      ]);
      var WholeWord = createLucideIcon("WholeWord", [
        ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
        ["path", { d: "M10 9v6", key: "17i7lo" }],
        ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
        ["path", { d: "M14 7v8", key: "dl84cr" }],
        ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
      ]);
      var WifiOff = createLucideIcon("WifiOff", [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M8.5 16.5a5 5 0 0 1 7 0", key: "sej527" }],
        ["path", { d: "M2 8.82a15 15 0 0 1 4.17-2.65", key: "11utq1" }],
        ["path", { d: "M10.66 5c4.01-.36 8.14.9 11.34 3.76", key: "hxefdu" }],
        ["path", { d: "M16.85 11.25a10 10 0 0 1 2.22 1.68", key: "q734kn" }],
        ["path", { d: "M5 13a10 10 0 0 1 5.24-2.76", key: "piq4yl" }],
        ["line", { x1: "12", x2: "12.01", y1: "20", y2: "20", key: "of4bc4" }]
      ]);
      var Wifi = createLucideIcon("Wifi", [
        ["path", { d: "M5 13a10 10 0 0 1 14 0", key: "6v8j51" }],
        ["path", { d: "M8.5 16.5a5 5 0 0 1 7 0", key: "sej527" }],
        ["path", { d: "M2 8.82a15 15 0 0 1 20 0", key: "dnpr2z" }],
        ["line", { x1: "12", x2: "12.01", y1: "20", y2: "20", key: "of4bc4" }]
      ]);
      var Wind = createLucideIcon("Wind", [
        ["path", { d: "M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2", key: "1k4u03" }],
        ["path", { d: "M9.6 4.6A2 2 0 1 1 11 8H2", key: "b7d0fd" }],
        ["path", { d: "M12.6 19.4A2 2 0 1 0 14 16H2", key: "1p5cb3" }]
      ]);
      var WineOff = createLucideIcon("WineOff", [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M7 10h3m7 0h-1.343", key: "v48bem" }],
        ["path", { d: "M12 15v7", key: "t2xh3l" }],
        [
          "path",
          {
            d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198",
            key: "1ymjlu"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Wine = createLucideIcon("Wine", [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M12 15v7", key: "t2xh3l" }],
        [
          "path",
          { d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z", key: "10ffi3" }
        ]
      ]);
      var Workflow = createLucideIcon("Workflow", [
        ["rect", { width: "8", height: "8", x: "3", y: "3", rx: "2", key: "by2w9f" }],
        ["path", { d: "M7 11v4a2 2 0 0 0 2 2h4", key: "xkn7yn" }],
        ["rect", { width: "8", height: "8", x: "13", y: "13", rx: "2", key: "1cgmvn" }]
      ]);
      var WrapText = createLucideIcon("WrapText", [
        ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
        ["path", { d: "M3 12h15a3 3 0 1 1 0 6h-4", key: "1cl7v7" }],
        ["polyline", { points: "16 16 14 18 16 20", key: "1jznyi" }],
        ["line", { x1: "3", x2: "10", y1: "18", y2: "18", key: "1h33wv" }]
      ]);
      var Wrench = createLucideIcon("Wrench", [
        [
          "path",
          {
            d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
            key: "cbrjhi"
          }
        ]
      ]);
      var XCircle = createLucideIcon("XCircle", [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ]);
      var XOctagon = createLucideIcon("XOctagon", [
        [
          "polygon",
          {
            points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
            key: "h1p8hx"
          }
        ],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ]);
      var XSquare = createLucideIcon("XSquare", [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ]);
      var X = createLucideIcon("X", [
        ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
        ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
      ]);
      var Youtube = createLucideIcon("Youtube", [
        [
          "path",
          {
            d: "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17",
            key: "1q2vi4"
          }
        ],
        ["path", { d: "m10 15 5-3-5-3z", key: "1jp15x" }]
      ]);
      var ZapOff = createLucideIcon("ZapOff", [
        ["polyline", { points: "12.41 6.75 13 2 10.57 4.92", key: "122m05" }],
        ["polyline", { points: "18.57 12.91 21 10 15.66 10", key: "16r43o" }],
        ["polyline", { points: "8 8 3 14 12 14 11 22 16 16", key: "tmh4bc" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ]);
      var Zap = createLucideIcon("Zap", [
        ["polygon", { points: "13 2 3 14 12 14 11 22 21 10 12 10 13 2", key: "45s27k" }]
      ]);
      var ZoomIn = createLucideIcon("ZoomIn", [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
        ["line", { x1: "11", x2: "11", y1: "8", y2: "14", key: "1vmskp" }],
        ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
      ]);
      var ZoomOut = createLucideIcon("ZoomOut", [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
        ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
      ]);
      var index = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        AArrowDown,
        AArrowUp,
        ALargeSmall,
        Accessibility,
        Activity,
        ActivitySquare,
        AirVent,
        Airplay,
        AlarmClock,
        AlarmClockCheck,
        AlarmClockMinus,
        AlarmClockOff,
        AlarmClockPlus,
        AlarmSmoke,
        Album,
        AlertCircle,
        AlertOctagon,
        AlertTriangle,
        AlignCenter,
        AlignCenterHorizontal,
        AlignCenterVertical,
        AlignEndHorizontal,
        AlignEndVertical,
        AlignHorizontalDistributeCenter,
        AlignHorizontalDistributeEnd,
        AlignHorizontalDistributeStart,
        AlignHorizontalJustifyCenter,
        AlignHorizontalJustifyEnd,
        AlignHorizontalJustifyStart,
        AlignHorizontalSpaceAround,
        AlignHorizontalSpaceBetween,
        AlignJustify,
        AlignLeft,
        AlignRight,
        AlignStartHorizontal,
        AlignStartVertical,
        AlignVerticalDistributeCenter,
        AlignVerticalDistributeEnd,
        AlignVerticalDistributeStart,
        AlignVerticalJustifyCenter,
        AlignVerticalJustifyEnd,
        AlignVerticalJustifyStart,
        AlignVerticalSpaceAround,
        AlignVerticalSpaceBetween,
        Ampersand,
        Ampersands,
        Anchor,
        Angry,
        Annoyed,
        Antenna,
        Anvil,
        Aperture,
        AppWindow,
        Apple,
        Archive,
        ArchiveRestore,
        ArchiveX,
        AreaChart,
        Armchair,
        ArrowBigDown,
        ArrowBigDownDash,
        ArrowBigLeft,
        ArrowBigLeftDash,
        ArrowBigRight,
        ArrowBigRightDash,
        ArrowBigUp,
        ArrowBigUpDash,
        ArrowDown,
        ArrowDown01,
        ArrowDown10,
        ArrowDownAZ,
        ArrowDownCircle,
        ArrowDownFromLine,
        ArrowDownLeft,
        ArrowDownLeftFromCircle,
        ArrowDownLeftFromSquare,
        ArrowDownLeftSquare,
        ArrowDownNarrowWide,
        ArrowDownRight,
        ArrowDownRightFromCircle,
        ArrowDownRightFromSquare,
        ArrowDownRightSquare,
        ArrowDownSquare,
        ArrowDownToDot,
        ArrowDownToLine,
        ArrowDownUp,
        ArrowDownWideNarrow,
        ArrowDownZA,
        ArrowLeft,
        ArrowLeftCircle,
        ArrowLeftFromLine,
        ArrowLeftRight,
        ArrowLeftSquare,
        ArrowLeftToLine,
        ArrowRight,
        ArrowRightCircle,
        ArrowRightFromLine,
        ArrowRightLeft,
        ArrowRightSquare,
        ArrowRightToLine,
        ArrowUp,
        ArrowUp01,
        ArrowUp10,
        ArrowUpAZ,
        ArrowUpCircle,
        ArrowUpDown,
        ArrowUpFromDot,
        ArrowUpFromLine,
        ArrowUpLeft,
        ArrowUpLeftFromCircle,
        ArrowUpLeftFromSquare,
        ArrowUpLeftSquare,
        ArrowUpNarrowWide,
        ArrowUpRight,
        ArrowUpRightFromCircle,
        ArrowUpRightFromSquare,
        ArrowUpRightSquare,
        ArrowUpSquare,
        ArrowUpToLine,
        ArrowUpWideNarrow,
        ArrowUpZA,
        ArrowsUpFromLine,
        Asterisk,
        AsteriskSquare,
        AtSign,
        Atom,
        AudioLines,
        AudioWaveform,
        Award,
        Axe,
        Axis3d,
        Baby,
        Backpack,
        Badge,
        BadgeAlert,
        BadgeCent,
        BadgeCheck,
        BadgeDollarSign,
        BadgeEuro,
        BadgeHelp,
        BadgeIndianRupee,
        BadgeInfo,
        BadgeJapaneseYen,
        BadgeMinus,
        BadgePercent,
        BadgePlus,
        BadgePoundSterling,
        BadgeRussianRuble,
        BadgeSwissFranc,
        BadgeX,
        BaggageClaim,
        Ban,
        Banana,
        Banknote,
        BarChart,
        BarChart2,
        BarChart3,
        BarChart4,
        BarChartBig,
        BarChartHorizontal,
        BarChartHorizontalBig,
        Barcode,
        Baseline,
        Bath,
        Battery,
        BatteryCharging,
        BatteryFull,
        BatteryLow,
        BatteryMedium,
        BatteryWarning,
        Beaker,
        Bean,
        BeanOff,
        Bed,
        BedDouble,
        BedSingle,
        Beef,
        Beer,
        Bell,
        BellDot,
        BellElectric,
        BellMinus,
        BellOff,
        BellPlus,
        BellRing,
        BetweenHorizontalEnd,
        BetweenHorizontalStart,
        BetweenVerticalEnd,
        BetweenVerticalStart,
        Bike,
        Binary,
        Biohazard,
        Bird,
        Bitcoin,
        Blend,
        Blinds,
        Blocks,
        Bluetooth,
        BluetoothConnected,
        BluetoothOff,
        BluetoothSearching,
        Bold,
        Bolt,
        Bomb,
        Bone,
        Book,
        BookA,
        BookAudio,
        BookCheck,
        BookCopy,
        BookDashed,
        BookDown,
        BookHeadphones,
        BookHeart,
        BookImage,
        BookKey,
        BookLock,
        BookMarked,
        BookMinus,
        BookOpen,
        BookOpenCheck,
        BookOpenText,
        BookPlus,
        BookText,
        BookType,
        BookUp,
        BookUp2,
        BookUser,
        BookX,
        Bookmark,
        BookmarkCheck,
        BookmarkMinus,
        BookmarkPlus,
        BookmarkX,
        BoomBox,
        Bot,
        Box,
        BoxSelect,
        Boxes,
        Braces,
        Brackets,
        Brain,
        BrainCircuit,
        BrainCog,
        BrickWall,
        Briefcase,
        BringToFront,
        Brush,
        Bug,
        BugOff,
        BugPlay,
        Building,
        Building2,
        Bus,
        BusFront,
        Cable,
        CableCar,
        Cake,
        CakeSlice,
        Calculator,
        Calendar,
        CalendarCheck,
        CalendarCheck2,
        CalendarClock,
        CalendarDays,
        CalendarFold,
        CalendarHeart,
        CalendarMinus,
        CalendarMinus2,
        CalendarOff,
        CalendarPlus,
        CalendarPlus2,
        CalendarRange,
        CalendarSearch,
        CalendarX,
        CalendarX2,
        Camera,
        CameraOff,
        CandlestickChart,
        Candy,
        CandyCane,
        CandyOff,
        Car,
        CarFront,
        CarTaxiFront,
        Caravan,
        Carrot,
        CaseLower,
        CaseSensitive,
        CaseUpper,
        CassetteTape,
        Cast,
        Castle,
        Cat,
        Cctv,
        Check,
        CheckCheck,
        CheckCircle,
        CheckCircle2,
        CheckSquare,
        CheckSquare2,
        ChefHat,
        Cherry,
        ChevronDown,
        ChevronDownCircle,
        ChevronDownSquare,
        ChevronFirst,
        ChevronLast,
        ChevronLeft,
        ChevronLeftCircle,
        ChevronLeftSquare,
        ChevronRight,
        ChevronRightCircle,
        ChevronRightSquare,
        ChevronUp,
        ChevronUpCircle,
        ChevronUpSquare,
        ChevronsDown,
        ChevronsDownUp,
        ChevronsLeft,
        ChevronsLeftRight,
        ChevronsRight,
        ChevronsRightLeft,
        ChevronsUp,
        ChevronsUpDown,
        Chrome,
        Church,
        Cigarette,
        CigaretteOff,
        Circle,
        CircleDashed,
        CircleDollarSign,
        CircleDot,
        CircleDotDashed,
        CircleEllipsis,
        CircleEqual,
        CircleOff,
        CircleSlash,
        CircleSlash2,
        CircleUser,
        CircleUserRound,
        CircuitBoard,
        Citrus,
        Clapperboard,
        Clipboard,
        ClipboardCheck,
        ClipboardCopy,
        ClipboardList,
        ClipboardPaste,
        ClipboardPen,
        ClipboardPenLine,
        ClipboardType,
        ClipboardX,
        Clock,
        Clock1,
        Clock10,
        Clock11,
        Clock12,
        Clock2,
        Clock3,
        Clock4,
        Clock5,
        Clock6,
        Clock7,
        Clock8,
        Clock9,
        Cloud,
        CloudCog,
        CloudDrizzle,
        CloudFog,
        CloudHail,
        CloudLightning,
        CloudMoon,
        CloudMoonRain,
        CloudOff,
        CloudRain,
        CloudRainWind,
        CloudSnow,
        CloudSun,
        CloudSunRain,
        Cloudy,
        Clover,
        Club,
        Code,
        Code2,
        CodeSquare,
        Codepen,
        Codesandbox,
        Coffee,
        Cog,
        Coins,
        Columns2,
        Columns3,
        Columns4,
        Combine,
        Command,
        Compass,
        Component,
        Computer,
        ConciergeBell,
        Cone,
        Construction,
        Contact,
        Contact2,
        Container,
        Contrast,
        Cookie,
        CookingPot,
        Copy,
        CopyCheck,
        CopyMinus,
        CopyPlus,
        CopySlash,
        CopyX,
        Copyleft,
        Copyright,
        CornerDownLeft,
        CornerDownRight,
        CornerLeftDown,
        CornerLeftUp,
        CornerRightDown,
        CornerRightUp,
        CornerUpLeft,
        CornerUpRight,
        Cpu,
        CreativeCommons,
        CreditCard,
        Croissant,
        Crop,
        Cross,
        Crosshair,
        Crown,
        Cuboid,
        CupSoda,
        Currency,
        Cylinder,
        Database,
        DatabaseBackup,
        DatabaseZap,
        Delete,
        Dessert,
        Diameter,
        Diamond,
        Dice1,
        Dice2,
        Dice3,
        Dice4,
        Dice5,
        Dice6,
        Dices,
        Diff,
        Disc,
        Disc2,
        Disc3,
        DiscAlbum,
        Divide,
        DivideCircle,
        DivideSquare,
        Dna,
        DnaOff,
        Dog,
        DollarSign,
        Donut,
        DoorClosed,
        DoorOpen,
        Dot,
        DotSquare,
        Download,
        DownloadCloud,
        DraftingCompass,
        Drama,
        Dribbble,
        Drill,
        Droplet,
        Droplets,
        Drum,
        Drumstick,
        Dumbbell,
        Ear,
        EarOff,
        Eclipse,
        Egg,
        EggFried,
        EggOff,
        Equal,
        EqualNot,
        EqualSquare,
        Eraser,
        Euro,
        Expand,
        ExternalLink,
        Eye,
        EyeOff,
        Facebook,
        Factory,
        Fan,
        FastForward,
        Feather,
        Fence,
        FerrisWheel,
        Figma,
        File,
        FileArchive,
        FileAudio,
        FileAudio2,
        FileAxis3d,
        FileBadge,
        FileBadge2,
        FileBarChart,
        FileBarChart2,
        FileBox,
        FileCheck,
        FileCheck2,
        FileClock,
        FileCode,
        FileCode2,
        FileCog,
        FileDiff,
        FileDigit,
        FileDown,
        FileHeart,
        FileImage,
        FileInput,
        FileJson,
        FileJson2,
        FileKey,
        FileKey2,
        FileLineChart,
        FileLock,
        FileLock2,
        FileMinus,
        FileMinus2,
        FileMusic,
        FileOutput,
        FilePen,
        FilePenLine,
        FilePieChart,
        FilePlus,
        FilePlus2,
        FileQuestion,
        FileScan,
        FileSearch,
        FileSearch2,
        FileSliders,
        FileSpreadsheet,
        FileStack,
        FileSymlink,
        FileTerminal,
        FileText,
        FileType,
        FileType2,
        FileUp,
        FileVideo,
        FileVideo2,
        FileVolume,
        FileVolume2,
        FileWarning,
        FileX,
        FileX2,
        Files,
        Film,
        Filter,
        FilterX,
        Fingerprint,
        FireExtinguisher,
        Fish,
        FishOff,
        FishSymbol,
        Flag,
        FlagOff,
        FlagTriangleLeft,
        FlagTriangleRight,
        Flame,
        FlameKindling,
        Flashlight,
        FlashlightOff,
        FlaskConical,
        FlaskConicalOff,
        FlaskRound,
        FlipHorizontal,
        FlipHorizontal2,
        FlipVertical,
        FlipVertical2,
        Flower,
        Flower2,
        Focus,
        FoldHorizontal,
        FoldVertical,
        Folder,
        FolderArchive,
        FolderCheck,
        FolderClock,
        FolderClosed,
        FolderCog,
        FolderDot,
        FolderDown,
        FolderGit,
        FolderGit2,
        FolderHeart,
        FolderInput,
        FolderKanban,
        FolderKey,
        FolderLock,
        FolderMinus,
        FolderOpen,
        FolderOpenDot,
        FolderOutput,
        FolderPen,
        FolderPlus,
        FolderRoot,
        FolderSearch,
        FolderSearch2,
        FolderSymlink,
        FolderSync,
        FolderTree,
        FolderUp,
        FolderX,
        Folders,
        Footprints,
        Forklift,
        FormInput,
        Forward,
        Frame,
        Framer,
        Frown,
        Fuel,
        Fullscreen,
        FunctionSquare,
        GalleryHorizontal,
        GalleryHorizontalEnd,
        GalleryThumbnails,
        GalleryVertical,
        GalleryVerticalEnd,
        Gamepad,
        Gamepad2,
        GanttChart,
        GanttChartSquare,
        Gauge,
        GaugeCircle,
        Gavel,
        Gem,
        Ghost,
        Gift,
        GitBranch,
        GitBranchPlus,
        GitCommitHorizontal,
        GitCommitVertical,
        GitCompare,
        GitCompareArrows,
        GitFork,
        GitGraph,
        GitMerge,
        GitPullRequest,
        GitPullRequestArrow,
        GitPullRequestClosed,
        GitPullRequestCreate,
        GitPullRequestCreateArrow,
        GitPullRequestDraft,
        Github,
        Gitlab,
        GlassWater,
        Glasses,
        Globe,
        Globe2,
        Goal,
        Grab,
        GraduationCap,
        Grape,
        Grid2x2,
        Grid3x3,
        Grip,
        GripHorizontal,
        GripVertical,
        Group,
        Guitar,
        Hammer,
        Hand,
        HandCoins,
        HandHeart,
        HandHelping,
        HandMetal,
        HandPlatter,
        HardDrive,
        HardDriveDownload,
        HardDriveUpload,
        HardHat,
        Hash,
        Haze,
        HdmiPort,
        Heading,
        Heading1,
        Heading2,
        Heading3,
        Heading4,
        Heading5,
        Heading6,
        Headphones,
        Heart,
        HeartCrack,
        HeartHandshake,
        HeartOff,
        HeartPulse,
        Heater,
        HelpCircle,
        Hexagon,
        Highlighter,
        History,
        Home,
        Hop,
        HopOff,
        Hotel,
        Hourglass,
        IceCream,
        IceCream2,
        Image,
        ImageDown,
        ImageMinus,
        ImageOff,
        ImagePlus,
        Import,
        Inbox,
        Indent,
        IndianRupee,
        Infinity: Infinity2,
        Info,
        InspectionPanel,
        Instagram,
        Italic,
        IterationCcw,
        IterationCw,
        JapaneseYen,
        Joystick,
        Kanban,
        KanbanSquare,
        KanbanSquareDashed,
        Key,
        KeyRound,
        KeySquare,
        Keyboard,
        KeyboardMusic,
        Lamp,
        LampCeiling,
        LampDesk,
        LampFloor,
        LampWallDown,
        LampWallUp,
        LandPlot,
        Landmark,
        Languages,
        Laptop,
        Laptop2,
        Lasso,
        LassoSelect,
        Laugh,
        Layers,
        Layers2,
        Layers3,
        LayoutDashboard,
        LayoutGrid,
        LayoutList,
        LayoutPanelLeft,
        LayoutPanelTop,
        LayoutTemplate,
        Leaf,
        LeafyGreen,
        Library,
        LibraryBig,
        LibrarySquare,
        LifeBuoy,
        Ligature,
        Lightbulb,
        LightbulbOff,
        LineChart,
        Link,
        Link2,
        Link2Off,
        Linkedin,
        List,
        ListChecks,
        ListCollapse,
        ListEnd,
        ListFilter,
        ListMinus,
        ListMusic,
        ListOrdered,
        ListPlus,
        ListRestart,
        ListStart,
        ListTodo,
        ListTree,
        ListVideo,
        ListX,
        Loader,
        Loader2,
        Locate,
        LocateFixed,
        LocateOff,
        Lock,
        LockKeyhole,
        LogIn,
        LogOut,
        Lollipop,
        Luggage,
        MSquare,
        Magnet,
        Mail,
        MailCheck,
        MailMinus,
        MailOpen,
        MailPlus,
        MailQuestion,
        MailSearch,
        MailWarning,
        MailX,
        Mailbox,
        Mails,
        Map: Map2,
        MapPin,
        MapPinOff,
        MapPinned,
        Martini,
        Maximize,
        Maximize2,
        Medal,
        Megaphone,
        MegaphoneOff,
        Meh,
        MemoryStick,
        Menu,
        MenuSquare,
        Merge,
        MessageCircle,
        MessageCircleCode,
        MessageCircleDashed,
        MessageCircleHeart,
        MessageCircleMore,
        MessageCircleOff,
        MessageCirclePlus,
        MessageCircleQuestion,
        MessageCircleReply,
        MessageCircleWarning,
        MessageCircleX,
        MessageSquare,
        MessageSquareCode,
        MessageSquareDashed,
        MessageSquareDiff,
        MessageSquareDot,
        MessageSquareHeart,
        MessageSquareMore,
        MessageSquareOff,
        MessageSquarePlus,
        MessageSquareQuote,
        MessageSquareReply,
        MessageSquareShare,
        MessageSquareText,
        MessageSquareWarning,
        MessageSquareX,
        MessagesSquare,
        Mic,
        Mic2,
        MicOff,
        Microscope,
        Microwave,
        Milestone,
        Milk,
        MilkOff,
        Minimize,
        Minimize2,
        Minus,
        MinusCircle,
        MinusSquare,
        Monitor,
        MonitorCheck,
        MonitorDot,
        MonitorDown,
        MonitorOff,
        MonitorPause,
        MonitorPlay,
        MonitorSmartphone,
        MonitorSpeaker,
        MonitorStop,
        MonitorUp,
        MonitorX,
        Moon,
        MoonStar,
        MoreHorizontal,
        MoreVertical,
        Mountain,
        MountainSnow,
        Mouse,
        MousePointer,
        MousePointer2,
        MousePointerClick,
        MousePointerSquare,
        MousePointerSquareDashed,
        Move,
        Move3d,
        MoveDiagonal,
        MoveDiagonal2,
        MoveDown,
        MoveDownLeft,
        MoveDownRight,
        MoveHorizontal,
        MoveLeft,
        MoveRight,
        MoveUp,
        MoveUpLeft,
        MoveUpRight,
        MoveVertical,
        Music,
        Music2,
        Music3,
        Music4,
        Navigation,
        Navigation2,
        Navigation2Off,
        NavigationOff,
        Network,
        Newspaper,
        Nfc,
        Notebook,
        NotebookPen,
        NotebookTabs,
        NotebookText,
        NotepadText,
        NotepadTextDashed,
        Nut,
        NutOff,
        Octagon,
        Option,
        Orbit,
        Outdent,
        Package,
        Package2,
        PackageCheck,
        PackageMinus,
        PackageOpen,
        PackagePlus,
        PackageSearch,
        PackageX,
        PaintBucket,
        PaintRoller,
        Paintbrush,
        Paintbrush2,
        Palette,
        Palmtree,
        PanelBottom,
        PanelBottomClose,
        PanelBottomDashed,
        PanelBottomOpen,
        PanelLeft,
        PanelLeftClose,
        PanelLeftDashed,
        PanelLeftOpen,
        PanelRight,
        PanelRightClose,
        PanelRightDashed,
        PanelRightOpen,
        PanelTop,
        PanelTopClose,
        PanelTopDashed,
        PanelTopOpen,
        PanelsLeftBottom,
        PanelsRightBottom,
        PanelsTopLeft,
        Paperclip,
        Parentheses,
        ParkingCircle,
        ParkingCircleOff,
        ParkingMeter,
        ParkingSquare,
        ParkingSquareOff,
        PartyPopper,
        Pause,
        PauseCircle,
        PauseOctagon,
        PawPrint,
        PcCase,
        Pen,
        PenLine,
        PenTool,
        Pencil,
        PencilLine,
        PencilRuler,
        Pentagon,
        Percent,
        PercentCircle,
        PercentDiamond,
        PercentSquare,
        PersonStanding,
        Phone,
        PhoneCall,
        PhoneForwarded,
        PhoneIncoming,
        PhoneMissed,
        PhoneOff,
        PhoneOutgoing,
        Pi,
        PiSquare,
        Piano,
        PictureInPicture,
        PictureInPicture2,
        PieChart,
        PiggyBank,
        Pilcrow,
        PilcrowSquare,
        Pill,
        Pin,
        PinOff,
        Pipette,
        Pizza,
        Plane,
        PlaneLanding,
        PlaneTakeoff,
        Play,
        PlayCircle,
        PlaySquare,
        Plug,
        Plug2,
        PlugZap,
        PlugZap2,
        Plus,
        PlusCircle,
        PlusSquare,
        Pocket,
        PocketKnife,
        Podcast,
        Pointer,
        PointerOff,
        Popcorn,
        Popsicle,
        PoundSterling,
        Power,
        PowerCircle,
        PowerOff,
        PowerSquare,
        Presentation,
        Printer,
        Projector,
        Puzzle,
        Pyramid,
        QrCode,
        Quote,
        Rabbit,
        Radar,
        Radiation,
        Radio,
        RadioReceiver,
        RadioTower,
        Radius,
        RailSymbol,
        Rainbow,
        Rat,
        Ratio,
        Receipt,
        ReceiptCent,
        ReceiptEuro,
        ReceiptIndianRupee,
        ReceiptJapaneseYen,
        ReceiptPoundSterling,
        ReceiptRussianRuble,
        ReceiptSwissFranc,
        ReceiptText,
        RectangleHorizontal,
        RectangleVertical,
        Recycle,
        Redo,
        Redo2,
        RedoDot,
        RefreshCcw,
        RefreshCcwDot,
        RefreshCw,
        RefreshCwOff,
        Refrigerator,
        Regex,
        RemoveFormatting,
        Repeat,
        Repeat1,
        Repeat2,
        Replace,
        ReplaceAll,
        Reply,
        ReplyAll,
        Rewind,
        Ribbon,
        Rocket,
        RockingChair,
        RollerCoaster,
        Rotate3d,
        RotateCcw,
        RotateCw,
        Route,
        RouteOff,
        Router,
        Rows2,
        Rows3,
        Rows4,
        Rss,
        Ruler,
        RussianRuble,
        Sailboat,
        Salad,
        Sandwich,
        Satellite,
        SatelliteDish,
        Save,
        SaveAll,
        Scale,
        Scale3d,
        Scaling,
        Scan,
        ScanBarcode,
        ScanEye,
        ScanFace,
        ScanLine,
        ScanSearch,
        ScanText,
        ScatterChart,
        School,
        School2,
        Scissors,
        ScissorsLineDashed,
        ScissorsSquare,
        ScissorsSquareDashedBottom,
        ScreenShare,
        ScreenShareOff,
        Scroll,
        ScrollText,
        Search,
        SearchCheck,
        SearchCode,
        SearchSlash,
        SearchX,
        Send,
        SendHorizontal,
        SendToBack,
        SeparatorHorizontal,
        SeparatorVertical,
        Server,
        ServerCog,
        ServerCrash,
        ServerOff,
        Settings,
        Settings2,
        Shapes,
        Share,
        Share2,
        Sheet,
        Shell,
        Shield,
        ShieldAlert,
        ShieldBan,
        ShieldCheck,
        ShieldEllipsis,
        ShieldHalf,
        ShieldMinus,
        ShieldOff,
        ShieldPlus,
        ShieldQuestion,
        ShieldX,
        Ship,
        ShipWheel,
        Shirt,
        ShoppingBag,
        ShoppingBasket,
        ShoppingCart,
        Shovel,
        ShowerHead,
        Shrink,
        Shrub,
        Shuffle,
        Sigma,
        SigmaSquare,
        Signal,
        SignalHigh,
        SignalLow,
        SignalMedium,
        SignalZero,
        Signpost,
        SignpostBig,
        Siren,
        SkipBack,
        SkipForward,
        Skull,
        Slack,
        Slash,
        SlashSquare,
        Slice,
        Sliders,
        SlidersHorizontal,
        Smartphone,
        SmartphoneCharging,
        SmartphoneNfc,
        Smile,
        SmilePlus,
        Snail,
        Snowflake,
        Sofa,
        Soup,
        Space,
        Spade,
        Sparkle,
        Sparkles,
        Speaker,
        Speech,
        SpellCheck,
        SpellCheck2,
        Spline,
        Split,
        SplitSquareHorizontal,
        SplitSquareVertical,
        SprayCan,
        Sprout,
        Square,
        SquareDashedBottom,
        SquareDashedBottomCode,
        SquarePen,
        SquareStack,
        SquareUser,
        SquareUserRound,
        Squircle,
        Squirrel,
        Stamp,
        Star,
        StarHalf,
        StarOff,
        StepBack,
        StepForward,
        Stethoscope,
        Sticker,
        StickyNote,
        StopCircle,
        Store,
        StretchHorizontal,
        StretchVertical,
        Strikethrough,
        Subscript,
        Subtitles,
        Sun,
        SunDim,
        SunMedium,
        SunMoon,
        SunSnow,
        Sunrise,
        Sunset,
        Superscript,
        SwatchBook,
        SwissFranc,
        SwitchCamera,
        Sword,
        Swords,
        Syringe,
        Table,
        Table2,
        TableProperties,
        Tablet,
        TabletSmartphone,
        Tablets,
        Tag,
        Tags,
        Tally1,
        Tally2,
        Tally3,
        Tally4,
        Tally5,
        Tangent,
        Target,
        Tent,
        TentTree,
        Terminal,
        TerminalSquare,
        TestTube,
        TestTube2,
        TestTubes,
        Text,
        TextCursor,
        TextCursorInput,
        TextQuote,
        TextSearch,
        TextSelect,
        Theater,
        Thermometer,
        ThermometerSnowflake,
        ThermometerSun,
        ThumbsDown,
        ThumbsUp,
        Ticket,
        TicketCheck,
        TicketMinus,
        TicketPercent,
        TicketPlus,
        TicketSlash,
        TicketX,
        Timer,
        TimerOff,
        TimerReset,
        ToggleLeft,
        ToggleRight,
        Tornado,
        Torus,
        Touchpad,
        TouchpadOff,
        TowerControl,
        ToyBrick,
        Tractor,
        TrafficCone,
        TrainFront,
        TrainFrontTunnel,
        TrainTrack,
        TramFront,
        Trash,
        Trash2,
        TreeDeciduous,
        TreePine,
        Trees,
        Trello,
        TrendingDown,
        TrendingUp,
        Triangle,
        TriangleRight,
        Trophy,
        Truck,
        Turtle,
        Tv,
        Tv2,
        Twitch,
        Twitter,
        Type,
        Umbrella,
        UmbrellaOff,
        Underline,
        Undo,
        Undo2,
        UndoDot,
        UnfoldHorizontal,
        UnfoldVertical,
        Ungroup,
        Unlink,
        Unlink2,
        Unlock,
        UnlockKeyhole,
        Unplug,
        Upload,
        UploadCloud,
        Usb,
        User,
        UserCheck,
        UserCog,
        UserMinus,
        UserPlus,
        UserRound,
        UserRoundCheck,
        UserRoundCog,
        UserRoundMinus,
        UserRoundPlus,
        UserRoundSearch,
        UserRoundX,
        UserSearch,
        UserX,
        Users,
        UsersRound,
        Utensils,
        UtensilsCrossed,
        UtilityPole,
        Variable,
        Vault,
        Vegan,
        VenetianMask,
        Vibrate,
        VibrateOff,
        Video,
        VideoOff,
        Videotape,
        View,
        Voicemail,
        Volume,
        Volume1,
        Volume2,
        VolumeX,
        Vote,
        Wallet,
        Wallet2,
        WalletCards,
        Wallpaper,
        Wand,
        Wand2,
        Warehouse,
        WashingMachine,
        Watch,
        Waves,
        Waypoints,
        Webcam,
        Webhook,
        WebhookOff,
        Weight,
        Wheat,
        WheatOff,
        WholeWord,
        Wifi,
        WifiOff,
        Wind,
        Wine,
        WineOff,
        Workflow,
        WrapText,
        Wrench,
        X,
        XCircle,
        XOctagon,
        XSquare,
        Youtube,
        Zap,
        ZapOff,
        ZoomIn,
        ZoomOut
      });
      exports.AArrowDown = AArrowDown;
      exports.AArrowDownIcon = AArrowDown;
      exports.AArrowUp = AArrowUp;
      exports.AArrowUpIcon = AArrowUp;
      exports.ALargeSmall = ALargeSmall;
      exports.ALargeSmallIcon = ALargeSmall;
      exports.Accessibility = Accessibility;
      exports.AccessibilityIcon = Accessibility;
      exports.Activity = Activity;
      exports.ActivityIcon = Activity;
      exports.ActivitySquare = ActivitySquare;
      exports.ActivitySquareIcon = ActivitySquare;
      exports.AirVent = AirVent;
      exports.AirVentIcon = AirVent;
      exports.Airplay = Airplay;
      exports.AirplayIcon = Airplay;
      exports.AlarmCheck = AlarmClockCheck;
      exports.AlarmCheckIcon = AlarmClockCheck;
      exports.AlarmClock = AlarmClock;
      exports.AlarmClockCheck = AlarmClockCheck;
      exports.AlarmClockCheckIcon = AlarmClockCheck;
      exports.AlarmClockIcon = AlarmClock;
      exports.AlarmClockMinus = AlarmClockMinus;
      exports.AlarmClockMinusIcon = AlarmClockMinus;
      exports.AlarmClockOff = AlarmClockOff;
      exports.AlarmClockOffIcon = AlarmClockOff;
      exports.AlarmClockPlus = AlarmClockPlus;
      exports.AlarmClockPlusIcon = AlarmClockPlus;
      exports.AlarmMinus = AlarmClockMinus;
      exports.AlarmMinusIcon = AlarmClockMinus;
      exports.AlarmPlus = AlarmClockPlus;
      exports.AlarmPlusIcon = AlarmClockPlus;
      exports.AlarmSmoke = AlarmSmoke;
      exports.AlarmSmokeIcon = AlarmSmoke;
      exports.Album = Album;
      exports.AlbumIcon = Album;
      exports.AlertCircle = AlertCircle;
      exports.AlertCircleIcon = AlertCircle;
      exports.AlertOctagon = AlertOctagon;
      exports.AlertOctagonIcon = AlertOctagon;
      exports.AlertTriangle = AlertTriangle;
      exports.AlertTriangleIcon = AlertTriangle;
      exports.AlignCenter = AlignCenter;
      exports.AlignCenterHorizontal = AlignCenterHorizontal;
      exports.AlignCenterHorizontalIcon = AlignCenterHorizontal;
      exports.AlignCenterIcon = AlignCenter;
      exports.AlignCenterVertical = AlignCenterVertical;
      exports.AlignCenterVerticalIcon = AlignCenterVertical;
      exports.AlignEndHorizontal = AlignEndHorizontal;
      exports.AlignEndHorizontalIcon = AlignEndHorizontal;
      exports.AlignEndVertical = AlignEndVertical;
      exports.AlignEndVerticalIcon = AlignEndVertical;
      exports.AlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
      exports.AlignHorizontalDistributeCenterIcon = AlignHorizontalDistributeCenter;
      exports.AlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
      exports.AlignHorizontalDistributeEndIcon = AlignHorizontalDistributeEnd;
      exports.AlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
      exports.AlignHorizontalDistributeStartIcon = AlignHorizontalDistributeStart;
      exports.AlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
      exports.AlignHorizontalJustifyCenterIcon = AlignHorizontalJustifyCenter;
      exports.AlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
      exports.AlignHorizontalJustifyEndIcon = AlignHorizontalJustifyEnd;
      exports.AlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
      exports.AlignHorizontalJustifyStartIcon = AlignHorizontalJustifyStart;
      exports.AlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
      exports.AlignHorizontalSpaceAroundIcon = AlignHorizontalSpaceAround;
      exports.AlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
      exports.AlignHorizontalSpaceBetweenIcon = AlignHorizontalSpaceBetween;
      exports.AlignJustify = AlignJustify;
      exports.AlignJustifyIcon = AlignJustify;
      exports.AlignLeft = AlignLeft;
      exports.AlignLeftIcon = AlignLeft;
      exports.AlignRight = AlignRight;
      exports.AlignRightIcon = AlignRight;
      exports.AlignStartHorizontal = AlignStartHorizontal;
      exports.AlignStartHorizontalIcon = AlignStartHorizontal;
      exports.AlignStartVertical = AlignStartVertical;
      exports.AlignStartVerticalIcon = AlignStartVertical;
      exports.AlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
      exports.AlignVerticalDistributeCenterIcon = AlignVerticalDistributeCenter;
      exports.AlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
      exports.AlignVerticalDistributeEndIcon = AlignVerticalDistributeEnd;
      exports.AlignVerticalDistributeStart = AlignVerticalDistributeStart;
      exports.AlignVerticalDistributeStartIcon = AlignVerticalDistributeStart;
      exports.AlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
      exports.AlignVerticalJustifyCenterIcon = AlignVerticalJustifyCenter;
      exports.AlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
      exports.AlignVerticalJustifyEndIcon = AlignVerticalJustifyEnd;
      exports.AlignVerticalJustifyStart = AlignVerticalJustifyStart;
      exports.AlignVerticalJustifyStartIcon = AlignVerticalJustifyStart;
      exports.AlignVerticalSpaceAround = AlignVerticalSpaceAround;
      exports.AlignVerticalSpaceAroundIcon = AlignVerticalSpaceAround;
      exports.AlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
      exports.AlignVerticalSpaceBetweenIcon = AlignVerticalSpaceBetween;
      exports.Ampersand = Ampersand;
      exports.AmpersandIcon = Ampersand;
      exports.Ampersands = Ampersands;
      exports.AmpersandsIcon = Ampersands;
      exports.Anchor = Anchor;
      exports.AnchorIcon = Anchor;
      exports.Angry = Angry;
      exports.AngryIcon = Angry;
      exports.Annoyed = Annoyed;
      exports.AnnoyedIcon = Annoyed;
      exports.Antenna = Antenna;
      exports.AntennaIcon = Antenna;
      exports.Anvil = Anvil;
      exports.AnvilIcon = Anvil;
      exports.Aperture = Aperture;
      exports.ApertureIcon = Aperture;
      exports.AppWindow = AppWindow;
      exports.AppWindowIcon = AppWindow;
      exports.Apple = Apple;
      exports.AppleIcon = Apple;
      exports.Archive = Archive;
      exports.ArchiveIcon = Archive;
      exports.ArchiveRestore = ArchiveRestore;
      exports.ArchiveRestoreIcon = ArchiveRestore;
      exports.ArchiveX = ArchiveX;
      exports.ArchiveXIcon = ArchiveX;
      exports.AreaChart = AreaChart;
      exports.AreaChartIcon = AreaChart;
      exports.Armchair = Armchair;
      exports.ArmchairIcon = Armchair;
      exports.ArrowBigDown = ArrowBigDown;
      exports.ArrowBigDownDash = ArrowBigDownDash;
      exports.ArrowBigDownDashIcon = ArrowBigDownDash;
      exports.ArrowBigDownIcon = ArrowBigDown;
      exports.ArrowBigLeft = ArrowBigLeft;
      exports.ArrowBigLeftDash = ArrowBigLeftDash;
      exports.ArrowBigLeftDashIcon = ArrowBigLeftDash;
      exports.ArrowBigLeftIcon = ArrowBigLeft;
      exports.ArrowBigRight = ArrowBigRight;
      exports.ArrowBigRightDash = ArrowBigRightDash;
      exports.ArrowBigRightDashIcon = ArrowBigRightDash;
      exports.ArrowBigRightIcon = ArrowBigRight;
      exports.ArrowBigUp = ArrowBigUp;
      exports.ArrowBigUpDash = ArrowBigUpDash;
      exports.ArrowBigUpDashIcon = ArrowBigUpDash;
      exports.ArrowBigUpIcon = ArrowBigUp;
      exports.ArrowDown = ArrowDown;
      exports.ArrowDown01 = ArrowDown01;
      exports.ArrowDown01Icon = ArrowDown01;
      exports.ArrowDown10 = ArrowDown10;
      exports.ArrowDown10Icon = ArrowDown10;
      exports.ArrowDownAZ = ArrowDownAZ;
      exports.ArrowDownAZIcon = ArrowDownAZ;
      exports.ArrowDownAz = ArrowDownAZ;
      exports.ArrowDownAzIcon = ArrowDownAZ;
      exports.ArrowDownCircle = ArrowDownCircle;
      exports.ArrowDownCircleIcon = ArrowDownCircle;
      exports.ArrowDownFromLine = ArrowDownFromLine;
      exports.ArrowDownFromLineIcon = ArrowDownFromLine;
      exports.ArrowDownIcon = ArrowDown;
      exports.ArrowDownLeft = ArrowDownLeft;
      exports.ArrowDownLeftFromCircle = ArrowDownLeftFromCircle;
      exports.ArrowDownLeftFromCircleIcon = ArrowDownLeftFromCircle;
      exports.ArrowDownLeftFromSquare = ArrowDownLeftFromSquare;
      exports.ArrowDownLeftFromSquareIcon = ArrowDownLeftFromSquare;
      exports.ArrowDownLeftIcon = ArrowDownLeft;
      exports.ArrowDownLeftSquare = ArrowDownLeftSquare;
      exports.ArrowDownLeftSquareIcon = ArrowDownLeftSquare;
      exports.ArrowDownNarrowWide = ArrowDownNarrowWide;
      exports.ArrowDownNarrowWideIcon = ArrowDownNarrowWide;
      exports.ArrowDownRight = ArrowDownRight;
      exports.ArrowDownRightFromCircle = ArrowDownRightFromCircle;
      exports.ArrowDownRightFromCircleIcon = ArrowDownRightFromCircle;
      exports.ArrowDownRightFromSquare = ArrowDownRightFromSquare;
      exports.ArrowDownRightFromSquareIcon = ArrowDownRightFromSquare;
      exports.ArrowDownRightIcon = ArrowDownRight;
      exports.ArrowDownRightSquare = ArrowDownRightSquare;
      exports.ArrowDownRightSquareIcon = ArrowDownRightSquare;
      exports.ArrowDownSquare = ArrowDownSquare;
      exports.ArrowDownSquareIcon = ArrowDownSquare;
      exports.ArrowDownToDot = ArrowDownToDot;
      exports.ArrowDownToDotIcon = ArrowDownToDot;
      exports.ArrowDownToLine = ArrowDownToLine;
      exports.ArrowDownToLineIcon = ArrowDownToLine;
      exports.ArrowDownUp = ArrowDownUp;
      exports.ArrowDownUpIcon = ArrowDownUp;
      exports.ArrowDownWideNarrow = ArrowDownWideNarrow;
      exports.ArrowDownWideNarrowIcon = ArrowDownWideNarrow;
      exports.ArrowDownZA = ArrowDownZA;
      exports.ArrowDownZAIcon = ArrowDownZA;
      exports.ArrowDownZa = ArrowDownZA;
      exports.ArrowDownZaIcon = ArrowDownZA;
      exports.ArrowLeft = ArrowLeft;
      exports.ArrowLeftCircle = ArrowLeftCircle;
      exports.ArrowLeftCircleIcon = ArrowLeftCircle;
      exports.ArrowLeftFromLine = ArrowLeftFromLine;
      exports.ArrowLeftFromLineIcon = ArrowLeftFromLine;
      exports.ArrowLeftIcon = ArrowLeft;
      exports.ArrowLeftRight = ArrowLeftRight;
      exports.ArrowLeftRightIcon = ArrowLeftRight;
      exports.ArrowLeftSquare = ArrowLeftSquare;
      exports.ArrowLeftSquareIcon = ArrowLeftSquare;
      exports.ArrowLeftToLine = ArrowLeftToLine;
      exports.ArrowLeftToLineIcon = ArrowLeftToLine;
      exports.ArrowRight = ArrowRight;
      exports.ArrowRightCircle = ArrowRightCircle;
      exports.ArrowRightCircleIcon = ArrowRightCircle;
      exports.ArrowRightFromLine = ArrowRightFromLine;
      exports.ArrowRightFromLineIcon = ArrowRightFromLine;
      exports.ArrowRightIcon = ArrowRight;
      exports.ArrowRightLeft = ArrowRightLeft;
      exports.ArrowRightLeftIcon = ArrowRightLeft;
      exports.ArrowRightSquare = ArrowRightSquare;
      exports.ArrowRightSquareIcon = ArrowRightSquare;
      exports.ArrowRightToLine = ArrowRightToLine;
      exports.ArrowRightToLineIcon = ArrowRightToLine;
      exports.ArrowUp = ArrowUp;
      exports.ArrowUp01 = ArrowUp01;
      exports.ArrowUp01Icon = ArrowUp01;
      exports.ArrowUp10 = ArrowUp10;
      exports.ArrowUp10Icon = ArrowUp10;
      exports.ArrowUpAZ = ArrowUpAZ;
      exports.ArrowUpAZIcon = ArrowUpAZ;
      exports.ArrowUpAz = ArrowUpAZ;
      exports.ArrowUpAzIcon = ArrowUpAZ;
      exports.ArrowUpCircle = ArrowUpCircle;
      exports.ArrowUpCircleIcon = ArrowUpCircle;
      exports.ArrowUpDown = ArrowUpDown;
      exports.ArrowUpDownIcon = ArrowUpDown;
      exports.ArrowUpFromDot = ArrowUpFromDot;
      exports.ArrowUpFromDotIcon = ArrowUpFromDot;
      exports.ArrowUpFromLine = ArrowUpFromLine;
      exports.ArrowUpFromLineIcon = ArrowUpFromLine;
      exports.ArrowUpIcon = ArrowUp;
      exports.ArrowUpLeft = ArrowUpLeft;
      exports.ArrowUpLeftFromCircle = ArrowUpLeftFromCircle;
      exports.ArrowUpLeftFromCircleIcon = ArrowUpLeftFromCircle;
      exports.ArrowUpLeftFromSquare = ArrowUpLeftFromSquare;
      exports.ArrowUpLeftFromSquareIcon = ArrowUpLeftFromSquare;
      exports.ArrowUpLeftIcon = ArrowUpLeft;
      exports.ArrowUpLeftSquare = ArrowUpLeftSquare;
      exports.ArrowUpLeftSquareIcon = ArrowUpLeftSquare;
      exports.ArrowUpNarrowWide = ArrowUpNarrowWide;
      exports.ArrowUpNarrowWideIcon = ArrowUpNarrowWide;
      exports.ArrowUpRight = ArrowUpRight;
      exports.ArrowUpRightFromCircle = ArrowUpRightFromCircle;
      exports.ArrowUpRightFromCircleIcon = ArrowUpRightFromCircle;
      exports.ArrowUpRightFromSquare = ArrowUpRightFromSquare;
      exports.ArrowUpRightFromSquareIcon = ArrowUpRightFromSquare;
      exports.ArrowUpRightIcon = ArrowUpRight;
      exports.ArrowUpRightSquare = ArrowUpRightSquare;
      exports.ArrowUpRightSquareIcon = ArrowUpRightSquare;
      exports.ArrowUpSquare = ArrowUpSquare;
      exports.ArrowUpSquareIcon = ArrowUpSquare;
      exports.ArrowUpToLine = ArrowUpToLine;
      exports.ArrowUpToLineIcon = ArrowUpToLine;
      exports.ArrowUpWideNarrow = ArrowUpWideNarrow;
      exports.ArrowUpWideNarrowIcon = ArrowUpWideNarrow;
      exports.ArrowUpZA = ArrowUpZA;
      exports.ArrowUpZAIcon = ArrowUpZA;
      exports.ArrowUpZa = ArrowUpZA;
      exports.ArrowUpZaIcon = ArrowUpZA;
      exports.ArrowsUpFromLine = ArrowsUpFromLine;
      exports.ArrowsUpFromLineIcon = ArrowsUpFromLine;
      exports.Asterisk = Asterisk;
      exports.AsteriskIcon = Asterisk;
      exports.AsteriskSquare = AsteriskSquare;
      exports.AsteriskSquareIcon = AsteriskSquare;
      exports.AtSign = AtSign;
      exports.AtSignIcon = AtSign;
      exports.Atom = Atom;
      exports.AtomIcon = Atom;
      exports.AudioLines = AudioLines;
      exports.AudioLinesIcon = AudioLines;
      exports.AudioWaveform = AudioWaveform;
      exports.AudioWaveformIcon = AudioWaveform;
      exports.Award = Award;
      exports.AwardIcon = Award;
      exports.Axe = Axe;
      exports.AxeIcon = Axe;
      exports.Axis3D = Axis3d;
      exports.Axis3DIcon = Axis3d;
      exports.Axis3d = Axis3d;
      exports.Axis3dIcon = Axis3d;
      exports.Baby = Baby;
      exports.BabyIcon = Baby;
      exports.Backpack = Backpack;
      exports.BackpackIcon = Backpack;
      exports.Badge = Badge;
      exports.BadgeAlert = BadgeAlert;
      exports.BadgeAlertIcon = BadgeAlert;
      exports.BadgeCent = BadgeCent;
      exports.BadgeCentIcon = BadgeCent;
      exports.BadgeCheck = BadgeCheck;
      exports.BadgeCheckIcon = BadgeCheck;
      exports.BadgeDollarSign = BadgeDollarSign;
      exports.BadgeDollarSignIcon = BadgeDollarSign;
      exports.BadgeEuro = BadgeEuro;
      exports.BadgeEuroIcon = BadgeEuro;
      exports.BadgeHelp = BadgeHelp;
      exports.BadgeHelpIcon = BadgeHelp;
      exports.BadgeIcon = Badge;
      exports.BadgeIndianRupee = BadgeIndianRupee;
      exports.BadgeIndianRupeeIcon = BadgeIndianRupee;
      exports.BadgeInfo = BadgeInfo;
      exports.BadgeInfoIcon = BadgeInfo;
      exports.BadgeJapaneseYen = BadgeJapaneseYen;
      exports.BadgeJapaneseYenIcon = BadgeJapaneseYen;
      exports.BadgeMinus = BadgeMinus;
      exports.BadgeMinusIcon = BadgeMinus;
      exports.BadgePercent = BadgePercent;
      exports.BadgePercentIcon = BadgePercent;
      exports.BadgePlus = BadgePlus;
      exports.BadgePlusIcon = BadgePlus;
      exports.BadgePoundSterling = BadgePoundSterling;
      exports.BadgePoundSterlingIcon = BadgePoundSterling;
      exports.BadgeRussianRuble = BadgeRussianRuble;
      exports.BadgeRussianRubleIcon = BadgeRussianRuble;
      exports.BadgeSwissFranc = BadgeSwissFranc;
      exports.BadgeSwissFrancIcon = BadgeSwissFranc;
      exports.BadgeX = BadgeX;
      exports.BadgeXIcon = BadgeX;
      exports.BaggageClaim = BaggageClaim;
      exports.BaggageClaimIcon = BaggageClaim;
      exports.Ban = Ban;
      exports.BanIcon = Ban;
      exports.Banana = Banana;
      exports.BananaIcon = Banana;
      exports.Banknote = Banknote;
      exports.BanknoteIcon = Banknote;
      exports.BarChart = BarChart;
      exports.BarChart2 = BarChart2;
      exports.BarChart2Icon = BarChart2;
      exports.BarChart3 = BarChart3;
      exports.BarChart3Icon = BarChart3;
      exports.BarChart4 = BarChart4;
      exports.BarChart4Icon = BarChart4;
      exports.BarChartBig = BarChartBig;
      exports.BarChartBigIcon = BarChartBig;
      exports.BarChartHorizontal = BarChartHorizontal;
      exports.BarChartHorizontalBig = BarChartHorizontalBig;
      exports.BarChartHorizontalBigIcon = BarChartHorizontalBig;
      exports.BarChartHorizontalIcon = BarChartHorizontal;
      exports.BarChartIcon = BarChart;
      exports.Barcode = Barcode;
      exports.BarcodeIcon = Barcode;
      exports.Baseline = Baseline;
      exports.BaselineIcon = Baseline;
      exports.Bath = Bath;
      exports.BathIcon = Bath;
      exports.Battery = Battery;
      exports.BatteryCharging = BatteryCharging;
      exports.BatteryChargingIcon = BatteryCharging;
      exports.BatteryFull = BatteryFull;
      exports.BatteryFullIcon = BatteryFull;
      exports.BatteryIcon = Battery;
      exports.BatteryLow = BatteryLow;
      exports.BatteryLowIcon = BatteryLow;
      exports.BatteryMedium = BatteryMedium;
      exports.BatteryMediumIcon = BatteryMedium;
      exports.BatteryWarning = BatteryWarning;
      exports.BatteryWarningIcon = BatteryWarning;
      exports.Beaker = Beaker;
      exports.BeakerIcon = Beaker;
      exports.Bean = Bean;
      exports.BeanIcon = Bean;
      exports.BeanOff = BeanOff;
      exports.BeanOffIcon = BeanOff;
      exports.Bed = Bed;
      exports.BedDouble = BedDouble;
      exports.BedDoubleIcon = BedDouble;
      exports.BedIcon = Bed;
      exports.BedSingle = BedSingle;
      exports.BedSingleIcon = BedSingle;
      exports.Beef = Beef;
      exports.BeefIcon = Beef;
      exports.Beer = Beer;
      exports.BeerIcon = Beer;
      exports.Bell = Bell;
      exports.BellDot = BellDot;
      exports.BellDotIcon = BellDot;
      exports.BellElectric = BellElectric;
      exports.BellElectricIcon = BellElectric;
      exports.BellIcon = Bell;
      exports.BellMinus = BellMinus;
      exports.BellMinusIcon = BellMinus;
      exports.BellOff = BellOff;
      exports.BellOffIcon = BellOff;
      exports.BellPlus = BellPlus;
      exports.BellPlusIcon = BellPlus;
      exports.BellRing = BellRing;
      exports.BellRingIcon = BellRing;
      exports.BetweenHorizonalEnd = BetweenHorizontalEnd;
      exports.BetweenHorizonalEndIcon = BetweenHorizontalEnd;
      exports.BetweenHorizonalStart = BetweenHorizontalStart;
      exports.BetweenHorizonalStartIcon = BetweenHorizontalStart;
      exports.BetweenHorizontalEnd = BetweenHorizontalEnd;
      exports.BetweenHorizontalEndIcon = BetweenHorizontalEnd;
      exports.BetweenHorizontalStart = BetweenHorizontalStart;
      exports.BetweenHorizontalStartIcon = BetweenHorizontalStart;
      exports.BetweenVerticalEnd = BetweenVerticalEnd;
      exports.BetweenVerticalEndIcon = BetweenVerticalEnd;
      exports.BetweenVerticalStart = BetweenVerticalStart;
      exports.BetweenVerticalStartIcon = BetweenVerticalStart;
      exports.Bike = Bike;
      exports.BikeIcon = Bike;
      exports.Binary = Binary;
      exports.BinaryIcon = Binary;
      exports.Biohazard = Biohazard;
      exports.BiohazardIcon = Biohazard;
      exports.Bird = Bird;
      exports.BirdIcon = Bird;
      exports.Bitcoin = Bitcoin;
      exports.BitcoinIcon = Bitcoin;
      exports.Blend = Blend;
      exports.BlendIcon = Blend;
      exports.Blinds = Blinds;
      exports.BlindsIcon = Blinds;
      exports.Blocks = Blocks;
      exports.BlocksIcon = Blocks;
      exports.Bluetooth = Bluetooth;
      exports.BluetoothConnected = BluetoothConnected;
      exports.BluetoothConnectedIcon = BluetoothConnected;
      exports.BluetoothIcon = Bluetooth;
      exports.BluetoothOff = BluetoothOff;
      exports.BluetoothOffIcon = BluetoothOff;
      exports.BluetoothSearching = BluetoothSearching;
      exports.BluetoothSearchingIcon = BluetoothSearching;
      exports.Bold = Bold;
      exports.BoldIcon = Bold;
      exports.Bolt = Bolt;
      exports.BoltIcon = Bolt;
      exports.Bomb = Bomb;
      exports.BombIcon = Bomb;
      exports.Bone = Bone;
      exports.BoneIcon = Bone;
      exports.Book = Book;
      exports.BookA = BookA;
      exports.BookAIcon = BookA;
      exports.BookAudio = BookAudio;
      exports.BookAudioIcon = BookAudio;
      exports.BookCheck = BookCheck;
      exports.BookCheckIcon = BookCheck;
      exports.BookCopy = BookCopy;
      exports.BookCopyIcon = BookCopy;
      exports.BookDashed = BookDashed;
      exports.BookDashedIcon = BookDashed;
      exports.BookDown = BookDown;
      exports.BookDownIcon = BookDown;
      exports.BookHeadphones = BookHeadphones;
      exports.BookHeadphonesIcon = BookHeadphones;
      exports.BookHeart = BookHeart;
      exports.BookHeartIcon = BookHeart;
      exports.BookIcon = Book;
      exports.BookImage = BookImage;
      exports.BookImageIcon = BookImage;
      exports.BookKey = BookKey;
      exports.BookKeyIcon = BookKey;
      exports.BookLock = BookLock;
      exports.BookLockIcon = BookLock;
      exports.BookMarked = BookMarked;
      exports.BookMarkedIcon = BookMarked;
      exports.BookMinus = BookMinus;
      exports.BookMinusIcon = BookMinus;
      exports.BookOpen = BookOpen;
      exports.BookOpenCheck = BookOpenCheck;
      exports.BookOpenCheckIcon = BookOpenCheck;
      exports.BookOpenIcon = BookOpen;
      exports.BookOpenText = BookOpenText;
      exports.BookOpenTextIcon = BookOpenText;
      exports.BookPlus = BookPlus;
      exports.BookPlusIcon = BookPlus;
      exports.BookTemplate = BookDashed;
      exports.BookTemplateIcon = BookDashed;
      exports.BookText = BookText;
      exports.BookTextIcon = BookText;
      exports.BookType = BookType;
      exports.BookTypeIcon = BookType;
      exports.BookUp = BookUp;
      exports.BookUp2 = BookUp2;
      exports.BookUp2Icon = BookUp2;
      exports.BookUpIcon = BookUp;
      exports.BookUser = BookUser;
      exports.BookUserIcon = BookUser;
      exports.BookX = BookX;
      exports.BookXIcon = BookX;
      exports.Bookmark = Bookmark;
      exports.BookmarkCheck = BookmarkCheck;
      exports.BookmarkCheckIcon = BookmarkCheck;
      exports.BookmarkIcon = Bookmark;
      exports.BookmarkMinus = BookmarkMinus;
      exports.BookmarkMinusIcon = BookmarkMinus;
      exports.BookmarkPlus = BookmarkPlus;
      exports.BookmarkPlusIcon = BookmarkPlus;
      exports.BookmarkX = BookmarkX;
      exports.BookmarkXIcon = BookmarkX;
      exports.BoomBox = BoomBox;
      exports.BoomBoxIcon = BoomBox;
      exports.Bot = Bot;
      exports.BotIcon = Bot;
      exports.Box = Box;
      exports.BoxIcon = Box;
      exports.BoxSelect = BoxSelect;
      exports.BoxSelectIcon = BoxSelect;
      exports.Boxes = Boxes;
      exports.BoxesIcon = Boxes;
      exports.Braces = Braces;
      exports.BracesIcon = Braces;
      exports.Brackets = Brackets;
      exports.BracketsIcon = Brackets;
      exports.Brain = Brain;
      exports.BrainCircuit = BrainCircuit;
      exports.BrainCircuitIcon = BrainCircuit;
      exports.BrainCog = BrainCog;
      exports.BrainCogIcon = BrainCog;
      exports.BrainIcon = Brain;
      exports.BrickWall = BrickWall;
      exports.BrickWallIcon = BrickWall;
      exports.Briefcase = Briefcase;
      exports.BriefcaseIcon = Briefcase;
      exports.BringToFront = BringToFront;
      exports.BringToFrontIcon = BringToFront;
      exports.Brush = Brush;
      exports.BrushIcon = Brush;
      exports.Bug = Bug;
      exports.BugIcon = Bug;
      exports.BugOff = BugOff;
      exports.BugOffIcon = BugOff;
      exports.BugPlay = BugPlay;
      exports.BugPlayIcon = BugPlay;
      exports.Building = Building;
      exports.Building2 = Building2;
      exports.Building2Icon = Building2;
      exports.BuildingIcon = Building;
      exports.Bus = Bus;
      exports.BusFront = BusFront;
      exports.BusFrontIcon = BusFront;
      exports.BusIcon = Bus;
      exports.Cable = Cable;
      exports.CableCar = CableCar;
      exports.CableCarIcon = CableCar;
      exports.CableIcon = Cable;
      exports.Cake = Cake;
      exports.CakeIcon = Cake;
      exports.CakeSlice = CakeSlice;
      exports.CakeSliceIcon = CakeSlice;
      exports.Calculator = Calculator;
      exports.CalculatorIcon = Calculator;
      exports.Calendar = Calendar;
      exports.CalendarCheck = CalendarCheck;
      exports.CalendarCheck2 = CalendarCheck2;
      exports.CalendarCheck2Icon = CalendarCheck2;
      exports.CalendarCheckIcon = CalendarCheck;
      exports.CalendarClock = CalendarClock;
      exports.CalendarClockIcon = CalendarClock;
      exports.CalendarDays = CalendarDays;
      exports.CalendarDaysIcon = CalendarDays;
      exports.CalendarFold = CalendarFold;
      exports.CalendarFoldIcon = CalendarFold;
      exports.CalendarHeart = CalendarHeart;
      exports.CalendarHeartIcon = CalendarHeart;
      exports.CalendarIcon = Calendar;
      exports.CalendarMinus = CalendarMinus;
      exports.CalendarMinus2 = CalendarMinus2;
      exports.CalendarMinus2Icon = CalendarMinus2;
      exports.CalendarMinusIcon = CalendarMinus;
      exports.CalendarOff = CalendarOff;
      exports.CalendarOffIcon = CalendarOff;
      exports.CalendarPlus = CalendarPlus;
      exports.CalendarPlus2 = CalendarPlus2;
      exports.CalendarPlus2Icon = CalendarPlus2;
      exports.CalendarPlusIcon = CalendarPlus;
      exports.CalendarRange = CalendarRange;
      exports.CalendarRangeIcon = CalendarRange;
      exports.CalendarSearch = CalendarSearch;
      exports.CalendarSearchIcon = CalendarSearch;
      exports.CalendarX = CalendarX;
      exports.CalendarX2 = CalendarX2;
      exports.CalendarX2Icon = CalendarX2;
      exports.CalendarXIcon = CalendarX;
      exports.Camera = Camera;
      exports.CameraIcon = Camera;
      exports.CameraOff = CameraOff;
      exports.CameraOffIcon = CameraOff;
      exports.CandlestickChart = CandlestickChart;
      exports.CandlestickChartIcon = CandlestickChart;
      exports.Candy = Candy;
      exports.CandyCane = CandyCane;
      exports.CandyCaneIcon = CandyCane;
      exports.CandyIcon = Candy;
      exports.CandyOff = CandyOff;
      exports.CandyOffIcon = CandyOff;
      exports.Car = Car;
      exports.CarFront = CarFront;
      exports.CarFrontIcon = CarFront;
      exports.CarIcon = Car;
      exports.CarTaxiFront = CarTaxiFront;
      exports.CarTaxiFrontIcon = CarTaxiFront;
      exports.Caravan = Caravan;
      exports.CaravanIcon = Caravan;
      exports.Carrot = Carrot;
      exports.CarrotIcon = Carrot;
      exports.CaseLower = CaseLower;
      exports.CaseLowerIcon = CaseLower;
      exports.CaseSensitive = CaseSensitive;
      exports.CaseSensitiveIcon = CaseSensitive;
      exports.CaseUpper = CaseUpper;
      exports.CaseUpperIcon = CaseUpper;
      exports.CassetteTape = CassetteTape;
      exports.CassetteTapeIcon = CassetteTape;
      exports.Cast = Cast;
      exports.CastIcon = Cast;
      exports.Castle = Castle;
      exports.CastleIcon = Castle;
      exports.Cat = Cat;
      exports.CatIcon = Cat;
      exports.Cctv = Cctv;
      exports.CctvIcon = Cctv;
      exports.Check = Check;
      exports.CheckCheck = CheckCheck;
      exports.CheckCheckIcon = CheckCheck;
      exports.CheckCircle = CheckCircle;
      exports.CheckCircle2 = CheckCircle2;
      exports.CheckCircle2Icon = CheckCircle2;
      exports.CheckCircleIcon = CheckCircle;
      exports.CheckIcon = Check;
      exports.CheckSquare = CheckSquare;
      exports.CheckSquare2 = CheckSquare2;
      exports.CheckSquare2Icon = CheckSquare2;
      exports.CheckSquareIcon = CheckSquare;
      exports.ChefHat = ChefHat;
      exports.ChefHatIcon = ChefHat;
      exports.Cherry = Cherry;
      exports.CherryIcon = Cherry;
      exports.ChevronDown = ChevronDown;
      exports.ChevronDownCircle = ChevronDownCircle;
      exports.ChevronDownCircleIcon = ChevronDownCircle;
      exports.ChevronDownIcon = ChevronDown;
      exports.ChevronDownSquare = ChevronDownSquare;
      exports.ChevronDownSquareIcon = ChevronDownSquare;
      exports.ChevronFirst = ChevronFirst;
      exports.ChevronFirstIcon = ChevronFirst;
      exports.ChevronLast = ChevronLast;
      exports.ChevronLastIcon = ChevronLast;
      exports.ChevronLeft = ChevronLeft;
      exports.ChevronLeftCircle = ChevronLeftCircle;
      exports.ChevronLeftCircleIcon = ChevronLeftCircle;
      exports.ChevronLeftIcon = ChevronLeft;
      exports.ChevronLeftSquare = ChevronLeftSquare;
      exports.ChevronLeftSquareIcon = ChevronLeftSquare;
      exports.ChevronRight = ChevronRight;
      exports.ChevronRightCircle = ChevronRightCircle;
      exports.ChevronRightCircleIcon = ChevronRightCircle;
      exports.ChevronRightIcon = ChevronRight;
      exports.ChevronRightSquare = ChevronRightSquare;
      exports.ChevronRightSquareIcon = ChevronRightSquare;
      exports.ChevronUp = ChevronUp;
      exports.ChevronUpCircle = ChevronUpCircle;
      exports.ChevronUpCircleIcon = ChevronUpCircle;
      exports.ChevronUpIcon = ChevronUp;
      exports.ChevronUpSquare = ChevronUpSquare;
      exports.ChevronUpSquareIcon = ChevronUpSquare;
      exports.ChevronsDown = ChevronsDown;
      exports.ChevronsDownIcon = ChevronsDown;
      exports.ChevronsDownUp = ChevronsDownUp;
      exports.ChevronsDownUpIcon = ChevronsDownUp;
      exports.ChevronsLeft = ChevronsLeft;
      exports.ChevronsLeftIcon = ChevronsLeft;
      exports.ChevronsLeftRight = ChevronsLeftRight;
      exports.ChevronsLeftRightIcon = ChevronsLeftRight;
      exports.ChevronsRight = ChevronsRight;
      exports.ChevronsRightIcon = ChevronsRight;
      exports.ChevronsRightLeft = ChevronsRightLeft;
      exports.ChevronsRightLeftIcon = ChevronsRightLeft;
      exports.ChevronsUp = ChevronsUp;
      exports.ChevronsUpDown = ChevronsUpDown;
      exports.ChevronsUpDownIcon = ChevronsUpDown;
      exports.ChevronsUpIcon = ChevronsUp;
      exports.Chrome = Chrome;
      exports.ChromeIcon = Chrome;
      exports.Church = Church;
      exports.ChurchIcon = Church;
      exports.Cigarette = Cigarette;
      exports.CigaretteIcon = Cigarette;
      exports.CigaretteOff = CigaretteOff;
      exports.CigaretteOffIcon = CigaretteOff;
      exports.Circle = Circle;
      exports.CircleDashed = CircleDashed;
      exports.CircleDashedIcon = CircleDashed;
      exports.CircleDollarSign = CircleDollarSign;
      exports.CircleDollarSignIcon = CircleDollarSign;
      exports.CircleDot = CircleDot;
      exports.CircleDotDashed = CircleDotDashed;
      exports.CircleDotDashedIcon = CircleDotDashed;
      exports.CircleDotIcon = CircleDot;
      exports.CircleEllipsis = CircleEllipsis;
      exports.CircleEllipsisIcon = CircleEllipsis;
      exports.CircleEqual = CircleEqual;
      exports.CircleEqualIcon = CircleEqual;
      exports.CircleIcon = Circle;
      exports.CircleOff = CircleOff;
      exports.CircleOffIcon = CircleOff;
      exports.CircleSlash = CircleSlash;
      exports.CircleSlash2 = CircleSlash2;
      exports.CircleSlash2Icon = CircleSlash2;
      exports.CircleSlashIcon = CircleSlash;
      exports.CircleSlashed = CircleSlash2;
      exports.CircleSlashedIcon = CircleSlash2;
      exports.CircleUser = CircleUser;
      exports.CircleUserIcon = CircleUser;
      exports.CircleUserRound = CircleUserRound;
      exports.CircleUserRoundIcon = CircleUserRound;
      exports.CircuitBoard = CircuitBoard;
      exports.CircuitBoardIcon = CircuitBoard;
      exports.Citrus = Citrus;
      exports.CitrusIcon = Citrus;
      exports.Clapperboard = Clapperboard;
      exports.ClapperboardIcon = Clapperboard;
      exports.Clipboard = Clipboard;
      exports.ClipboardCheck = ClipboardCheck;
      exports.ClipboardCheckIcon = ClipboardCheck;
      exports.ClipboardCopy = ClipboardCopy;
      exports.ClipboardCopyIcon = ClipboardCopy;
      exports.ClipboardEdit = ClipboardPen;
      exports.ClipboardEditIcon = ClipboardPen;
      exports.ClipboardIcon = Clipboard;
      exports.ClipboardList = ClipboardList;
      exports.ClipboardListIcon = ClipboardList;
      exports.ClipboardPaste = ClipboardPaste;
      exports.ClipboardPasteIcon = ClipboardPaste;
      exports.ClipboardPen = ClipboardPen;
      exports.ClipboardPenIcon = ClipboardPen;
      exports.ClipboardPenLine = ClipboardPenLine;
      exports.ClipboardPenLineIcon = ClipboardPenLine;
      exports.ClipboardSignature = ClipboardPenLine;
      exports.ClipboardSignatureIcon = ClipboardPenLine;
      exports.ClipboardType = ClipboardType;
      exports.ClipboardTypeIcon = ClipboardType;
      exports.ClipboardX = ClipboardX;
      exports.ClipboardXIcon = ClipboardX;
      exports.Clock = Clock;
      exports.Clock1 = Clock1;
      exports.Clock10 = Clock10;
      exports.Clock10Icon = Clock10;
      exports.Clock11 = Clock11;
      exports.Clock11Icon = Clock11;
      exports.Clock12 = Clock12;
      exports.Clock12Icon = Clock12;
      exports.Clock1Icon = Clock1;
      exports.Clock2 = Clock2;
      exports.Clock2Icon = Clock2;
      exports.Clock3 = Clock3;
      exports.Clock3Icon = Clock3;
      exports.Clock4 = Clock4;
      exports.Clock4Icon = Clock4;
      exports.Clock5 = Clock5;
      exports.Clock5Icon = Clock5;
      exports.Clock6 = Clock6;
      exports.Clock6Icon = Clock6;
      exports.Clock7 = Clock7;
      exports.Clock7Icon = Clock7;
      exports.Clock8 = Clock8;
      exports.Clock8Icon = Clock8;
      exports.Clock9 = Clock9;
      exports.Clock9Icon = Clock9;
      exports.ClockIcon = Clock;
      exports.Cloud = Cloud;
      exports.CloudCog = CloudCog;
      exports.CloudCogIcon = CloudCog;
      exports.CloudDrizzle = CloudDrizzle;
      exports.CloudDrizzleIcon = CloudDrizzle;
      exports.CloudFog = CloudFog;
      exports.CloudFogIcon = CloudFog;
      exports.CloudHail = CloudHail;
      exports.CloudHailIcon = CloudHail;
      exports.CloudIcon = Cloud;
      exports.CloudLightning = CloudLightning;
      exports.CloudLightningIcon = CloudLightning;
      exports.CloudMoon = CloudMoon;
      exports.CloudMoonIcon = CloudMoon;
      exports.CloudMoonRain = CloudMoonRain;
      exports.CloudMoonRainIcon = CloudMoonRain;
      exports.CloudOff = CloudOff;
      exports.CloudOffIcon = CloudOff;
      exports.CloudRain = CloudRain;
      exports.CloudRainIcon = CloudRain;
      exports.CloudRainWind = CloudRainWind;
      exports.CloudRainWindIcon = CloudRainWind;
      exports.CloudSnow = CloudSnow;
      exports.CloudSnowIcon = CloudSnow;
      exports.CloudSun = CloudSun;
      exports.CloudSunIcon = CloudSun;
      exports.CloudSunRain = CloudSunRain;
      exports.CloudSunRainIcon = CloudSunRain;
      exports.Cloudy = Cloudy;
      exports.CloudyIcon = Cloudy;
      exports.Clover = Clover;
      exports.CloverIcon = Clover;
      exports.Club = Club;
      exports.ClubIcon = Club;
      exports.Code = Code;
      exports.Code2 = Code2;
      exports.Code2Icon = Code2;
      exports.CodeIcon = Code;
      exports.CodeSquare = CodeSquare;
      exports.CodeSquareIcon = CodeSquare;
      exports.Codepen = Codepen;
      exports.CodepenIcon = Codepen;
      exports.Codesandbox = Codesandbox;
      exports.CodesandboxIcon = Codesandbox;
      exports.Coffee = Coffee;
      exports.CoffeeIcon = Coffee;
      exports.Cog = Cog;
      exports.CogIcon = Cog;
      exports.Coins = Coins;
      exports.CoinsIcon = Coins;
      exports.Columns = Columns2;
      exports.Columns2 = Columns2;
      exports.Columns2Icon = Columns2;
      exports.Columns3 = Columns3;
      exports.Columns3Icon = Columns3;
      exports.Columns4 = Columns4;
      exports.Columns4Icon = Columns4;
      exports.ColumnsIcon = Columns2;
      exports.Combine = Combine;
      exports.CombineIcon = Combine;
      exports.Command = Command;
      exports.CommandIcon = Command;
      exports.Compass = Compass;
      exports.CompassIcon = Compass;
      exports.Component = Component;
      exports.ComponentIcon = Component;
      exports.Computer = Computer;
      exports.ComputerIcon = Computer;
      exports.ConciergeBell = ConciergeBell;
      exports.ConciergeBellIcon = ConciergeBell;
      exports.Cone = Cone;
      exports.ConeIcon = Cone;
      exports.Construction = Construction;
      exports.ConstructionIcon = Construction;
      exports.Contact = Contact;
      exports.Contact2 = Contact2;
      exports.Contact2Icon = Contact2;
      exports.ContactIcon = Contact;
      exports.Container = Container;
      exports.ContainerIcon = Container;
      exports.Contrast = Contrast;
      exports.ContrastIcon = Contrast;
      exports.Cookie = Cookie;
      exports.CookieIcon = Cookie;
      exports.CookingPot = CookingPot;
      exports.CookingPotIcon = CookingPot;
      exports.Copy = Copy;
      exports.CopyCheck = CopyCheck;
      exports.CopyCheckIcon = CopyCheck;
      exports.CopyIcon = Copy;
      exports.CopyMinus = CopyMinus;
      exports.CopyMinusIcon = CopyMinus;
      exports.CopyPlus = CopyPlus;
      exports.CopyPlusIcon = CopyPlus;
      exports.CopySlash = CopySlash;
      exports.CopySlashIcon = CopySlash;
      exports.CopyX = CopyX;
      exports.CopyXIcon = CopyX;
      exports.Copyleft = Copyleft;
      exports.CopyleftIcon = Copyleft;
      exports.Copyright = Copyright;
      exports.CopyrightIcon = Copyright;
      exports.CornerDownLeft = CornerDownLeft;
      exports.CornerDownLeftIcon = CornerDownLeft;
      exports.CornerDownRight = CornerDownRight;
      exports.CornerDownRightIcon = CornerDownRight;
      exports.CornerLeftDown = CornerLeftDown;
      exports.CornerLeftDownIcon = CornerLeftDown;
      exports.CornerLeftUp = CornerLeftUp;
      exports.CornerLeftUpIcon = CornerLeftUp;
      exports.CornerRightDown = CornerRightDown;
      exports.CornerRightDownIcon = CornerRightDown;
      exports.CornerRightUp = CornerRightUp;
      exports.CornerRightUpIcon = CornerRightUp;
      exports.CornerUpLeft = CornerUpLeft;
      exports.CornerUpLeftIcon = CornerUpLeft;
      exports.CornerUpRight = CornerUpRight;
      exports.CornerUpRightIcon = CornerUpRight;
      exports.Cpu = Cpu;
      exports.CpuIcon = Cpu;
      exports.CreativeCommons = CreativeCommons;
      exports.CreativeCommonsIcon = CreativeCommons;
      exports.CreditCard = CreditCard;
      exports.CreditCardIcon = CreditCard;
      exports.Croissant = Croissant;
      exports.CroissantIcon = Croissant;
      exports.Crop = Crop;
      exports.CropIcon = Crop;
      exports.Cross = Cross;
      exports.CrossIcon = Cross;
      exports.Crosshair = Crosshair;
      exports.CrosshairIcon = Crosshair;
      exports.Crown = Crown;
      exports.CrownIcon = Crown;
      exports.Cuboid = Cuboid;
      exports.CuboidIcon = Cuboid;
      exports.CupSoda = CupSoda;
      exports.CupSodaIcon = CupSoda;
      exports.CurlyBraces = Braces;
      exports.CurlyBracesIcon = Braces;
      exports.Currency = Currency;
      exports.CurrencyIcon = Currency;
      exports.Cylinder = Cylinder;
      exports.CylinderIcon = Cylinder;
      exports.Database = Database;
      exports.DatabaseBackup = DatabaseBackup;
      exports.DatabaseBackupIcon = DatabaseBackup;
      exports.DatabaseIcon = Database;
      exports.DatabaseZap = DatabaseZap;
      exports.DatabaseZapIcon = DatabaseZap;
      exports.Delete = Delete;
      exports.DeleteIcon = Delete;
      exports.Dessert = Dessert;
      exports.DessertIcon = Dessert;
      exports.Diameter = Diameter;
      exports.DiameterIcon = Diameter;
      exports.Diamond = Diamond;
      exports.DiamondIcon = Diamond;
      exports.Dice1 = Dice1;
      exports.Dice1Icon = Dice1;
      exports.Dice2 = Dice2;
      exports.Dice2Icon = Dice2;
      exports.Dice3 = Dice3;
      exports.Dice3Icon = Dice3;
      exports.Dice4 = Dice4;
      exports.Dice4Icon = Dice4;
      exports.Dice5 = Dice5;
      exports.Dice5Icon = Dice5;
      exports.Dice6 = Dice6;
      exports.Dice6Icon = Dice6;
      exports.Dices = Dices;
      exports.DicesIcon = Dices;
      exports.Diff = Diff;
      exports.DiffIcon = Diff;
      exports.Disc = Disc;
      exports.Disc2 = Disc2;
      exports.Disc2Icon = Disc2;
      exports.Disc3 = Disc3;
      exports.Disc3Icon = Disc3;
      exports.DiscAlbum = DiscAlbum;
      exports.DiscAlbumIcon = DiscAlbum;
      exports.DiscIcon = Disc;
      exports.Divide = Divide;
      exports.DivideCircle = DivideCircle;
      exports.DivideCircleIcon = DivideCircle;
      exports.DivideIcon = Divide;
      exports.DivideSquare = DivideSquare;
      exports.DivideSquareIcon = DivideSquare;
      exports.Dna = Dna;
      exports.DnaIcon = Dna;
      exports.DnaOff = DnaOff;
      exports.DnaOffIcon = DnaOff;
      exports.Dog = Dog;
      exports.DogIcon = Dog;
      exports.DollarSign = DollarSign;
      exports.DollarSignIcon = DollarSign;
      exports.Donut = Donut;
      exports.DonutIcon = Donut;
      exports.DoorClosed = DoorClosed;
      exports.DoorClosedIcon = DoorClosed;
      exports.DoorOpen = DoorOpen;
      exports.DoorOpenIcon = DoorOpen;
      exports.Dot = Dot;
      exports.DotIcon = Dot;
      exports.DotSquare = DotSquare;
      exports.DotSquareIcon = DotSquare;
      exports.Download = Download;
      exports.DownloadCloud = DownloadCloud;
      exports.DownloadCloudIcon = DownloadCloud;
      exports.DownloadIcon = Download;
      exports.DraftingCompass = DraftingCompass;
      exports.DraftingCompassIcon = DraftingCompass;
      exports.Drama = Drama;
      exports.DramaIcon = Drama;
      exports.Dribbble = Dribbble;
      exports.DribbbleIcon = Dribbble;
      exports.Drill = Drill;
      exports.DrillIcon = Drill;
      exports.Droplet = Droplet;
      exports.DropletIcon = Droplet;
      exports.Droplets = Droplets;
      exports.DropletsIcon = Droplets;
      exports.Drum = Drum;
      exports.DrumIcon = Drum;
      exports.Drumstick = Drumstick;
      exports.DrumstickIcon = Drumstick;
      exports.Dumbbell = Dumbbell;
      exports.DumbbellIcon = Dumbbell;
      exports.Ear = Ear;
      exports.EarIcon = Ear;
      exports.EarOff = EarOff;
      exports.EarOffIcon = EarOff;
      exports.Eclipse = Eclipse;
      exports.EclipseIcon = Eclipse;
      exports.Edit = SquarePen;
      exports.Edit2 = Pen;
      exports.Edit2Icon = Pen;
      exports.Edit3 = PenLine;
      exports.Edit3Icon = PenLine;
      exports.EditIcon = SquarePen;
      exports.Egg = Egg;
      exports.EggFried = EggFried;
      exports.EggFriedIcon = EggFried;
      exports.EggIcon = Egg;
      exports.EggOff = EggOff;
      exports.EggOffIcon = EggOff;
      exports.Equal = Equal;
      exports.EqualIcon = Equal;
      exports.EqualNot = EqualNot;
      exports.EqualNotIcon = EqualNot;
      exports.EqualSquare = EqualSquare;
      exports.EqualSquareIcon = EqualSquare;
      exports.Eraser = Eraser;
      exports.EraserIcon = Eraser;
      exports.Euro = Euro;
      exports.EuroIcon = Euro;
      exports.Expand = Expand;
      exports.ExpandIcon = Expand;
      exports.ExternalLink = ExternalLink;
      exports.ExternalLinkIcon = ExternalLink;
      exports.Eye = Eye;
      exports.EyeIcon = Eye;
      exports.EyeOff = EyeOff;
      exports.EyeOffIcon = EyeOff;
      exports.Facebook = Facebook;
      exports.FacebookIcon = Facebook;
      exports.Factory = Factory;
      exports.FactoryIcon = Factory;
      exports.Fan = Fan;
      exports.FanIcon = Fan;
      exports.FastForward = FastForward;
      exports.FastForwardIcon = FastForward;
      exports.Feather = Feather;
      exports.FeatherIcon = Feather;
      exports.Fence = Fence;
      exports.FenceIcon = Fence;
      exports.FerrisWheel = FerrisWheel;
      exports.FerrisWheelIcon = FerrisWheel;
      exports.Figma = Figma;
      exports.FigmaIcon = Figma;
      exports.File = File;
      exports.FileArchive = FileArchive;
      exports.FileArchiveIcon = FileArchive;
      exports.FileAudio = FileAudio;
      exports.FileAudio2 = FileAudio2;
      exports.FileAudio2Icon = FileAudio2;
      exports.FileAudioIcon = FileAudio;
      exports.FileAxis3D = FileAxis3d;
      exports.FileAxis3DIcon = FileAxis3d;
      exports.FileAxis3d = FileAxis3d;
      exports.FileAxis3dIcon = FileAxis3d;
      exports.FileBadge = FileBadge;
      exports.FileBadge2 = FileBadge2;
      exports.FileBadge2Icon = FileBadge2;
      exports.FileBadgeIcon = FileBadge;
      exports.FileBarChart = FileBarChart;
      exports.FileBarChart2 = FileBarChart2;
      exports.FileBarChart2Icon = FileBarChart2;
      exports.FileBarChartIcon = FileBarChart;
      exports.FileBox = FileBox;
      exports.FileBoxIcon = FileBox;
      exports.FileCheck = FileCheck;
      exports.FileCheck2 = FileCheck2;
      exports.FileCheck2Icon = FileCheck2;
      exports.FileCheckIcon = FileCheck;
      exports.FileClock = FileClock;
      exports.FileClockIcon = FileClock;
      exports.FileCode = FileCode;
      exports.FileCode2 = FileCode2;
      exports.FileCode2Icon = FileCode2;
      exports.FileCodeIcon = FileCode;
      exports.FileCog = FileCog;
      exports.FileCog2 = FileCog;
      exports.FileCog2Icon = FileCog;
      exports.FileCogIcon = FileCog;
      exports.FileDiff = FileDiff;
      exports.FileDiffIcon = FileDiff;
      exports.FileDigit = FileDigit;
      exports.FileDigitIcon = FileDigit;
      exports.FileDown = FileDown;
      exports.FileDownIcon = FileDown;
      exports.FileEdit = FilePen;
      exports.FileEditIcon = FilePen;
      exports.FileHeart = FileHeart;
      exports.FileHeartIcon = FileHeart;
      exports.FileIcon = File;
      exports.FileImage = FileImage;
      exports.FileImageIcon = FileImage;
      exports.FileInput = FileInput;
      exports.FileInputIcon = FileInput;
      exports.FileJson = FileJson;
      exports.FileJson2 = FileJson2;
      exports.FileJson2Icon = FileJson2;
      exports.FileJsonIcon = FileJson;
      exports.FileKey = FileKey;
      exports.FileKey2 = FileKey2;
      exports.FileKey2Icon = FileKey2;
      exports.FileKeyIcon = FileKey;
      exports.FileLineChart = FileLineChart;
      exports.FileLineChartIcon = FileLineChart;
      exports.FileLock = FileLock;
      exports.FileLock2 = FileLock2;
      exports.FileLock2Icon = FileLock2;
      exports.FileLockIcon = FileLock;
      exports.FileMinus = FileMinus;
      exports.FileMinus2 = FileMinus2;
      exports.FileMinus2Icon = FileMinus2;
      exports.FileMinusIcon = FileMinus;
      exports.FileMusic = FileMusic;
      exports.FileMusicIcon = FileMusic;
      exports.FileOutput = FileOutput;
      exports.FileOutputIcon = FileOutput;
      exports.FilePen = FilePen;
      exports.FilePenIcon = FilePen;
      exports.FilePenLine = FilePenLine;
      exports.FilePenLineIcon = FilePenLine;
      exports.FilePieChart = FilePieChart;
      exports.FilePieChartIcon = FilePieChart;
      exports.FilePlus = FilePlus;
      exports.FilePlus2 = FilePlus2;
      exports.FilePlus2Icon = FilePlus2;
      exports.FilePlusIcon = FilePlus;
      exports.FileQuestion = FileQuestion;
      exports.FileQuestionIcon = FileQuestion;
      exports.FileScan = FileScan;
      exports.FileScanIcon = FileScan;
      exports.FileSearch = FileSearch;
      exports.FileSearch2 = FileSearch2;
      exports.FileSearch2Icon = FileSearch2;
      exports.FileSearchIcon = FileSearch;
      exports.FileSignature = FilePenLine;
      exports.FileSignatureIcon = FilePenLine;
      exports.FileSliders = FileSliders;
      exports.FileSlidersIcon = FileSliders;
      exports.FileSpreadsheet = FileSpreadsheet;
      exports.FileSpreadsheetIcon = FileSpreadsheet;
      exports.FileStack = FileStack;
      exports.FileStackIcon = FileStack;
      exports.FileSymlink = FileSymlink;
      exports.FileSymlinkIcon = FileSymlink;
      exports.FileTerminal = FileTerminal;
      exports.FileTerminalIcon = FileTerminal;
      exports.FileText = FileText;
      exports.FileTextIcon = FileText;
      exports.FileType = FileType;
      exports.FileType2 = FileType2;
      exports.FileType2Icon = FileType2;
      exports.FileTypeIcon = FileType;
      exports.FileUp = FileUp;
      exports.FileUpIcon = FileUp;
      exports.FileVideo = FileVideo;
      exports.FileVideo2 = FileVideo2;
      exports.FileVideo2Icon = FileVideo2;
      exports.FileVideoIcon = FileVideo;
      exports.FileVolume = FileVolume;
      exports.FileVolume2 = FileVolume2;
      exports.FileVolume2Icon = FileVolume2;
      exports.FileVolumeIcon = FileVolume;
      exports.FileWarning = FileWarning;
      exports.FileWarningIcon = FileWarning;
      exports.FileX = FileX;
      exports.FileX2 = FileX2;
      exports.FileX2Icon = FileX2;
      exports.FileXIcon = FileX;
      exports.Files = Files;
      exports.FilesIcon = Files;
      exports.Film = Film;
      exports.FilmIcon = Film;
      exports.Filter = Filter;
      exports.FilterIcon = Filter;
      exports.FilterX = FilterX;
      exports.FilterXIcon = FilterX;
      exports.Fingerprint = Fingerprint;
      exports.FingerprintIcon = Fingerprint;
      exports.FireExtinguisher = FireExtinguisher;
      exports.FireExtinguisherIcon = FireExtinguisher;
      exports.Fish = Fish;
      exports.FishIcon = Fish;
      exports.FishOff = FishOff;
      exports.FishOffIcon = FishOff;
      exports.FishSymbol = FishSymbol;
      exports.FishSymbolIcon = FishSymbol;
      exports.Flag = Flag;
      exports.FlagIcon = Flag;
      exports.FlagOff = FlagOff;
      exports.FlagOffIcon = FlagOff;
      exports.FlagTriangleLeft = FlagTriangleLeft;
      exports.FlagTriangleLeftIcon = FlagTriangleLeft;
      exports.FlagTriangleRight = FlagTriangleRight;
      exports.FlagTriangleRightIcon = FlagTriangleRight;
      exports.Flame = Flame;
      exports.FlameIcon = Flame;
      exports.FlameKindling = FlameKindling;
      exports.FlameKindlingIcon = FlameKindling;
      exports.Flashlight = Flashlight;
      exports.FlashlightIcon = Flashlight;
      exports.FlashlightOff = FlashlightOff;
      exports.FlashlightOffIcon = FlashlightOff;
      exports.FlaskConical = FlaskConical;
      exports.FlaskConicalIcon = FlaskConical;
      exports.FlaskConicalOff = FlaskConicalOff;
      exports.FlaskConicalOffIcon = FlaskConicalOff;
      exports.FlaskRound = FlaskRound;
      exports.FlaskRoundIcon = FlaskRound;
      exports.FlipHorizontal = FlipHorizontal;
      exports.FlipHorizontal2 = FlipHorizontal2;
      exports.FlipHorizontal2Icon = FlipHorizontal2;
      exports.FlipHorizontalIcon = FlipHorizontal;
      exports.FlipVertical = FlipVertical;
      exports.FlipVertical2 = FlipVertical2;
      exports.FlipVertical2Icon = FlipVertical2;
      exports.FlipVerticalIcon = FlipVertical;
      exports.Flower = Flower;
      exports.Flower2 = Flower2;
      exports.Flower2Icon = Flower2;
      exports.FlowerIcon = Flower;
      exports.Focus = Focus;
      exports.FocusIcon = Focus;
      exports.FoldHorizontal = FoldHorizontal;
      exports.FoldHorizontalIcon = FoldHorizontal;
      exports.FoldVertical = FoldVertical;
      exports.FoldVerticalIcon = FoldVertical;
      exports.Folder = Folder;
      exports.FolderArchive = FolderArchive;
      exports.FolderArchiveIcon = FolderArchive;
      exports.FolderCheck = FolderCheck;
      exports.FolderCheckIcon = FolderCheck;
      exports.FolderClock = FolderClock;
      exports.FolderClockIcon = FolderClock;
      exports.FolderClosed = FolderClosed;
      exports.FolderClosedIcon = FolderClosed;
      exports.FolderCog = FolderCog;
      exports.FolderCog2 = FolderCog;
      exports.FolderCog2Icon = FolderCog;
      exports.FolderCogIcon = FolderCog;
      exports.FolderDot = FolderDot;
      exports.FolderDotIcon = FolderDot;
      exports.FolderDown = FolderDown;
      exports.FolderDownIcon = FolderDown;
      exports.FolderEdit = FolderPen;
      exports.FolderEditIcon = FolderPen;
      exports.FolderGit = FolderGit;
      exports.FolderGit2 = FolderGit2;
      exports.FolderGit2Icon = FolderGit2;
      exports.FolderGitIcon = FolderGit;
      exports.FolderHeart = FolderHeart;
      exports.FolderHeartIcon = FolderHeart;
      exports.FolderIcon = Folder;
      exports.FolderInput = FolderInput;
      exports.FolderInputIcon = FolderInput;
      exports.FolderKanban = FolderKanban;
      exports.FolderKanbanIcon = FolderKanban;
      exports.FolderKey = FolderKey;
      exports.FolderKeyIcon = FolderKey;
      exports.FolderLock = FolderLock;
      exports.FolderLockIcon = FolderLock;
      exports.FolderMinus = FolderMinus;
      exports.FolderMinusIcon = FolderMinus;
      exports.FolderOpen = FolderOpen;
      exports.FolderOpenDot = FolderOpenDot;
      exports.FolderOpenDotIcon = FolderOpenDot;
      exports.FolderOpenIcon = FolderOpen;
      exports.FolderOutput = FolderOutput;
      exports.FolderOutputIcon = FolderOutput;
      exports.FolderPen = FolderPen;
      exports.FolderPenIcon = FolderPen;
      exports.FolderPlus = FolderPlus;
      exports.FolderPlusIcon = FolderPlus;
      exports.FolderRoot = FolderRoot;
      exports.FolderRootIcon = FolderRoot;
      exports.FolderSearch = FolderSearch;
      exports.FolderSearch2 = FolderSearch2;
      exports.FolderSearch2Icon = FolderSearch2;
      exports.FolderSearchIcon = FolderSearch;
      exports.FolderSymlink = FolderSymlink;
      exports.FolderSymlinkIcon = FolderSymlink;
      exports.FolderSync = FolderSync;
      exports.FolderSyncIcon = FolderSync;
      exports.FolderTree = FolderTree;
      exports.FolderTreeIcon = FolderTree;
      exports.FolderUp = FolderUp;
      exports.FolderUpIcon = FolderUp;
      exports.FolderX = FolderX;
      exports.FolderXIcon = FolderX;
      exports.Folders = Folders;
      exports.FoldersIcon = Folders;
      exports.Footprints = Footprints;
      exports.FootprintsIcon = Footprints;
      exports.Forklift = Forklift;
      exports.ForkliftIcon = Forklift;
      exports.FormInput = FormInput;
      exports.FormInputIcon = FormInput;
      exports.Forward = Forward;
      exports.ForwardIcon = Forward;
      exports.Frame = Frame;
      exports.FrameIcon = Frame;
      exports.Framer = Framer;
      exports.FramerIcon = Framer;
      exports.Frown = Frown;
      exports.FrownIcon = Frown;
      exports.Fuel = Fuel;
      exports.FuelIcon = Fuel;
      exports.Fullscreen = Fullscreen;
      exports.FullscreenIcon = Fullscreen;
      exports.FunctionSquare = FunctionSquare;
      exports.FunctionSquareIcon = FunctionSquare;
      exports.GalleryHorizontal = GalleryHorizontal;
      exports.GalleryHorizontalEnd = GalleryHorizontalEnd;
      exports.GalleryHorizontalEndIcon = GalleryHorizontalEnd;
      exports.GalleryHorizontalIcon = GalleryHorizontal;
      exports.GalleryThumbnails = GalleryThumbnails;
      exports.GalleryThumbnailsIcon = GalleryThumbnails;
      exports.GalleryVertical = GalleryVertical;
      exports.GalleryVerticalEnd = GalleryVerticalEnd;
      exports.GalleryVerticalEndIcon = GalleryVerticalEnd;
      exports.GalleryVerticalIcon = GalleryVertical;
      exports.Gamepad = Gamepad;
      exports.Gamepad2 = Gamepad2;
      exports.Gamepad2Icon = Gamepad2;
      exports.GamepadIcon = Gamepad;
      exports.GanttChart = GanttChart;
      exports.GanttChartIcon = GanttChart;
      exports.GanttChartSquare = GanttChartSquare;
      exports.GanttChartSquareIcon = GanttChartSquare;
      exports.GanttSquare = GanttChartSquare;
      exports.GanttSquareIcon = GanttChartSquare;
      exports.Gauge = Gauge;
      exports.GaugeCircle = GaugeCircle;
      exports.GaugeCircleIcon = GaugeCircle;
      exports.GaugeIcon = Gauge;
      exports.Gavel = Gavel;
      exports.GavelIcon = Gavel;
      exports.Gem = Gem;
      exports.GemIcon = Gem;
      exports.Ghost = Ghost;
      exports.GhostIcon = Ghost;
      exports.Gift = Gift;
      exports.GiftIcon = Gift;
      exports.GitBranch = GitBranch;
      exports.GitBranchIcon = GitBranch;
      exports.GitBranchPlus = GitBranchPlus;
      exports.GitBranchPlusIcon = GitBranchPlus;
      exports.GitCommit = GitCommitHorizontal;
      exports.GitCommitHorizontal = GitCommitHorizontal;
      exports.GitCommitHorizontalIcon = GitCommitHorizontal;
      exports.GitCommitIcon = GitCommitHorizontal;
      exports.GitCommitVertical = GitCommitVertical;
      exports.GitCommitVerticalIcon = GitCommitVertical;
      exports.GitCompare = GitCompare;
      exports.GitCompareArrows = GitCompareArrows;
      exports.GitCompareArrowsIcon = GitCompareArrows;
      exports.GitCompareIcon = GitCompare;
      exports.GitFork = GitFork;
      exports.GitForkIcon = GitFork;
      exports.GitGraph = GitGraph;
      exports.GitGraphIcon = GitGraph;
      exports.GitMerge = GitMerge;
      exports.GitMergeIcon = GitMerge;
      exports.GitPullRequest = GitPullRequest;
      exports.GitPullRequestArrow = GitPullRequestArrow;
      exports.GitPullRequestArrowIcon = GitPullRequestArrow;
      exports.GitPullRequestClosed = GitPullRequestClosed;
      exports.GitPullRequestClosedIcon = GitPullRequestClosed;
      exports.GitPullRequestCreate = GitPullRequestCreate;
      exports.GitPullRequestCreateArrow = GitPullRequestCreateArrow;
      exports.GitPullRequestCreateArrowIcon = GitPullRequestCreateArrow;
      exports.GitPullRequestCreateIcon = GitPullRequestCreate;
      exports.GitPullRequestDraft = GitPullRequestDraft;
      exports.GitPullRequestDraftIcon = GitPullRequestDraft;
      exports.GitPullRequestIcon = GitPullRequest;
      exports.Github = Github;
      exports.GithubIcon = Github;
      exports.Gitlab = Gitlab;
      exports.GitlabIcon = Gitlab;
      exports.GlassWater = GlassWater;
      exports.GlassWaterIcon = GlassWater;
      exports.Glasses = Glasses;
      exports.GlassesIcon = Glasses;
      exports.Globe = Globe;
      exports.Globe2 = Globe2;
      exports.Globe2Icon = Globe2;
      exports.GlobeIcon = Globe;
      exports.Goal = Goal;
      exports.GoalIcon = Goal;
      exports.Grab = Grab;
      exports.GrabIcon = Grab;
      exports.GraduationCap = GraduationCap;
      exports.GraduationCapIcon = GraduationCap;
      exports.Grape = Grape;
      exports.GrapeIcon = Grape;
      exports.Grid = Grid3x3;
      exports.Grid2X2 = Grid2x2;
      exports.Grid2X2Icon = Grid2x2;
      exports.Grid2x2 = Grid2x2;
      exports.Grid2x2Icon = Grid2x2;
      exports.Grid3X3 = Grid3x3;
      exports.Grid3X3Icon = Grid3x3;
      exports.Grid3x3 = Grid3x3;
      exports.Grid3x3Icon = Grid3x3;
      exports.GridIcon = Grid3x3;
      exports.Grip = Grip;
      exports.GripHorizontal = GripHorizontal;
      exports.GripHorizontalIcon = GripHorizontal;
      exports.GripIcon = Grip;
      exports.GripVertical = GripVertical;
      exports.GripVerticalIcon = GripVertical;
      exports.Group = Group;
      exports.GroupIcon = Group;
      exports.Guitar = Guitar;
      exports.GuitarIcon = Guitar;
      exports.Hammer = Hammer;
      exports.HammerIcon = Hammer;
      exports.Hand = Hand;
      exports.HandCoins = HandCoins;
      exports.HandCoinsIcon = HandCoins;
      exports.HandHeart = HandHeart;
      exports.HandHeartIcon = HandHeart;
      exports.HandHelping = HandHelping;
      exports.HandHelpingIcon = HandHelping;
      exports.HandIcon = Hand;
      exports.HandMetal = HandMetal;
      exports.HandMetalIcon = HandMetal;
      exports.HandPlatter = HandPlatter;
      exports.HandPlatterIcon = HandPlatter;
      exports.HardDrive = HardDrive;
      exports.HardDriveDownload = HardDriveDownload;
      exports.HardDriveDownloadIcon = HardDriveDownload;
      exports.HardDriveIcon = HardDrive;
      exports.HardDriveUpload = HardDriveUpload;
      exports.HardDriveUploadIcon = HardDriveUpload;
      exports.HardHat = HardHat;
      exports.HardHatIcon = HardHat;
      exports.Hash = Hash;
      exports.HashIcon = Hash;
      exports.Haze = Haze;
      exports.HazeIcon = Haze;
      exports.HdmiPort = HdmiPort;
      exports.HdmiPortIcon = HdmiPort;
      exports.Heading = Heading;
      exports.Heading1 = Heading1;
      exports.Heading1Icon = Heading1;
      exports.Heading2 = Heading2;
      exports.Heading2Icon = Heading2;
      exports.Heading3 = Heading3;
      exports.Heading3Icon = Heading3;
      exports.Heading4 = Heading4;
      exports.Heading4Icon = Heading4;
      exports.Heading5 = Heading5;
      exports.Heading5Icon = Heading5;
      exports.Heading6 = Heading6;
      exports.Heading6Icon = Heading6;
      exports.HeadingIcon = Heading;
      exports.Headphones = Headphones;
      exports.HeadphonesIcon = Headphones;
      exports.Heart = Heart;
      exports.HeartCrack = HeartCrack;
      exports.HeartCrackIcon = HeartCrack;
      exports.HeartHandshake = HeartHandshake;
      exports.HeartHandshakeIcon = HeartHandshake;
      exports.HeartIcon = Heart;
      exports.HeartOff = HeartOff;
      exports.HeartOffIcon = HeartOff;
      exports.HeartPulse = HeartPulse;
      exports.HeartPulseIcon = HeartPulse;
      exports.Heater = Heater;
      exports.HeaterIcon = Heater;
      exports.HelpCircle = HelpCircle;
      exports.HelpCircleIcon = HelpCircle;
      exports.HelpingHand = HandHelping;
      exports.HelpingHandIcon = HandHelping;
      exports.Hexagon = Hexagon;
      exports.HexagonIcon = Hexagon;
      exports.Highlighter = Highlighter;
      exports.HighlighterIcon = Highlighter;
      exports.History = History;
      exports.HistoryIcon = History;
      exports.Home = Home;
      exports.HomeIcon = Home;
      exports.Hop = Hop;
      exports.HopIcon = Hop;
      exports.HopOff = HopOff;
      exports.HopOffIcon = HopOff;
      exports.Hotel = Hotel;
      exports.HotelIcon = Hotel;
      exports.Hourglass = Hourglass;
      exports.HourglassIcon = Hourglass;
      exports.IceCream = IceCream;
      exports.IceCream2 = IceCream2;
      exports.IceCream2Icon = IceCream2;
      exports.IceCreamIcon = IceCream;
      exports.Image = Image;
      exports.ImageDown = ImageDown;
      exports.ImageDownIcon = ImageDown;
      exports.ImageIcon = Image;
      exports.ImageMinus = ImageMinus;
      exports.ImageMinusIcon = ImageMinus;
      exports.ImageOff = ImageOff;
      exports.ImageOffIcon = ImageOff;
      exports.ImagePlus = ImagePlus;
      exports.ImagePlusIcon = ImagePlus;
      exports.Import = Import;
      exports.ImportIcon = Import;
      exports.Inbox = Inbox;
      exports.InboxIcon = Inbox;
      exports.Indent = Indent;
      exports.IndentIcon = Indent;
      exports.IndianRupee = IndianRupee;
      exports.IndianRupeeIcon = IndianRupee;
      exports.Infinity = Infinity2;
      exports.InfinityIcon = Infinity2;
      exports.Info = Info;
      exports.InfoIcon = Info;
      exports.Inspect = MousePointerSquare;
      exports.InspectIcon = MousePointerSquare;
      exports.InspectionPanel = InspectionPanel;
      exports.InspectionPanelIcon = InspectionPanel;
      exports.Instagram = Instagram;
      exports.InstagramIcon = Instagram;
      exports.Italic = Italic;
      exports.ItalicIcon = Italic;
      exports.IterationCcw = IterationCcw;
      exports.IterationCcwIcon = IterationCcw;
      exports.IterationCw = IterationCw;
      exports.IterationCwIcon = IterationCw;
      exports.JapaneseYen = JapaneseYen;
      exports.JapaneseYenIcon = JapaneseYen;
      exports.Joystick = Joystick;
      exports.JoystickIcon = Joystick;
      exports.Kanban = Kanban;
      exports.KanbanIcon = Kanban;
      exports.KanbanSquare = KanbanSquare;
      exports.KanbanSquareDashed = KanbanSquareDashed;
      exports.KanbanSquareDashedIcon = KanbanSquareDashed;
      exports.KanbanSquareIcon = KanbanSquare;
      exports.Key = Key;
      exports.KeyIcon = Key;
      exports.KeyRound = KeyRound;
      exports.KeyRoundIcon = KeyRound;
      exports.KeySquare = KeySquare;
      exports.KeySquareIcon = KeySquare;
      exports.Keyboard = Keyboard;
      exports.KeyboardIcon = Keyboard;
      exports.KeyboardMusic = KeyboardMusic;
      exports.KeyboardMusicIcon = KeyboardMusic;
      exports.Lamp = Lamp;
      exports.LampCeiling = LampCeiling;
      exports.LampCeilingIcon = LampCeiling;
      exports.LampDesk = LampDesk;
      exports.LampDeskIcon = LampDesk;
      exports.LampFloor = LampFloor;
      exports.LampFloorIcon = LampFloor;
      exports.LampIcon = Lamp;
      exports.LampWallDown = LampWallDown;
      exports.LampWallDownIcon = LampWallDown;
      exports.LampWallUp = LampWallUp;
      exports.LampWallUpIcon = LampWallUp;
      exports.LandPlot = LandPlot;
      exports.LandPlotIcon = LandPlot;
      exports.Landmark = Landmark;
      exports.LandmarkIcon = Landmark;
      exports.Languages = Languages;
      exports.LanguagesIcon = Languages;
      exports.Laptop = Laptop;
      exports.Laptop2 = Laptop2;
      exports.Laptop2Icon = Laptop2;
      exports.LaptopIcon = Laptop;
      exports.Lasso = Lasso;
      exports.LassoIcon = Lasso;
      exports.LassoSelect = LassoSelect;
      exports.LassoSelectIcon = LassoSelect;
      exports.Laugh = Laugh;
      exports.LaughIcon = Laugh;
      exports.Layers = Layers;
      exports.Layers2 = Layers2;
      exports.Layers2Icon = Layers2;
      exports.Layers3 = Layers3;
      exports.Layers3Icon = Layers3;
      exports.LayersIcon = Layers;
      exports.Layout = PanelsTopLeft;
      exports.LayoutDashboard = LayoutDashboard;
      exports.LayoutDashboardIcon = LayoutDashboard;
      exports.LayoutGrid = LayoutGrid;
      exports.LayoutGridIcon = LayoutGrid;
      exports.LayoutIcon = PanelsTopLeft;
      exports.LayoutList = LayoutList;
      exports.LayoutListIcon = LayoutList;
      exports.LayoutPanelLeft = LayoutPanelLeft;
      exports.LayoutPanelLeftIcon = LayoutPanelLeft;
      exports.LayoutPanelTop = LayoutPanelTop;
      exports.LayoutPanelTopIcon = LayoutPanelTop;
      exports.LayoutTemplate = LayoutTemplate;
      exports.LayoutTemplateIcon = LayoutTemplate;
      exports.Leaf = Leaf;
      exports.LeafIcon = Leaf;
      exports.LeafyGreen = LeafyGreen;
      exports.LeafyGreenIcon = LeafyGreen;
      exports.Library = Library;
      exports.LibraryBig = LibraryBig;
      exports.LibraryBigIcon = LibraryBig;
      exports.LibraryIcon = Library;
      exports.LibrarySquare = LibrarySquare;
      exports.LibrarySquareIcon = LibrarySquare;
      exports.LifeBuoy = LifeBuoy;
      exports.LifeBuoyIcon = LifeBuoy;
      exports.Ligature = Ligature;
      exports.LigatureIcon = Ligature;
      exports.Lightbulb = Lightbulb;
      exports.LightbulbIcon = Lightbulb;
      exports.LightbulbOff = LightbulbOff;
      exports.LightbulbOffIcon = LightbulbOff;
      exports.LineChart = LineChart;
      exports.LineChartIcon = LineChart;
      exports.Link = Link;
      exports.Link2 = Link2;
      exports.Link2Icon = Link2;
      exports.Link2Off = Link2Off;
      exports.Link2OffIcon = Link2Off;
      exports.LinkIcon = Link;
      exports.Linkedin = Linkedin;
      exports.LinkedinIcon = Linkedin;
      exports.List = List;
      exports.ListChecks = ListChecks;
      exports.ListChecksIcon = ListChecks;
      exports.ListCollapse = ListCollapse;
      exports.ListCollapseIcon = ListCollapse;
      exports.ListEnd = ListEnd;
      exports.ListEndIcon = ListEnd;
      exports.ListFilter = ListFilter;
      exports.ListFilterIcon = ListFilter;
      exports.ListIcon = List;
      exports.ListMinus = ListMinus;
      exports.ListMinusIcon = ListMinus;
      exports.ListMusic = ListMusic;
      exports.ListMusicIcon = ListMusic;
      exports.ListOrdered = ListOrdered;
      exports.ListOrderedIcon = ListOrdered;
      exports.ListPlus = ListPlus;
      exports.ListPlusIcon = ListPlus;
      exports.ListRestart = ListRestart;
      exports.ListRestartIcon = ListRestart;
      exports.ListStart = ListStart;
      exports.ListStartIcon = ListStart;
      exports.ListTodo = ListTodo;
      exports.ListTodoIcon = ListTodo;
      exports.ListTree = ListTree;
      exports.ListTreeIcon = ListTree;
      exports.ListVideo = ListVideo;
      exports.ListVideoIcon = ListVideo;
      exports.ListX = ListX;
      exports.ListXIcon = ListX;
      exports.Loader = Loader;
      exports.Loader2 = Loader2;
      exports.Loader2Icon = Loader2;
      exports.LoaderIcon = Loader;
      exports.Locate = Locate;
      exports.LocateFixed = LocateFixed;
      exports.LocateFixedIcon = LocateFixed;
      exports.LocateIcon = Locate;
      exports.LocateOff = LocateOff;
      exports.LocateOffIcon = LocateOff;
      exports.Lock = Lock;
      exports.LockIcon = Lock;
      exports.LockKeyhole = LockKeyhole;
      exports.LockKeyholeIcon = LockKeyhole;
      exports.LogIn = LogIn;
      exports.LogInIcon = LogIn;
      exports.LogOut = LogOut;
      exports.LogOutIcon = LogOut;
      exports.Lollipop = Lollipop;
      exports.LollipopIcon = Lollipop;
      exports.LucideAArrowDown = AArrowDown;
      exports.LucideAArrowUp = AArrowUp;
      exports.LucideALargeSmall = ALargeSmall;
      exports.LucideAccessibility = Accessibility;
      exports.LucideActivity = Activity;
      exports.LucideActivitySquare = ActivitySquare;
      exports.LucideAirVent = AirVent;
      exports.LucideAirplay = Airplay;
      exports.LucideAlarmCheck = AlarmClockCheck;
      exports.LucideAlarmClock = AlarmClock;
      exports.LucideAlarmClockCheck = AlarmClockCheck;
      exports.LucideAlarmClockMinus = AlarmClockMinus;
      exports.LucideAlarmClockOff = AlarmClockOff;
      exports.LucideAlarmClockPlus = AlarmClockPlus;
      exports.LucideAlarmMinus = AlarmClockMinus;
      exports.LucideAlarmPlus = AlarmClockPlus;
      exports.LucideAlarmSmoke = AlarmSmoke;
      exports.LucideAlbum = Album;
      exports.LucideAlertCircle = AlertCircle;
      exports.LucideAlertOctagon = AlertOctagon;
      exports.LucideAlertTriangle = AlertTriangle;
      exports.LucideAlignCenter = AlignCenter;
      exports.LucideAlignCenterHorizontal = AlignCenterHorizontal;
      exports.LucideAlignCenterVertical = AlignCenterVertical;
      exports.LucideAlignEndHorizontal = AlignEndHorizontal;
      exports.LucideAlignEndVertical = AlignEndVertical;
      exports.LucideAlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
      exports.LucideAlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
      exports.LucideAlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
      exports.LucideAlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
      exports.LucideAlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
      exports.LucideAlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
      exports.LucideAlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
      exports.LucideAlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
      exports.LucideAlignJustify = AlignJustify;
      exports.LucideAlignLeft = AlignLeft;
      exports.LucideAlignRight = AlignRight;
      exports.LucideAlignStartHorizontal = AlignStartHorizontal;
      exports.LucideAlignStartVertical = AlignStartVertical;
      exports.LucideAlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
      exports.LucideAlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
      exports.LucideAlignVerticalDistributeStart = AlignVerticalDistributeStart;
      exports.LucideAlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
      exports.LucideAlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
      exports.LucideAlignVerticalJustifyStart = AlignVerticalJustifyStart;
      exports.LucideAlignVerticalSpaceAround = AlignVerticalSpaceAround;
      exports.LucideAlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
      exports.LucideAmpersand = Ampersand;
      exports.LucideAmpersands = Ampersands;
      exports.LucideAnchor = Anchor;
      exports.LucideAngry = Angry;
      exports.LucideAnnoyed = Annoyed;
      exports.LucideAntenna = Antenna;
      exports.LucideAnvil = Anvil;
      exports.LucideAperture = Aperture;
      exports.LucideAppWindow = AppWindow;
      exports.LucideApple = Apple;
      exports.LucideArchive = Archive;
      exports.LucideArchiveRestore = ArchiveRestore;
      exports.LucideArchiveX = ArchiveX;
      exports.LucideAreaChart = AreaChart;
      exports.LucideArmchair = Armchair;
      exports.LucideArrowBigDown = ArrowBigDown;
      exports.LucideArrowBigDownDash = ArrowBigDownDash;
      exports.LucideArrowBigLeft = ArrowBigLeft;
      exports.LucideArrowBigLeftDash = ArrowBigLeftDash;
      exports.LucideArrowBigRight = ArrowBigRight;
      exports.LucideArrowBigRightDash = ArrowBigRightDash;
      exports.LucideArrowBigUp = ArrowBigUp;
      exports.LucideArrowBigUpDash = ArrowBigUpDash;
      exports.LucideArrowDown = ArrowDown;
      exports.LucideArrowDown01 = ArrowDown01;
      exports.LucideArrowDown10 = ArrowDown10;
      exports.LucideArrowDownAZ = ArrowDownAZ;
      exports.LucideArrowDownAz = ArrowDownAZ;
      exports.LucideArrowDownCircle = ArrowDownCircle;
      exports.LucideArrowDownFromLine = ArrowDownFromLine;
      exports.LucideArrowDownLeft = ArrowDownLeft;
      exports.LucideArrowDownLeftFromCircle = ArrowDownLeftFromCircle;
      exports.LucideArrowDownLeftFromSquare = ArrowDownLeftFromSquare;
      exports.LucideArrowDownLeftSquare = ArrowDownLeftSquare;
      exports.LucideArrowDownNarrowWide = ArrowDownNarrowWide;
      exports.LucideArrowDownRight = ArrowDownRight;
      exports.LucideArrowDownRightFromCircle = ArrowDownRightFromCircle;
      exports.LucideArrowDownRightFromSquare = ArrowDownRightFromSquare;
      exports.LucideArrowDownRightSquare = ArrowDownRightSquare;
      exports.LucideArrowDownSquare = ArrowDownSquare;
      exports.LucideArrowDownToDot = ArrowDownToDot;
      exports.LucideArrowDownToLine = ArrowDownToLine;
      exports.LucideArrowDownUp = ArrowDownUp;
      exports.LucideArrowDownWideNarrow = ArrowDownWideNarrow;
      exports.LucideArrowDownZA = ArrowDownZA;
      exports.LucideArrowDownZa = ArrowDownZA;
      exports.LucideArrowLeft = ArrowLeft;
      exports.LucideArrowLeftCircle = ArrowLeftCircle;
      exports.LucideArrowLeftFromLine = ArrowLeftFromLine;
      exports.LucideArrowLeftRight = ArrowLeftRight;
      exports.LucideArrowLeftSquare = ArrowLeftSquare;
      exports.LucideArrowLeftToLine = ArrowLeftToLine;
      exports.LucideArrowRight = ArrowRight;
      exports.LucideArrowRightCircle = ArrowRightCircle;
      exports.LucideArrowRightFromLine = ArrowRightFromLine;
      exports.LucideArrowRightLeft = ArrowRightLeft;
      exports.LucideArrowRightSquare = ArrowRightSquare;
      exports.LucideArrowRightToLine = ArrowRightToLine;
      exports.LucideArrowUp = ArrowUp;
      exports.LucideArrowUp01 = ArrowUp01;
      exports.LucideArrowUp10 = ArrowUp10;
      exports.LucideArrowUpAZ = ArrowUpAZ;
      exports.LucideArrowUpAz = ArrowUpAZ;
      exports.LucideArrowUpCircle = ArrowUpCircle;
      exports.LucideArrowUpDown = ArrowUpDown;
      exports.LucideArrowUpFromDot = ArrowUpFromDot;
      exports.LucideArrowUpFromLine = ArrowUpFromLine;
      exports.LucideArrowUpLeft = ArrowUpLeft;
      exports.LucideArrowUpLeftFromCircle = ArrowUpLeftFromCircle;
      exports.LucideArrowUpLeftFromSquare = ArrowUpLeftFromSquare;
      exports.LucideArrowUpLeftSquare = ArrowUpLeftSquare;
      exports.LucideArrowUpNarrowWide = ArrowUpNarrowWide;
      exports.LucideArrowUpRight = ArrowUpRight;
      exports.LucideArrowUpRightFromCircle = ArrowUpRightFromCircle;
      exports.LucideArrowUpRightFromSquare = ArrowUpRightFromSquare;
      exports.LucideArrowUpRightSquare = ArrowUpRightSquare;
      exports.LucideArrowUpSquare = ArrowUpSquare;
      exports.LucideArrowUpToLine = ArrowUpToLine;
      exports.LucideArrowUpWideNarrow = ArrowUpWideNarrow;
      exports.LucideArrowUpZA = ArrowUpZA;
      exports.LucideArrowUpZa = ArrowUpZA;
      exports.LucideArrowsUpFromLine = ArrowsUpFromLine;
      exports.LucideAsterisk = Asterisk;
      exports.LucideAsteriskSquare = AsteriskSquare;
      exports.LucideAtSign = AtSign;
      exports.LucideAtom = Atom;
      exports.LucideAudioLines = AudioLines;
      exports.LucideAudioWaveform = AudioWaveform;
      exports.LucideAward = Award;
      exports.LucideAxe = Axe;
      exports.LucideAxis3D = Axis3d;
      exports.LucideAxis3d = Axis3d;
      exports.LucideBaby = Baby;
      exports.LucideBackpack = Backpack;
      exports.LucideBadge = Badge;
      exports.LucideBadgeAlert = BadgeAlert;
      exports.LucideBadgeCent = BadgeCent;
      exports.LucideBadgeCheck = BadgeCheck;
      exports.LucideBadgeDollarSign = BadgeDollarSign;
      exports.LucideBadgeEuro = BadgeEuro;
      exports.LucideBadgeHelp = BadgeHelp;
      exports.LucideBadgeIndianRupee = BadgeIndianRupee;
      exports.LucideBadgeInfo = BadgeInfo;
      exports.LucideBadgeJapaneseYen = BadgeJapaneseYen;
      exports.LucideBadgeMinus = BadgeMinus;
      exports.LucideBadgePercent = BadgePercent;
      exports.LucideBadgePlus = BadgePlus;
      exports.LucideBadgePoundSterling = BadgePoundSterling;
      exports.LucideBadgeRussianRuble = BadgeRussianRuble;
      exports.LucideBadgeSwissFranc = BadgeSwissFranc;
      exports.LucideBadgeX = BadgeX;
      exports.LucideBaggageClaim = BaggageClaim;
      exports.LucideBan = Ban;
      exports.LucideBanana = Banana;
      exports.LucideBanknote = Banknote;
      exports.LucideBarChart = BarChart;
      exports.LucideBarChart2 = BarChart2;
      exports.LucideBarChart3 = BarChart3;
      exports.LucideBarChart4 = BarChart4;
      exports.LucideBarChartBig = BarChartBig;
      exports.LucideBarChartHorizontal = BarChartHorizontal;
      exports.LucideBarChartHorizontalBig = BarChartHorizontalBig;
      exports.LucideBarcode = Barcode;
      exports.LucideBaseline = Baseline;
      exports.LucideBath = Bath;
      exports.LucideBattery = Battery;
      exports.LucideBatteryCharging = BatteryCharging;
      exports.LucideBatteryFull = BatteryFull;
      exports.LucideBatteryLow = BatteryLow;
      exports.LucideBatteryMedium = BatteryMedium;
      exports.LucideBatteryWarning = BatteryWarning;
      exports.LucideBeaker = Beaker;
      exports.LucideBean = Bean;
      exports.LucideBeanOff = BeanOff;
      exports.LucideBed = Bed;
      exports.LucideBedDouble = BedDouble;
      exports.LucideBedSingle = BedSingle;
      exports.LucideBeef = Beef;
      exports.LucideBeer = Beer;
      exports.LucideBell = Bell;
      exports.LucideBellDot = BellDot;
      exports.LucideBellElectric = BellElectric;
      exports.LucideBellMinus = BellMinus;
      exports.LucideBellOff = BellOff;
      exports.LucideBellPlus = BellPlus;
      exports.LucideBellRing = BellRing;
      exports.LucideBetweenHorizonalEnd = BetweenHorizontalEnd;
      exports.LucideBetweenHorizonalStart = BetweenHorizontalStart;
      exports.LucideBetweenHorizontalEnd = BetweenHorizontalEnd;
      exports.LucideBetweenHorizontalStart = BetweenHorizontalStart;
      exports.LucideBetweenVerticalEnd = BetweenVerticalEnd;
      exports.LucideBetweenVerticalStart = BetweenVerticalStart;
      exports.LucideBike = Bike;
      exports.LucideBinary = Binary;
      exports.LucideBiohazard = Biohazard;
      exports.LucideBird = Bird;
      exports.LucideBitcoin = Bitcoin;
      exports.LucideBlend = Blend;
      exports.LucideBlinds = Blinds;
      exports.LucideBlocks = Blocks;
      exports.LucideBluetooth = Bluetooth;
      exports.LucideBluetoothConnected = BluetoothConnected;
      exports.LucideBluetoothOff = BluetoothOff;
      exports.LucideBluetoothSearching = BluetoothSearching;
      exports.LucideBold = Bold;
      exports.LucideBolt = Bolt;
      exports.LucideBomb = Bomb;
      exports.LucideBone = Bone;
      exports.LucideBook = Book;
      exports.LucideBookA = BookA;
      exports.LucideBookAudio = BookAudio;
      exports.LucideBookCheck = BookCheck;
      exports.LucideBookCopy = BookCopy;
      exports.LucideBookDashed = BookDashed;
      exports.LucideBookDown = BookDown;
      exports.LucideBookHeadphones = BookHeadphones;
      exports.LucideBookHeart = BookHeart;
      exports.LucideBookImage = BookImage;
      exports.LucideBookKey = BookKey;
      exports.LucideBookLock = BookLock;
      exports.LucideBookMarked = BookMarked;
      exports.LucideBookMinus = BookMinus;
      exports.LucideBookOpen = BookOpen;
      exports.LucideBookOpenCheck = BookOpenCheck;
      exports.LucideBookOpenText = BookOpenText;
      exports.LucideBookPlus = BookPlus;
      exports.LucideBookTemplate = BookDashed;
      exports.LucideBookText = BookText;
      exports.LucideBookType = BookType;
      exports.LucideBookUp = BookUp;
      exports.LucideBookUp2 = BookUp2;
      exports.LucideBookUser = BookUser;
      exports.LucideBookX = BookX;
      exports.LucideBookmark = Bookmark;
      exports.LucideBookmarkCheck = BookmarkCheck;
      exports.LucideBookmarkMinus = BookmarkMinus;
      exports.LucideBookmarkPlus = BookmarkPlus;
      exports.LucideBookmarkX = BookmarkX;
      exports.LucideBoomBox = BoomBox;
      exports.LucideBot = Bot;
      exports.LucideBox = Box;
      exports.LucideBoxSelect = BoxSelect;
      exports.LucideBoxes = Boxes;
      exports.LucideBraces = Braces;
      exports.LucideBrackets = Brackets;
      exports.LucideBrain = Brain;
      exports.LucideBrainCircuit = BrainCircuit;
      exports.LucideBrainCog = BrainCog;
      exports.LucideBrickWall = BrickWall;
      exports.LucideBriefcase = Briefcase;
      exports.LucideBringToFront = BringToFront;
      exports.LucideBrush = Brush;
      exports.LucideBug = Bug;
      exports.LucideBugOff = BugOff;
      exports.LucideBugPlay = BugPlay;
      exports.LucideBuilding = Building;
      exports.LucideBuilding2 = Building2;
      exports.LucideBus = Bus;
      exports.LucideBusFront = BusFront;
      exports.LucideCable = Cable;
      exports.LucideCableCar = CableCar;
      exports.LucideCake = Cake;
      exports.LucideCakeSlice = CakeSlice;
      exports.LucideCalculator = Calculator;
      exports.LucideCalendar = Calendar;
      exports.LucideCalendarCheck = CalendarCheck;
      exports.LucideCalendarCheck2 = CalendarCheck2;
      exports.LucideCalendarClock = CalendarClock;
      exports.LucideCalendarDays = CalendarDays;
      exports.LucideCalendarFold = CalendarFold;
      exports.LucideCalendarHeart = CalendarHeart;
      exports.LucideCalendarMinus = CalendarMinus;
      exports.LucideCalendarMinus2 = CalendarMinus2;
      exports.LucideCalendarOff = CalendarOff;
      exports.LucideCalendarPlus = CalendarPlus;
      exports.LucideCalendarPlus2 = CalendarPlus2;
      exports.LucideCalendarRange = CalendarRange;
      exports.LucideCalendarSearch = CalendarSearch;
      exports.LucideCalendarX = CalendarX;
      exports.LucideCalendarX2 = CalendarX2;
      exports.LucideCamera = Camera;
      exports.LucideCameraOff = CameraOff;
      exports.LucideCandlestickChart = CandlestickChart;
      exports.LucideCandy = Candy;
      exports.LucideCandyCane = CandyCane;
      exports.LucideCandyOff = CandyOff;
      exports.LucideCar = Car;
      exports.LucideCarFront = CarFront;
      exports.LucideCarTaxiFront = CarTaxiFront;
      exports.LucideCaravan = Caravan;
      exports.LucideCarrot = Carrot;
      exports.LucideCaseLower = CaseLower;
      exports.LucideCaseSensitive = CaseSensitive;
      exports.LucideCaseUpper = CaseUpper;
      exports.LucideCassetteTape = CassetteTape;
      exports.LucideCast = Cast;
      exports.LucideCastle = Castle;
      exports.LucideCat = Cat;
      exports.LucideCctv = Cctv;
      exports.LucideCheck = Check;
      exports.LucideCheckCheck = CheckCheck;
      exports.LucideCheckCircle = CheckCircle;
      exports.LucideCheckCircle2 = CheckCircle2;
      exports.LucideCheckSquare = CheckSquare;
      exports.LucideCheckSquare2 = CheckSquare2;
      exports.LucideChefHat = ChefHat;
      exports.LucideCherry = Cherry;
      exports.LucideChevronDown = ChevronDown;
      exports.LucideChevronDownCircle = ChevronDownCircle;
      exports.LucideChevronDownSquare = ChevronDownSquare;
      exports.LucideChevronFirst = ChevronFirst;
      exports.LucideChevronLast = ChevronLast;
      exports.LucideChevronLeft = ChevronLeft;
      exports.LucideChevronLeftCircle = ChevronLeftCircle;
      exports.LucideChevronLeftSquare = ChevronLeftSquare;
      exports.LucideChevronRight = ChevronRight;
      exports.LucideChevronRightCircle = ChevronRightCircle;
      exports.LucideChevronRightSquare = ChevronRightSquare;
      exports.LucideChevronUp = ChevronUp;
      exports.LucideChevronUpCircle = ChevronUpCircle;
      exports.LucideChevronUpSquare = ChevronUpSquare;
      exports.LucideChevronsDown = ChevronsDown;
      exports.LucideChevronsDownUp = ChevronsDownUp;
      exports.LucideChevronsLeft = ChevronsLeft;
      exports.LucideChevronsLeftRight = ChevronsLeftRight;
      exports.LucideChevronsRight = ChevronsRight;
      exports.LucideChevronsRightLeft = ChevronsRightLeft;
      exports.LucideChevronsUp = ChevronsUp;
      exports.LucideChevronsUpDown = ChevronsUpDown;
      exports.LucideChrome = Chrome;
      exports.LucideChurch = Church;
      exports.LucideCigarette = Cigarette;
      exports.LucideCigaretteOff = CigaretteOff;
      exports.LucideCircle = Circle;
      exports.LucideCircleDashed = CircleDashed;
      exports.LucideCircleDollarSign = CircleDollarSign;
      exports.LucideCircleDot = CircleDot;
      exports.LucideCircleDotDashed = CircleDotDashed;
      exports.LucideCircleEllipsis = CircleEllipsis;
      exports.LucideCircleEqual = CircleEqual;
      exports.LucideCircleOff = CircleOff;
      exports.LucideCircleSlash = CircleSlash;
      exports.LucideCircleSlash2 = CircleSlash2;
      exports.LucideCircleSlashed = CircleSlash2;
      exports.LucideCircleUser = CircleUser;
      exports.LucideCircleUserRound = CircleUserRound;
      exports.LucideCircuitBoard = CircuitBoard;
      exports.LucideCitrus = Citrus;
      exports.LucideClapperboard = Clapperboard;
      exports.LucideClipboard = Clipboard;
      exports.LucideClipboardCheck = ClipboardCheck;
      exports.LucideClipboardCopy = ClipboardCopy;
      exports.LucideClipboardEdit = ClipboardPen;
      exports.LucideClipboardList = ClipboardList;
      exports.LucideClipboardPaste = ClipboardPaste;
      exports.LucideClipboardPen = ClipboardPen;
      exports.LucideClipboardPenLine = ClipboardPenLine;
      exports.LucideClipboardSignature = ClipboardPenLine;
      exports.LucideClipboardType = ClipboardType;
      exports.LucideClipboardX = ClipboardX;
      exports.LucideClock = Clock;
      exports.LucideClock1 = Clock1;
      exports.LucideClock10 = Clock10;
      exports.LucideClock11 = Clock11;
      exports.LucideClock12 = Clock12;
      exports.LucideClock2 = Clock2;
      exports.LucideClock3 = Clock3;
      exports.LucideClock4 = Clock4;
      exports.LucideClock5 = Clock5;
      exports.LucideClock6 = Clock6;
      exports.LucideClock7 = Clock7;
      exports.LucideClock8 = Clock8;
      exports.LucideClock9 = Clock9;
      exports.LucideCloud = Cloud;
      exports.LucideCloudCog = CloudCog;
      exports.LucideCloudDrizzle = CloudDrizzle;
      exports.LucideCloudFog = CloudFog;
      exports.LucideCloudHail = CloudHail;
      exports.LucideCloudLightning = CloudLightning;
      exports.LucideCloudMoon = CloudMoon;
      exports.LucideCloudMoonRain = CloudMoonRain;
      exports.LucideCloudOff = CloudOff;
      exports.LucideCloudRain = CloudRain;
      exports.LucideCloudRainWind = CloudRainWind;
      exports.LucideCloudSnow = CloudSnow;
      exports.LucideCloudSun = CloudSun;
      exports.LucideCloudSunRain = CloudSunRain;
      exports.LucideCloudy = Cloudy;
      exports.LucideClover = Clover;
      exports.LucideClub = Club;
      exports.LucideCode = Code;
      exports.LucideCode2 = Code2;
      exports.LucideCodeSquare = CodeSquare;
      exports.LucideCodepen = Codepen;
      exports.LucideCodesandbox = Codesandbox;
      exports.LucideCoffee = Coffee;
      exports.LucideCog = Cog;
      exports.LucideCoins = Coins;
      exports.LucideColumns = Columns2;
      exports.LucideColumns2 = Columns2;
      exports.LucideColumns3 = Columns3;
      exports.LucideColumns4 = Columns4;
      exports.LucideCombine = Combine;
      exports.LucideCommand = Command;
      exports.LucideCompass = Compass;
      exports.LucideComponent = Component;
      exports.LucideComputer = Computer;
      exports.LucideConciergeBell = ConciergeBell;
      exports.LucideCone = Cone;
      exports.LucideConstruction = Construction;
      exports.LucideContact = Contact;
      exports.LucideContact2 = Contact2;
      exports.LucideContainer = Container;
      exports.LucideContrast = Contrast;
      exports.LucideCookie = Cookie;
      exports.LucideCookingPot = CookingPot;
      exports.LucideCopy = Copy;
      exports.LucideCopyCheck = CopyCheck;
      exports.LucideCopyMinus = CopyMinus;
      exports.LucideCopyPlus = CopyPlus;
      exports.LucideCopySlash = CopySlash;
      exports.LucideCopyX = CopyX;
      exports.LucideCopyleft = Copyleft;
      exports.LucideCopyright = Copyright;
      exports.LucideCornerDownLeft = CornerDownLeft;
      exports.LucideCornerDownRight = CornerDownRight;
      exports.LucideCornerLeftDown = CornerLeftDown;
      exports.LucideCornerLeftUp = CornerLeftUp;
      exports.LucideCornerRightDown = CornerRightDown;
      exports.LucideCornerRightUp = CornerRightUp;
      exports.LucideCornerUpLeft = CornerUpLeft;
      exports.LucideCornerUpRight = CornerUpRight;
      exports.LucideCpu = Cpu;
      exports.LucideCreativeCommons = CreativeCommons;
      exports.LucideCreditCard = CreditCard;
      exports.LucideCroissant = Croissant;
      exports.LucideCrop = Crop;
      exports.LucideCross = Cross;
      exports.LucideCrosshair = Crosshair;
      exports.LucideCrown = Crown;
      exports.LucideCuboid = Cuboid;
      exports.LucideCupSoda = CupSoda;
      exports.LucideCurlyBraces = Braces;
      exports.LucideCurrency = Currency;
      exports.LucideCylinder = Cylinder;
      exports.LucideDatabase = Database;
      exports.LucideDatabaseBackup = DatabaseBackup;
      exports.LucideDatabaseZap = DatabaseZap;
      exports.LucideDelete = Delete;
      exports.LucideDessert = Dessert;
      exports.LucideDiameter = Diameter;
      exports.LucideDiamond = Diamond;
      exports.LucideDice1 = Dice1;
      exports.LucideDice2 = Dice2;
      exports.LucideDice3 = Dice3;
      exports.LucideDice4 = Dice4;
      exports.LucideDice5 = Dice5;
      exports.LucideDice6 = Dice6;
      exports.LucideDices = Dices;
      exports.LucideDiff = Diff;
      exports.LucideDisc = Disc;
      exports.LucideDisc2 = Disc2;
      exports.LucideDisc3 = Disc3;
      exports.LucideDiscAlbum = DiscAlbum;
      exports.LucideDivide = Divide;
      exports.LucideDivideCircle = DivideCircle;
      exports.LucideDivideSquare = DivideSquare;
      exports.LucideDna = Dna;
      exports.LucideDnaOff = DnaOff;
      exports.LucideDog = Dog;
      exports.LucideDollarSign = DollarSign;
      exports.LucideDonut = Donut;
      exports.LucideDoorClosed = DoorClosed;
      exports.LucideDoorOpen = DoorOpen;
      exports.LucideDot = Dot;
      exports.LucideDotSquare = DotSquare;
      exports.LucideDownload = Download;
      exports.LucideDownloadCloud = DownloadCloud;
      exports.LucideDraftingCompass = DraftingCompass;
      exports.LucideDrama = Drama;
      exports.LucideDribbble = Dribbble;
      exports.LucideDrill = Drill;
      exports.LucideDroplet = Droplet;
      exports.LucideDroplets = Droplets;
      exports.LucideDrum = Drum;
      exports.LucideDrumstick = Drumstick;
      exports.LucideDumbbell = Dumbbell;
      exports.LucideEar = Ear;
      exports.LucideEarOff = EarOff;
      exports.LucideEclipse = Eclipse;
      exports.LucideEdit = SquarePen;
      exports.LucideEdit2 = Pen;
      exports.LucideEdit3 = PenLine;
      exports.LucideEgg = Egg;
      exports.LucideEggFried = EggFried;
      exports.LucideEggOff = EggOff;
      exports.LucideEqual = Equal;
      exports.LucideEqualNot = EqualNot;
      exports.LucideEqualSquare = EqualSquare;
      exports.LucideEraser = Eraser;
      exports.LucideEuro = Euro;
      exports.LucideExpand = Expand;
      exports.LucideExternalLink = ExternalLink;
      exports.LucideEye = Eye;
      exports.LucideEyeOff = EyeOff;
      exports.LucideFacebook = Facebook;
      exports.LucideFactory = Factory;
      exports.LucideFan = Fan;
      exports.LucideFastForward = FastForward;
      exports.LucideFeather = Feather;
      exports.LucideFence = Fence;
      exports.LucideFerrisWheel = FerrisWheel;
      exports.LucideFigma = Figma;
      exports.LucideFile = File;
      exports.LucideFileArchive = FileArchive;
      exports.LucideFileAudio = FileAudio;
      exports.LucideFileAudio2 = FileAudio2;
      exports.LucideFileAxis3D = FileAxis3d;
      exports.LucideFileAxis3d = FileAxis3d;
      exports.LucideFileBadge = FileBadge;
      exports.LucideFileBadge2 = FileBadge2;
      exports.LucideFileBarChart = FileBarChart;
      exports.LucideFileBarChart2 = FileBarChart2;
      exports.LucideFileBox = FileBox;
      exports.LucideFileCheck = FileCheck;
      exports.LucideFileCheck2 = FileCheck2;
      exports.LucideFileClock = FileClock;
      exports.LucideFileCode = FileCode;
      exports.LucideFileCode2 = FileCode2;
      exports.LucideFileCog = FileCog;
      exports.LucideFileCog2 = FileCog;
      exports.LucideFileDiff = FileDiff;
      exports.LucideFileDigit = FileDigit;
      exports.LucideFileDown = FileDown;
      exports.LucideFileEdit = FilePen;
      exports.LucideFileHeart = FileHeart;
      exports.LucideFileImage = FileImage;
      exports.LucideFileInput = FileInput;
      exports.LucideFileJson = FileJson;
      exports.LucideFileJson2 = FileJson2;
      exports.LucideFileKey = FileKey;
      exports.LucideFileKey2 = FileKey2;
      exports.LucideFileLineChart = FileLineChart;
      exports.LucideFileLock = FileLock;
      exports.LucideFileLock2 = FileLock2;
      exports.LucideFileMinus = FileMinus;
      exports.LucideFileMinus2 = FileMinus2;
      exports.LucideFileMusic = FileMusic;
      exports.LucideFileOutput = FileOutput;
      exports.LucideFilePen = FilePen;
      exports.LucideFilePenLine = FilePenLine;
      exports.LucideFilePieChart = FilePieChart;
      exports.LucideFilePlus = FilePlus;
      exports.LucideFilePlus2 = FilePlus2;
      exports.LucideFileQuestion = FileQuestion;
      exports.LucideFileScan = FileScan;
      exports.LucideFileSearch = FileSearch;
      exports.LucideFileSearch2 = FileSearch2;
      exports.LucideFileSignature = FilePenLine;
      exports.LucideFileSliders = FileSliders;
      exports.LucideFileSpreadsheet = FileSpreadsheet;
      exports.LucideFileStack = FileStack;
      exports.LucideFileSymlink = FileSymlink;
      exports.LucideFileTerminal = FileTerminal;
      exports.LucideFileText = FileText;
      exports.LucideFileType = FileType;
      exports.LucideFileType2 = FileType2;
      exports.LucideFileUp = FileUp;
      exports.LucideFileVideo = FileVideo;
      exports.LucideFileVideo2 = FileVideo2;
      exports.LucideFileVolume = FileVolume;
      exports.LucideFileVolume2 = FileVolume2;
      exports.LucideFileWarning = FileWarning;
      exports.LucideFileX = FileX;
      exports.LucideFileX2 = FileX2;
      exports.LucideFiles = Files;
      exports.LucideFilm = Film;
      exports.LucideFilter = Filter;
      exports.LucideFilterX = FilterX;
      exports.LucideFingerprint = Fingerprint;
      exports.LucideFireExtinguisher = FireExtinguisher;
      exports.LucideFish = Fish;
      exports.LucideFishOff = FishOff;
      exports.LucideFishSymbol = FishSymbol;
      exports.LucideFlag = Flag;
      exports.LucideFlagOff = FlagOff;
      exports.LucideFlagTriangleLeft = FlagTriangleLeft;
      exports.LucideFlagTriangleRight = FlagTriangleRight;
      exports.LucideFlame = Flame;
      exports.LucideFlameKindling = FlameKindling;
      exports.LucideFlashlight = Flashlight;
      exports.LucideFlashlightOff = FlashlightOff;
      exports.LucideFlaskConical = FlaskConical;
      exports.LucideFlaskConicalOff = FlaskConicalOff;
      exports.LucideFlaskRound = FlaskRound;
      exports.LucideFlipHorizontal = FlipHorizontal;
      exports.LucideFlipHorizontal2 = FlipHorizontal2;
      exports.LucideFlipVertical = FlipVertical;
      exports.LucideFlipVertical2 = FlipVertical2;
      exports.LucideFlower = Flower;
      exports.LucideFlower2 = Flower2;
      exports.LucideFocus = Focus;
      exports.LucideFoldHorizontal = FoldHorizontal;
      exports.LucideFoldVertical = FoldVertical;
      exports.LucideFolder = Folder;
      exports.LucideFolderArchive = FolderArchive;
      exports.LucideFolderCheck = FolderCheck;
      exports.LucideFolderClock = FolderClock;
      exports.LucideFolderClosed = FolderClosed;
      exports.LucideFolderCog = FolderCog;
      exports.LucideFolderCog2 = FolderCog;
      exports.LucideFolderDot = FolderDot;
      exports.LucideFolderDown = FolderDown;
      exports.LucideFolderEdit = FolderPen;
      exports.LucideFolderGit = FolderGit;
      exports.LucideFolderGit2 = FolderGit2;
      exports.LucideFolderHeart = FolderHeart;
      exports.LucideFolderInput = FolderInput;
      exports.LucideFolderKanban = FolderKanban;
      exports.LucideFolderKey = FolderKey;
      exports.LucideFolderLock = FolderLock;
      exports.LucideFolderMinus = FolderMinus;
      exports.LucideFolderOpen = FolderOpen;
      exports.LucideFolderOpenDot = FolderOpenDot;
      exports.LucideFolderOutput = FolderOutput;
      exports.LucideFolderPen = FolderPen;
      exports.LucideFolderPlus = FolderPlus;
      exports.LucideFolderRoot = FolderRoot;
      exports.LucideFolderSearch = FolderSearch;
      exports.LucideFolderSearch2 = FolderSearch2;
      exports.LucideFolderSymlink = FolderSymlink;
      exports.LucideFolderSync = FolderSync;
      exports.LucideFolderTree = FolderTree;
      exports.LucideFolderUp = FolderUp;
      exports.LucideFolderX = FolderX;
      exports.LucideFolders = Folders;
      exports.LucideFootprints = Footprints;
      exports.LucideForklift = Forklift;
      exports.LucideFormInput = FormInput;
      exports.LucideForward = Forward;
      exports.LucideFrame = Frame;
      exports.LucideFramer = Framer;
      exports.LucideFrown = Frown;
      exports.LucideFuel = Fuel;
      exports.LucideFullscreen = Fullscreen;
      exports.LucideFunctionSquare = FunctionSquare;
      exports.LucideGalleryHorizontal = GalleryHorizontal;
      exports.LucideGalleryHorizontalEnd = GalleryHorizontalEnd;
      exports.LucideGalleryThumbnails = GalleryThumbnails;
      exports.LucideGalleryVertical = GalleryVertical;
      exports.LucideGalleryVerticalEnd = GalleryVerticalEnd;
      exports.LucideGamepad = Gamepad;
      exports.LucideGamepad2 = Gamepad2;
      exports.LucideGanttChart = GanttChart;
      exports.LucideGanttChartSquare = GanttChartSquare;
      exports.LucideGanttSquare = GanttChartSquare;
      exports.LucideGauge = Gauge;
      exports.LucideGaugeCircle = GaugeCircle;
      exports.LucideGavel = Gavel;
      exports.LucideGem = Gem;
      exports.LucideGhost = Ghost;
      exports.LucideGift = Gift;
      exports.LucideGitBranch = GitBranch;
      exports.LucideGitBranchPlus = GitBranchPlus;
      exports.LucideGitCommit = GitCommitHorizontal;
      exports.LucideGitCommitHorizontal = GitCommitHorizontal;
      exports.LucideGitCommitVertical = GitCommitVertical;
      exports.LucideGitCompare = GitCompare;
      exports.LucideGitCompareArrows = GitCompareArrows;
      exports.LucideGitFork = GitFork;
      exports.LucideGitGraph = GitGraph;
      exports.LucideGitMerge = GitMerge;
      exports.LucideGitPullRequest = GitPullRequest;
      exports.LucideGitPullRequestArrow = GitPullRequestArrow;
      exports.LucideGitPullRequestClosed = GitPullRequestClosed;
      exports.LucideGitPullRequestCreate = GitPullRequestCreate;
      exports.LucideGitPullRequestCreateArrow = GitPullRequestCreateArrow;
      exports.LucideGitPullRequestDraft = GitPullRequestDraft;
      exports.LucideGithub = Github;
      exports.LucideGitlab = Gitlab;
      exports.LucideGlassWater = GlassWater;
      exports.LucideGlasses = Glasses;
      exports.LucideGlobe = Globe;
      exports.LucideGlobe2 = Globe2;
      exports.LucideGoal = Goal;
      exports.LucideGrab = Grab;
      exports.LucideGraduationCap = GraduationCap;
      exports.LucideGrape = Grape;
      exports.LucideGrid = Grid3x3;
      exports.LucideGrid2X2 = Grid2x2;
      exports.LucideGrid2x2 = Grid2x2;
      exports.LucideGrid3X3 = Grid3x3;
      exports.LucideGrid3x3 = Grid3x3;
      exports.LucideGrip = Grip;
      exports.LucideGripHorizontal = GripHorizontal;
      exports.LucideGripVertical = GripVertical;
      exports.LucideGroup = Group;
      exports.LucideGuitar = Guitar;
      exports.LucideHammer = Hammer;
      exports.LucideHand = Hand;
      exports.LucideHandCoins = HandCoins;
      exports.LucideHandHeart = HandHeart;
      exports.LucideHandHelping = HandHelping;
      exports.LucideHandMetal = HandMetal;
      exports.LucideHandPlatter = HandPlatter;
      exports.LucideHardDrive = HardDrive;
      exports.LucideHardDriveDownload = HardDriveDownload;
      exports.LucideHardDriveUpload = HardDriveUpload;
      exports.LucideHardHat = HardHat;
      exports.LucideHash = Hash;
      exports.LucideHaze = Haze;
      exports.LucideHdmiPort = HdmiPort;
      exports.LucideHeading = Heading;
      exports.LucideHeading1 = Heading1;
      exports.LucideHeading2 = Heading2;
      exports.LucideHeading3 = Heading3;
      exports.LucideHeading4 = Heading4;
      exports.LucideHeading5 = Heading5;
      exports.LucideHeading6 = Heading6;
      exports.LucideHeadphones = Headphones;
      exports.LucideHeart = Heart;
      exports.LucideHeartCrack = HeartCrack;
      exports.LucideHeartHandshake = HeartHandshake;
      exports.LucideHeartOff = HeartOff;
      exports.LucideHeartPulse = HeartPulse;
      exports.LucideHeater = Heater;
      exports.LucideHelpCircle = HelpCircle;
      exports.LucideHelpingHand = HandHelping;
      exports.LucideHexagon = Hexagon;
      exports.LucideHighlighter = Highlighter;
      exports.LucideHistory = History;
      exports.LucideHome = Home;
      exports.LucideHop = Hop;
      exports.LucideHopOff = HopOff;
      exports.LucideHotel = Hotel;
      exports.LucideHourglass = Hourglass;
      exports.LucideIceCream = IceCream;
      exports.LucideIceCream2 = IceCream2;
      exports.LucideImage = Image;
      exports.LucideImageDown = ImageDown;
      exports.LucideImageMinus = ImageMinus;
      exports.LucideImageOff = ImageOff;
      exports.LucideImagePlus = ImagePlus;
      exports.LucideImport = Import;
      exports.LucideInbox = Inbox;
      exports.LucideIndent = Indent;
      exports.LucideIndianRupee = IndianRupee;
      exports.LucideInfinity = Infinity2;
      exports.LucideInfo = Info;
      exports.LucideInspect = MousePointerSquare;
      exports.LucideInspectionPanel = InspectionPanel;
      exports.LucideInstagram = Instagram;
      exports.LucideItalic = Italic;
      exports.LucideIterationCcw = IterationCcw;
      exports.LucideIterationCw = IterationCw;
      exports.LucideJapaneseYen = JapaneseYen;
      exports.LucideJoystick = Joystick;
      exports.LucideKanban = Kanban;
      exports.LucideKanbanSquare = KanbanSquare;
      exports.LucideKanbanSquareDashed = KanbanSquareDashed;
      exports.LucideKey = Key;
      exports.LucideKeyRound = KeyRound;
      exports.LucideKeySquare = KeySquare;
      exports.LucideKeyboard = Keyboard;
      exports.LucideKeyboardMusic = KeyboardMusic;
      exports.LucideLamp = Lamp;
      exports.LucideLampCeiling = LampCeiling;
      exports.LucideLampDesk = LampDesk;
      exports.LucideLampFloor = LampFloor;
      exports.LucideLampWallDown = LampWallDown;
      exports.LucideLampWallUp = LampWallUp;
      exports.LucideLandPlot = LandPlot;
      exports.LucideLandmark = Landmark;
      exports.LucideLanguages = Languages;
      exports.LucideLaptop = Laptop;
      exports.LucideLaptop2 = Laptop2;
      exports.LucideLasso = Lasso;
      exports.LucideLassoSelect = LassoSelect;
      exports.LucideLaugh = Laugh;
      exports.LucideLayers = Layers;
      exports.LucideLayers2 = Layers2;
      exports.LucideLayers3 = Layers3;
      exports.LucideLayout = PanelsTopLeft;
      exports.LucideLayoutDashboard = LayoutDashboard;
      exports.LucideLayoutGrid = LayoutGrid;
      exports.LucideLayoutList = LayoutList;
      exports.LucideLayoutPanelLeft = LayoutPanelLeft;
      exports.LucideLayoutPanelTop = LayoutPanelTop;
      exports.LucideLayoutTemplate = LayoutTemplate;
      exports.LucideLeaf = Leaf;
      exports.LucideLeafyGreen = LeafyGreen;
      exports.LucideLibrary = Library;
      exports.LucideLibraryBig = LibraryBig;
      exports.LucideLibrarySquare = LibrarySquare;
      exports.LucideLifeBuoy = LifeBuoy;
      exports.LucideLigature = Ligature;
      exports.LucideLightbulb = Lightbulb;
      exports.LucideLightbulbOff = LightbulbOff;
      exports.LucideLineChart = LineChart;
      exports.LucideLink = Link;
      exports.LucideLink2 = Link2;
      exports.LucideLink2Off = Link2Off;
      exports.LucideLinkedin = Linkedin;
      exports.LucideList = List;
      exports.LucideListChecks = ListChecks;
      exports.LucideListCollapse = ListCollapse;
      exports.LucideListEnd = ListEnd;
      exports.LucideListFilter = ListFilter;
      exports.LucideListMinus = ListMinus;
      exports.LucideListMusic = ListMusic;
      exports.LucideListOrdered = ListOrdered;
      exports.LucideListPlus = ListPlus;
      exports.LucideListRestart = ListRestart;
      exports.LucideListStart = ListStart;
      exports.LucideListTodo = ListTodo;
      exports.LucideListTree = ListTree;
      exports.LucideListVideo = ListVideo;
      exports.LucideListX = ListX;
      exports.LucideLoader = Loader;
      exports.LucideLoader2 = Loader2;
      exports.LucideLocate = Locate;
      exports.LucideLocateFixed = LocateFixed;
      exports.LucideLocateOff = LocateOff;
      exports.LucideLock = Lock;
      exports.LucideLockKeyhole = LockKeyhole;
      exports.LucideLogIn = LogIn;
      exports.LucideLogOut = LogOut;
      exports.LucideLollipop = Lollipop;
      exports.LucideLuggage = Luggage;
      exports.LucideMSquare = MSquare;
      exports.LucideMagnet = Magnet;
      exports.LucideMail = Mail;
      exports.LucideMailCheck = MailCheck;
      exports.LucideMailMinus = MailMinus;
      exports.LucideMailOpen = MailOpen;
      exports.LucideMailPlus = MailPlus;
      exports.LucideMailQuestion = MailQuestion;
      exports.LucideMailSearch = MailSearch;
      exports.LucideMailWarning = MailWarning;
      exports.LucideMailX = MailX;
      exports.LucideMailbox = Mailbox;
      exports.LucideMails = Mails;
      exports.LucideMap = Map2;
      exports.LucideMapPin = MapPin;
      exports.LucideMapPinOff = MapPinOff;
      exports.LucideMapPinned = MapPinned;
      exports.LucideMartini = Martini;
      exports.LucideMaximize = Maximize;
      exports.LucideMaximize2 = Maximize2;
      exports.LucideMedal = Medal;
      exports.LucideMegaphone = Megaphone;
      exports.LucideMegaphoneOff = MegaphoneOff;
      exports.LucideMeh = Meh;
      exports.LucideMemoryStick = MemoryStick;
      exports.LucideMenu = Menu;
      exports.LucideMenuSquare = MenuSquare;
      exports.LucideMerge = Merge;
      exports.LucideMessageCircle = MessageCircle;
      exports.LucideMessageCircleCode = MessageCircleCode;
      exports.LucideMessageCircleDashed = MessageCircleDashed;
      exports.LucideMessageCircleHeart = MessageCircleHeart;
      exports.LucideMessageCircleMore = MessageCircleMore;
      exports.LucideMessageCircleOff = MessageCircleOff;
      exports.LucideMessageCirclePlus = MessageCirclePlus;
      exports.LucideMessageCircleQuestion = MessageCircleQuestion;
      exports.LucideMessageCircleReply = MessageCircleReply;
      exports.LucideMessageCircleWarning = MessageCircleWarning;
      exports.LucideMessageCircleX = MessageCircleX;
      exports.LucideMessageSquare = MessageSquare;
      exports.LucideMessageSquareCode = MessageSquareCode;
      exports.LucideMessageSquareDashed = MessageSquareDashed;
      exports.LucideMessageSquareDiff = MessageSquareDiff;
      exports.LucideMessageSquareDot = MessageSquareDot;
      exports.LucideMessageSquareHeart = MessageSquareHeart;
      exports.LucideMessageSquareMore = MessageSquareMore;
      exports.LucideMessageSquareOff = MessageSquareOff;
      exports.LucideMessageSquarePlus = MessageSquarePlus;
      exports.LucideMessageSquareQuote = MessageSquareQuote;
      exports.LucideMessageSquareReply = MessageSquareReply;
      exports.LucideMessageSquareShare = MessageSquareShare;
      exports.LucideMessageSquareText = MessageSquareText;
      exports.LucideMessageSquareWarning = MessageSquareWarning;
      exports.LucideMessageSquareX = MessageSquareX;
      exports.LucideMessagesSquare = MessagesSquare;
      exports.LucideMic = Mic;
      exports.LucideMic2 = Mic2;
      exports.LucideMicOff = MicOff;
      exports.LucideMicroscope = Microscope;
      exports.LucideMicrowave = Microwave;
      exports.LucideMilestone = Milestone;
      exports.LucideMilk = Milk;
      exports.LucideMilkOff = MilkOff;
      exports.LucideMinimize = Minimize;
      exports.LucideMinimize2 = Minimize2;
      exports.LucideMinus = Minus;
      exports.LucideMinusCircle = MinusCircle;
      exports.LucideMinusSquare = MinusSquare;
      exports.LucideMonitor = Monitor;
      exports.LucideMonitorCheck = MonitorCheck;
      exports.LucideMonitorDot = MonitorDot;
      exports.LucideMonitorDown = MonitorDown;
      exports.LucideMonitorOff = MonitorOff;
      exports.LucideMonitorPause = MonitorPause;
      exports.LucideMonitorPlay = MonitorPlay;
      exports.LucideMonitorSmartphone = MonitorSmartphone;
      exports.LucideMonitorSpeaker = MonitorSpeaker;
      exports.LucideMonitorStop = MonitorStop;
      exports.LucideMonitorUp = MonitorUp;
      exports.LucideMonitorX = MonitorX;
      exports.LucideMoon = Moon;
      exports.LucideMoonStar = MoonStar;
      exports.LucideMoreHorizontal = MoreHorizontal;
      exports.LucideMoreVertical = MoreVertical;
      exports.LucideMountain = Mountain;
      exports.LucideMountainSnow = MountainSnow;
      exports.LucideMouse = Mouse;
      exports.LucideMousePointer = MousePointer;
      exports.LucideMousePointer2 = MousePointer2;
      exports.LucideMousePointerClick = MousePointerClick;
      exports.LucideMousePointerSquare = MousePointerSquare;
      exports.LucideMousePointerSquareDashed = MousePointerSquareDashed;
      exports.LucideMove = Move;
      exports.LucideMove3D = Move3d;
      exports.LucideMove3d = Move3d;
      exports.LucideMoveDiagonal = MoveDiagonal;
      exports.LucideMoveDiagonal2 = MoveDiagonal2;
      exports.LucideMoveDown = MoveDown;
      exports.LucideMoveDownLeft = MoveDownLeft;
      exports.LucideMoveDownRight = MoveDownRight;
      exports.LucideMoveHorizontal = MoveHorizontal;
      exports.LucideMoveLeft = MoveLeft;
      exports.LucideMoveRight = MoveRight;
      exports.LucideMoveUp = MoveUp;
      exports.LucideMoveUpLeft = MoveUpLeft;
      exports.LucideMoveUpRight = MoveUpRight;
      exports.LucideMoveVertical = MoveVertical;
      exports.LucideMusic = Music;
      exports.LucideMusic2 = Music2;
      exports.LucideMusic3 = Music3;
      exports.LucideMusic4 = Music4;
      exports.LucideNavigation = Navigation;
      exports.LucideNavigation2 = Navigation2;
      exports.LucideNavigation2Off = Navigation2Off;
      exports.LucideNavigationOff = NavigationOff;
      exports.LucideNetwork = Network;
      exports.LucideNewspaper = Newspaper;
      exports.LucideNfc = Nfc;
      exports.LucideNotebook = Notebook;
      exports.LucideNotebookPen = NotebookPen;
      exports.LucideNotebookTabs = NotebookTabs;
      exports.LucideNotebookText = NotebookText;
      exports.LucideNotepadText = NotepadText;
      exports.LucideNotepadTextDashed = NotepadTextDashed;
      exports.LucideNut = Nut;
      exports.LucideNutOff = NutOff;
      exports.LucideOctagon = Octagon;
      exports.LucideOption = Option;
      exports.LucideOrbit = Orbit;
      exports.LucideOutdent = Outdent;
      exports.LucidePackage = Package;
      exports.LucidePackage2 = Package2;
      exports.LucidePackageCheck = PackageCheck;
      exports.LucidePackageMinus = PackageMinus;
      exports.LucidePackageOpen = PackageOpen;
      exports.LucidePackagePlus = PackagePlus;
      exports.LucidePackageSearch = PackageSearch;
      exports.LucidePackageX = PackageX;
      exports.LucidePaintBucket = PaintBucket;
      exports.LucidePaintRoller = PaintRoller;
      exports.LucidePaintbrush = Paintbrush;
      exports.LucidePaintbrush2 = Paintbrush2;
      exports.LucidePalette = Palette;
      exports.LucidePalmtree = Palmtree;
      exports.LucidePanelBottom = PanelBottom;
      exports.LucidePanelBottomClose = PanelBottomClose;
      exports.LucidePanelBottomDashed = PanelBottomDashed;
      exports.LucidePanelBottomInactive = PanelBottomDashed;
      exports.LucidePanelBottomOpen = PanelBottomOpen;
      exports.LucidePanelLeft = PanelLeft;
      exports.LucidePanelLeftClose = PanelLeftClose;
      exports.LucidePanelLeftDashed = PanelLeftDashed;
      exports.LucidePanelLeftInactive = PanelLeftDashed;
      exports.LucidePanelLeftOpen = PanelLeftOpen;
      exports.LucidePanelRight = PanelRight;
      exports.LucidePanelRightClose = PanelRightClose;
      exports.LucidePanelRightDashed = PanelRightDashed;
      exports.LucidePanelRightInactive = PanelRightDashed;
      exports.LucidePanelRightOpen = PanelRightOpen;
      exports.LucidePanelTop = PanelTop;
      exports.LucidePanelTopClose = PanelTopClose;
      exports.LucidePanelTopDashed = PanelTopDashed;
      exports.LucidePanelTopInactive = PanelTopDashed;
      exports.LucidePanelTopOpen = PanelTopOpen;
      exports.LucidePanelsLeftBottom = PanelsLeftBottom;
      exports.LucidePanelsLeftRight = Columns3;
      exports.LucidePanelsRightBottom = PanelsRightBottom;
      exports.LucidePanelsTopBottom = Rows3;
      exports.LucidePanelsTopLeft = PanelsTopLeft;
      exports.LucidePaperclip = Paperclip;
      exports.LucideParentheses = Parentheses;
      exports.LucideParkingCircle = ParkingCircle;
      exports.LucideParkingCircleOff = ParkingCircleOff;
      exports.LucideParkingMeter = ParkingMeter;
      exports.LucideParkingSquare = ParkingSquare;
      exports.LucideParkingSquareOff = ParkingSquareOff;
      exports.LucidePartyPopper = PartyPopper;
      exports.LucidePause = Pause;
      exports.LucidePauseCircle = PauseCircle;
      exports.LucidePauseOctagon = PauseOctagon;
      exports.LucidePawPrint = PawPrint;
      exports.LucidePcCase = PcCase;
      exports.LucidePen = Pen;
      exports.LucidePenBox = SquarePen;
      exports.LucidePenLine = PenLine;
      exports.LucidePenSquare = SquarePen;
      exports.LucidePenTool = PenTool;
      exports.LucidePencil = Pencil;
      exports.LucidePencilLine = PencilLine;
      exports.LucidePencilRuler = PencilRuler;
      exports.LucidePentagon = Pentagon;
      exports.LucidePercent = Percent;
      exports.LucidePercentCircle = PercentCircle;
      exports.LucidePercentDiamond = PercentDiamond;
      exports.LucidePercentSquare = PercentSquare;
      exports.LucidePersonStanding = PersonStanding;
      exports.LucidePhone = Phone;
      exports.LucidePhoneCall = PhoneCall;
      exports.LucidePhoneForwarded = PhoneForwarded;
      exports.LucidePhoneIncoming = PhoneIncoming;
      exports.LucidePhoneMissed = PhoneMissed;
      exports.LucidePhoneOff = PhoneOff;
      exports.LucidePhoneOutgoing = PhoneOutgoing;
      exports.LucidePi = Pi;
      exports.LucidePiSquare = PiSquare;
      exports.LucidePiano = Piano;
      exports.LucidePictureInPicture = PictureInPicture;
      exports.LucidePictureInPicture2 = PictureInPicture2;
      exports.LucidePieChart = PieChart;
      exports.LucidePiggyBank = PiggyBank;
      exports.LucidePilcrow = Pilcrow;
      exports.LucidePilcrowSquare = PilcrowSquare;
      exports.LucidePill = Pill;
      exports.LucidePin = Pin;
      exports.LucidePinOff = PinOff;
      exports.LucidePipette = Pipette;
      exports.LucidePizza = Pizza;
      exports.LucidePlane = Plane;
      exports.LucidePlaneLanding = PlaneLanding;
      exports.LucidePlaneTakeoff = PlaneTakeoff;
      exports.LucidePlay = Play;
      exports.LucidePlayCircle = PlayCircle;
      exports.LucidePlaySquare = PlaySquare;
      exports.LucidePlug = Plug;
      exports.LucidePlug2 = Plug2;
      exports.LucidePlugZap = PlugZap;
      exports.LucidePlugZap2 = PlugZap2;
      exports.LucidePlus = Plus;
      exports.LucidePlusCircle = PlusCircle;
      exports.LucidePlusSquare = PlusSquare;
      exports.LucidePocket = Pocket;
      exports.LucidePocketKnife = PocketKnife;
      exports.LucidePodcast = Podcast;
      exports.LucidePointer = Pointer;
      exports.LucidePointerOff = PointerOff;
      exports.LucidePopcorn = Popcorn;
      exports.LucidePopsicle = Popsicle;
      exports.LucidePoundSterling = PoundSterling;
      exports.LucidePower = Power;
      exports.LucidePowerCircle = PowerCircle;
      exports.LucidePowerOff = PowerOff;
      exports.LucidePowerSquare = PowerSquare;
      exports.LucidePresentation = Presentation;
      exports.LucidePrinter = Printer;
      exports.LucideProjector = Projector;
      exports.LucidePuzzle = Puzzle;
      exports.LucidePyramid = Pyramid;
      exports.LucideQrCode = QrCode;
      exports.LucideQuote = Quote;
      exports.LucideRabbit = Rabbit;
      exports.LucideRadar = Radar;
      exports.LucideRadiation = Radiation;
      exports.LucideRadio = Radio;
      exports.LucideRadioReceiver = RadioReceiver;
      exports.LucideRadioTower = RadioTower;
      exports.LucideRadius = Radius;
      exports.LucideRailSymbol = RailSymbol;
      exports.LucideRainbow = Rainbow;
      exports.LucideRat = Rat;
      exports.LucideRatio = Ratio;
      exports.LucideReceipt = Receipt;
      exports.LucideReceiptCent = ReceiptCent;
      exports.LucideReceiptEuro = ReceiptEuro;
      exports.LucideReceiptIndianRupee = ReceiptIndianRupee;
      exports.LucideReceiptJapaneseYen = ReceiptJapaneseYen;
      exports.LucideReceiptPoundSterling = ReceiptPoundSterling;
      exports.LucideReceiptRussianRuble = ReceiptRussianRuble;
      exports.LucideReceiptSwissFranc = ReceiptSwissFranc;
      exports.LucideReceiptText = ReceiptText;
      exports.LucideRectangleHorizontal = RectangleHorizontal;
      exports.LucideRectangleVertical = RectangleVertical;
      exports.LucideRecycle = Recycle;
      exports.LucideRedo = Redo;
      exports.LucideRedo2 = Redo2;
      exports.LucideRedoDot = RedoDot;
      exports.LucideRefreshCcw = RefreshCcw;
      exports.LucideRefreshCcwDot = RefreshCcwDot;
      exports.LucideRefreshCw = RefreshCw;
      exports.LucideRefreshCwOff = RefreshCwOff;
      exports.LucideRefrigerator = Refrigerator;
      exports.LucideRegex = Regex;
      exports.LucideRemoveFormatting = RemoveFormatting;
      exports.LucideRepeat = Repeat;
      exports.LucideRepeat1 = Repeat1;
      exports.LucideRepeat2 = Repeat2;
      exports.LucideReplace = Replace;
      exports.LucideReplaceAll = ReplaceAll;
      exports.LucideReply = Reply;
      exports.LucideReplyAll = ReplyAll;
      exports.LucideRewind = Rewind;
      exports.LucideRibbon = Ribbon;
      exports.LucideRocket = Rocket;
      exports.LucideRockingChair = RockingChair;
      exports.LucideRollerCoaster = RollerCoaster;
      exports.LucideRotate3D = Rotate3d;
      exports.LucideRotate3d = Rotate3d;
      exports.LucideRotateCcw = RotateCcw;
      exports.LucideRotateCw = RotateCw;
      exports.LucideRoute = Route;
      exports.LucideRouteOff = RouteOff;
      exports.LucideRouter = Router;
      exports.LucideRows = Rows2;
      exports.LucideRows2 = Rows2;
      exports.LucideRows3 = Rows3;
      exports.LucideRows4 = Rows4;
      exports.LucideRss = Rss;
      exports.LucideRuler = Ruler;
      exports.LucideRussianRuble = RussianRuble;
      exports.LucideSailboat = Sailboat;
      exports.LucideSalad = Salad;
      exports.LucideSandwich = Sandwich;
      exports.LucideSatellite = Satellite;
      exports.LucideSatelliteDish = SatelliteDish;
      exports.LucideSave = Save;
      exports.LucideSaveAll = SaveAll;
      exports.LucideScale = Scale;
      exports.LucideScale3D = Scale3d;
      exports.LucideScale3d = Scale3d;
      exports.LucideScaling = Scaling;
      exports.LucideScan = Scan;
      exports.LucideScanBarcode = ScanBarcode;
      exports.LucideScanEye = ScanEye;
      exports.LucideScanFace = ScanFace;
      exports.LucideScanLine = ScanLine;
      exports.LucideScanSearch = ScanSearch;
      exports.LucideScanText = ScanText;
      exports.LucideScatterChart = ScatterChart;
      exports.LucideSchool = School;
      exports.LucideSchool2 = School2;
      exports.LucideScissors = Scissors;
      exports.LucideScissorsLineDashed = ScissorsLineDashed;
      exports.LucideScissorsSquare = ScissorsSquare;
      exports.LucideScissorsSquareDashedBottom = ScissorsSquareDashedBottom;
      exports.LucideScreenShare = ScreenShare;
      exports.LucideScreenShareOff = ScreenShareOff;
      exports.LucideScroll = Scroll;
      exports.LucideScrollText = ScrollText;
      exports.LucideSearch = Search;
      exports.LucideSearchCheck = SearchCheck;
      exports.LucideSearchCode = SearchCode;
      exports.LucideSearchSlash = SearchSlash;
      exports.LucideSearchX = SearchX;
      exports.LucideSend = Send;
      exports.LucideSendHorizonal = SendHorizontal;
      exports.LucideSendHorizontal = SendHorizontal;
      exports.LucideSendToBack = SendToBack;
      exports.LucideSeparatorHorizontal = SeparatorHorizontal;
      exports.LucideSeparatorVertical = SeparatorVertical;
      exports.LucideServer = Server;
      exports.LucideServerCog = ServerCog;
      exports.LucideServerCrash = ServerCrash;
      exports.LucideServerOff = ServerOff;
      exports.LucideSettings = Settings;
      exports.LucideSettings2 = Settings2;
      exports.LucideShapes = Shapes;
      exports.LucideShare = Share;
      exports.LucideShare2 = Share2;
      exports.LucideSheet = Sheet;
      exports.LucideShell = Shell;
      exports.LucideShield = Shield;
      exports.LucideShieldAlert = ShieldAlert;
      exports.LucideShieldBan = ShieldBan;
      exports.LucideShieldCheck = ShieldCheck;
      exports.LucideShieldClose = ShieldX;
      exports.LucideShieldEllipsis = ShieldEllipsis;
      exports.LucideShieldHalf = ShieldHalf;
      exports.LucideShieldMinus = ShieldMinus;
      exports.LucideShieldOff = ShieldOff;
      exports.LucideShieldPlus = ShieldPlus;
      exports.LucideShieldQuestion = ShieldQuestion;
      exports.LucideShieldX = ShieldX;
      exports.LucideShip = Ship;
      exports.LucideShipWheel = ShipWheel;
      exports.LucideShirt = Shirt;
      exports.LucideShoppingBag = ShoppingBag;
      exports.LucideShoppingBasket = ShoppingBasket;
      exports.LucideShoppingCart = ShoppingCart;
      exports.LucideShovel = Shovel;
      exports.LucideShowerHead = ShowerHead;
      exports.LucideShrink = Shrink;
      exports.LucideShrub = Shrub;
      exports.LucideShuffle = Shuffle;
      exports.LucideSidebar = PanelLeft;
      exports.LucideSidebarClose = PanelLeftClose;
      exports.LucideSidebarOpen = PanelLeftOpen;
      exports.LucideSigma = Sigma;
      exports.LucideSigmaSquare = SigmaSquare;
      exports.LucideSignal = Signal;
      exports.LucideSignalHigh = SignalHigh;
      exports.LucideSignalLow = SignalLow;
      exports.LucideSignalMedium = SignalMedium;
      exports.LucideSignalZero = SignalZero;
      exports.LucideSignpost = Signpost;
      exports.LucideSignpostBig = SignpostBig;
      exports.LucideSiren = Siren;
      exports.LucideSkipBack = SkipBack;
      exports.LucideSkipForward = SkipForward;
      exports.LucideSkull = Skull;
      exports.LucideSlack = Slack;
      exports.LucideSlash = Slash;
      exports.LucideSlashSquare = SlashSquare;
      exports.LucideSlice = Slice;
      exports.LucideSliders = Sliders;
      exports.LucideSlidersHorizontal = SlidersHorizontal;
      exports.LucideSmartphone = Smartphone;
      exports.LucideSmartphoneCharging = SmartphoneCharging;
      exports.LucideSmartphoneNfc = SmartphoneNfc;
      exports.LucideSmile = Smile;
      exports.LucideSmilePlus = SmilePlus;
      exports.LucideSnail = Snail;
      exports.LucideSnowflake = Snowflake;
      exports.LucideSofa = Sofa;
      exports.LucideSortAsc = ArrowUpNarrowWide;
      exports.LucideSortDesc = ArrowDownWideNarrow;
      exports.LucideSoup = Soup;
      exports.LucideSpace = Space;
      exports.LucideSpade = Spade;
      exports.LucideSparkle = Sparkle;
      exports.LucideSparkles = Sparkles;
      exports.LucideSpeaker = Speaker;
      exports.LucideSpeech = Speech;
      exports.LucideSpellCheck = SpellCheck;
      exports.LucideSpellCheck2 = SpellCheck2;
      exports.LucideSpline = Spline;
      exports.LucideSplit = Split;
      exports.LucideSplitSquareHorizontal = SplitSquareHorizontal;
      exports.LucideSplitSquareVertical = SplitSquareVertical;
      exports.LucideSprayCan = SprayCan;
      exports.LucideSprout = Sprout;
      exports.LucideSquare = Square;
      exports.LucideSquareAsterisk = AsteriskSquare;
      exports.LucideSquareCode = CodeSquare;
      exports.LucideSquareDashedBottom = SquareDashedBottom;
      exports.LucideSquareDashedBottomCode = SquareDashedBottomCode;
      exports.LucideSquareDot = DotSquare;
      exports.LucideSquareEqual = EqualSquare;
      exports.LucideSquareGantt = GanttChartSquare;
      exports.LucideSquareKanban = KanbanSquare;
      exports.LucideSquareKanbanDashed = KanbanSquareDashed;
      exports.LucideSquarePen = SquarePen;
      exports.LucideSquareSlash = SlashSquare;
      exports.LucideSquareStack = SquareStack;
      exports.LucideSquareUser = SquareUser;
      exports.LucideSquareUserRound = SquareUserRound;
      exports.LucideSquircle = Squircle;
      exports.LucideSquirrel = Squirrel;
      exports.LucideStamp = Stamp;
      exports.LucideStar = Star;
      exports.LucideStarHalf = StarHalf;
      exports.LucideStarOff = StarOff;
      exports.LucideStars = Sparkles;
      exports.LucideStepBack = StepBack;
      exports.LucideStepForward = StepForward;
      exports.LucideStethoscope = Stethoscope;
      exports.LucideSticker = Sticker;
      exports.LucideStickyNote = StickyNote;
      exports.LucideStopCircle = StopCircle;
      exports.LucideStore = Store;
      exports.LucideStretchHorizontal = StretchHorizontal;
      exports.LucideStretchVertical = StretchVertical;
      exports.LucideStrikethrough = Strikethrough;
      exports.LucideSubscript = Subscript;
      exports.LucideSubtitles = Subtitles;
      exports.LucideSun = Sun;
      exports.LucideSunDim = SunDim;
      exports.LucideSunMedium = SunMedium;
      exports.LucideSunMoon = SunMoon;
      exports.LucideSunSnow = SunSnow;
      exports.LucideSunrise = Sunrise;
      exports.LucideSunset = Sunset;
      exports.LucideSuperscript = Superscript;
      exports.LucideSwatchBook = SwatchBook;
      exports.LucideSwissFranc = SwissFranc;
      exports.LucideSwitchCamera = SwitchCamera;
      exports.LucideSword = Sword;
      exports.LucideSwords = Swords;
      exports.LucideSyringe = Syringe;
      exports.LucideTable = Table;
      exports.LucideTable2 = Table2;
      exports.LucideTableProperties = TableProperties;
      exports.LucideTablet = Tablet;
      exports.LucideTabletSmartphone = TabletSmartphone;
      exports.LucideTablets = Tablets;
      exports.LucideTag = Tag;
      exports.LucideTags = Tags;
      exports.LucideTally1 = Tally1;
      exports.LucideTally2 = Tally2;
      exports.LucideTally3 = Tally3;
      exports.LucideTally4 = Tally4;
      exports.LucideTally5 = Tally5;
      exports.LucideTangent = Tangent;
      exports.LucideTarget = Target;
      exports.LucideTent = Tent;
      exports.LucideTentTree = TentTree;
      exports.LucideTerminal = Terminal;
      exports.LucideTerminalSquare = TerminalSquare;
      exports.LucideTestTube = TestTube;
      exports.LucideTestTube2 = TestTube2;
      exports.LucideTestTubes = TestTubes;
      exports.LucideText = Text;
      exports.LucideTextCursor = TextCursor;
      exports.LucideTextCursorInput = TextCursorInput;
      exports.LucideTextQuote = TextQuote;
      exports.LucideTextSearch = TextSearch;
      exports.LucideTextSelect = TextSelect;
      exports.LucideTextSelection = TextSelect;
      exports.LucideTheater = Theater;
      exports.LucideThermometer = Thermometer;
      exports.LucideThermometerSnowflake = ThermometerSnowflake;
      exports.LucideThermometerSun = ThermometerSun;
      exports.LucideThumbsDown = ThumbsDown;
      exports.LucideThumbsUp = ThumbsUp;
      exports.LucideTicket = Ticket;
      exports.LucideTicketCheck = TicketCheck;
      exports.LucideTicketMinus = TicketMinus;
      exports.LucideTicketPercent = TicketPercent;
      exports.LucideTicketPlus = TicketPlus;
      exports.LucideTicketSlash = TicketSlash;
      exports.LucideTicketX = TicketX;
      exports.LucideTimer = Timer;
      exports.LucideTimerOff = TimerOff;
      exports.LucideTimerReset = TimerReset;
      exports.LucideToggleLeft = ToggleLeft;
      exports.LucideToggleRight = ToggleRight;
      exports.LucideTornado = Tornado;
      exports.LucideTorus = Torus;
      exports.LucideTouchpad = Touchpad;
      exports.LucideTouchpadOff = TouchpadOff;
      exports.LucideTowerControl = TowerControl;
      exports.LucideToyBrick = ToyBrick;
      exports.LucideTractor = Tractor;
      exports.LucideTrafficCone = TrafficCone;
      exports.LucideTrain = TramFront;
      exports.LucideTrainFront = TrainFront;
      exports.LucideTrainFrontTunnel = TrainFrontTunnel;
      exports.LucideTrainTrack = TrainTrack;
      exports.LucideTramFront = TramFront;
      exports.LucideTrash = Trash;
      exports.LucideTrash2 = Trash2;
      exports.LucideTreeDeciduous = TreeDeciduous;
      exports.LucideTreePine = TreePine;
      exports.LucideTrees = Trees;
      exports.LucideTrello = Trello;
      exports.LucideTrendingDown = TrendingDown;
      exports.LucideTrendingUp = TrendingUp;
      exports.LucideTriangle = Triangle;
      exports.LucideTriangleRight = TriangleRight;
      exports.LucideTrophy = Trophy;
      exports.LucideTruck = Truck;
      exports.LucideTurtle = Turtle;
      exports.LucideTv = Tv;
      exports.LucideTv2 = Tv2;
      exports.LucideTwitch = Twitch;
      exports.LucideTwitter = Twitter;
      exports.LucideType = Type;
      exports.LucideUmbrella = Umbrella;
      exports.LucideUmbrellaOff = UmbrellaOff;
      exports.LucideUnderline = Underline;
      exports.LucideUndo = Undo;
      exports.LucideUndo2 = Undo2;
      exports.LucideUndoDot = UndoDot;
      exports.LucideUnfoldHorizontal = UnfoldHorizontal;
      exports.LucideUnfoldVertical = UnfoldVertical;
      exports.LucideUngroup = Ungroup;
      exports.LucideUnlink = Unlink;
      exports.LucideUnlink2 = Unlink2;
      exports.LucideUnlock = Unlock;
      exports.LucideUnlockKeyhole = UnlockKeyhole;
      exports.LucideUnplug = Unplug;
      exports.LucideUpload = Upload;
      exports.LucideUploadCloud = UploadCloud;
      exports.LucideUsb = Usb;
      exports.LucideUser = User;
      exports.LucideUser2 = UserRound;
      exports.LucideUserCheck = UserCheck;
      exports.LucideUserCheck2 = UserRoundCheck;
      exports.LucideUserCircle = CircleUser;
      exports.LucideUserCircle2 = CircleUserRound;
      exports.LucideUserCog = UserCog;
      exports.LucideUserCog2 = UserRoundCog;
      exports.LucideUserMinus = UserMinus;
      exports.LucideUserMinus2 = UserRoundMinus;
      exports.LucideUserPlus = UserPlus;
      exports.LucideUserPlus2 = UserRoundPlus;
      exports.LucideUserRound = UserRound;
      exports.LucideUserRoundCheck = UserRoundCheck;
      exports.LucideUserRoundCog = UserRoundCog;
      exports.LucideUserRoundMinus = UserRoundMinus;
      exports.LucideUserRoundPlus = UserRoundPlus;
      exports.LucideUserRoundSearch = UserRoundSearch;
      exports.LucideUserRoundX = UserRoundX;
      exports.LucideUserSearch = UserSearch;
      exports.LucideUserSquare = SquareUser;
      exports.LucideUserSquare2 = SquareUserRound;
      exports.LucideUserX = UserX;
      exports.LucideUserX2 = UserRoundX;
      exports.LucideUsers = Users;
      exports.LucideUsers2 = UsersRound;
      exports.LucideUsersRound = UsersRound;
      exports.LucideUtensils = Utensils;
      exports.LucideUtensilsCrossed = UtensilsCrossed;
      exports.LucideUtilityPole = UtilityPole;
      exports.LucideVariable = Variable;
      exports.LucideVault = Vault;
      exports.LucideVegan = Vegan;
      exports.LucideVenetianMask = VenetianMask;
      exports.LucideVerified = BadgeCheck;
      exports.LucideVibrate = Vibrate;
      exports.LucideVibrateOff = VibrateOff;
      exports.LucideVideo = Video;
      exports.LucideVideoOff = VideoOff;
      exports.LucideVideotape = Videotape;
      exports.LucideView = View;
      exports.LucideVoicemail = Voicemail;
      exports.LucideVolume = Volume;
      exports.LucideVolume1 = Volume1;
      exports.LucideVolume2 = Volume2;
      exports.LucideVolumeX = VolumeX;
      exports.LucideVote = Vote;
      exports.LucideWallet = Wallet;
      exports.LucideWallet2 = Wallet2;
      exports.LucideWalletCards = WalletCards;
      exports.LucideWallpaper = Wallpaper;
      exports.LucideWand = Wand;
      exports.LucideWand2 = Wand2;
      exports.LucideWarehouse = Warehouse;
      exports.LucideWashingMachine = WashingMachine;
      exports.LucideWatch = Watch;
      exports.LucideWaves = Waves;
      exports.LucideWaypoints = Waypoints;
      exports.LucideWebcam = Webcam;
      exports.LucideWebhook = Webhook;
      exports.LucideWebhookOff = WebhookOff;
      exports.LucideWeight = Weight;
      exports.LucideWheat = Wheat;
      exports.LucideWheatOff = WheatOff;
      exports.LucideWholeWord = WholeWord;
      exports.LucideWifi = Wifi;
      exports.LucideWifiOff = WifiOff;
      exports.LucideWind = Wind;
      exports.LucideWine = Wine;
      exports.LucideWineOff = WineOff;
      exports.LucideWorkflow = Workflow;
      exports.LucideWrapText = WrapText;
      exports.LucideWrench = Wrench;
      exports.LucideX = X;
      exports.LucideXCircle = XCircle;
      exports.LucideXOctagon = XOctagon;
      exports.LucideXSquare = XSquare;
      exports.LucideYoutube = Youtube;
      exports.LucideZap = Zap;
      exports.LucideZapOff = ZapOff;
      exports.LucideZoomIn = ZoomIn;
      exports.LucideZoomOut = ZoomOut;
      exports.Luggage = Luggage;
      exports.LuggageIcon = Luggage;
      exports.MSquare = MSquare;
      exports.MSquareIcon = MSquare;
      exports.Magnet = Magnet;
      exports.MagnetIcon = Magnet;
      exports.Mail = Mail;
      exports.MailCheck = MailCheck;
      exports.MailCheckIcon = MailCheck;
      exports.MailIcon = Mail;
      exports.MailMinus = MailMinus;
      exports.MailMinusIcon = MailMinus;
      exports.MailOpen = MailOpen;
      exports.MailOpenIcon = MailOpen;
      exports.MailPlus = MailPlus;
      exports.MailPlusIcon = MailPlus;
      exports.MailQuestion = MailQuestion;
      exports.MailQuestionIcon = MailQuestion;
      exports.MailSearch = MailSearch;
      exports.MailSearchIcon = MailSearch;
      exports.MailWarning = MailWarning;
      exports.MailWarningIcon = MailWarning;
      exports.MailX = MailX;
      exports.MailXIcon = MailX;
      exports.Mailbox = Mailbox;
      exports.MailboxIcon = Mailbox;
      exports.Mails = Mails;
      exports.MailsIcon = Mails;
      exports.Map = Map2;
      exports.MapIcon = Map2;
      exports.MapPin = MapPin;
      exports.MapPinIcon = MapPin;
      exports.MapPinOff = MapPinOff;
      exports.MapPinOffIcon = MapPinOff;
      exports.MapPinned = MapPinned;
      exports.MapPinnedIcon = MapPinned;
      exports.Martini = Martini;
      exports.MartiniIcon = Martini;
      exports.Maximize = Maximize;
      exports.Maximize2 = Maximize2;
      exports.Maximize2Icon = Maximize2;
      exports.MaximizeIcon = Maximize;
      exports.Medal = Medal;
      exports.MedalIcon = Medal;
      exports.Megaphone = Megaphone;
      exports.MegaphoneIcon = Megaphone;
      exports.MegaphoneOff = MegaphoneOff;
      exports.MegaphoneOffIcon = MegaphoneOff;
      exports.Meh = Meh;
      exports.MehIcon = Meh;
      exports.MemoryStick = MemoryStick;
      exports.MemoryStickIcon = MemoryStick;
      exports.Menu = Menu;
      exports.MenuIcon = Menu;
      exports.MenuSquare = MenuSquare;
      exports.MenuSquareIcon = MenuSquare;
      exports.Merge = Merge;
      exports.MergeIcon = Merge;
      exports.MessageCircle = MessageCircle;
      exports.MessageCircleCode = MessageCircleCode;
      exports.MessageCircleCodeIcon = MessageCircleCode;
      exports.MessageCircleDashed = MessageCircleDashed;
      exports.MessageCircleDashedIcon = MessageCircleDashed;
      exports.MessageCircleHeart = MessageCircleHeart;
      exports.MessageCircleHeartIcon = MessageCircleHeart;
      exports.MessageCircleIcon = MessageCircle;
      exports.MessageCircleMore = MessageCircleMore;
      exports.MessageCircleMoreIcon = MessageCircleMore;
      exports.MessageCircleOff = MessageCircleOff;
      exports.MessageCircleOffIcon = MessageCircleOff;
      exports.MessageCirclePlus = MessageCirclePlus;
      exports.MessageCirclePlusIcon = MessageCirclePlus;
      exports.MessageCircleQuestion = MessageCircleQuestion;
      exports.MessageCircleQuestionIcon = MessageCircleQuestion;
      exports.MessageCircleReply = MessageCircleReply;
      exports.MessageCircleReplyIcon = MessageCircleReply;
      exports.MessageCircleWarning = MessageCircleWarning;
      exports.MessageCircleWarningIcon = MessageCircleWarning;
      exports.MessageCircleX = MessageCircleX;
      exports.MessageCircleXIcon = MessageCircleX;
      exports.MessageSquare = MessageSquare;
      exports.MessageSquareCode = MessageSquareCode;
      exports.MessageSquareCodeIcon = MessageSquareCode;
      exports.MessageSquareDashed = MessageSquareDashed;
      exports.MessageSquareDashedIcon = MessageSquareDashed;
      exports.MessageSquareDiff = MessageSquareDiff;
      exports.MessageSquareDiffIcon = MessageSquareDiff;
      exports.MessageSquareDot = MessageSquareDot;
      exports.MessageSquareDotIcon = MessageSquareDot;
      exports.MessageSquareHeart = MessageSquareHeart;
      exports.MessageSquareHeartIcon = MessageSquareHeart;
      exports.MessageSquareIcon = MessageSquare;
      exports.MessageSquareMore = MessageSquareMore;
      exports.MessageSquareMoreIcon = MessageSquareMore;
      exports.MessageSquareOff = MessageSquareOff;
      exports.MessageSquareOffIcon = MessageSquareOff;
      exports.MessageSquarePlus = MessageSquarePlus;
      exports.MessageSquarePlusIcon = MessageSquarePlus;
      exports.MessageSquareQuote = MessageSquareQuote;
      exports.MessageSquareQuoteIcon = MessageSquareQuote;
      exports.MessageSquareReply = MessageSquareReply;
      exports.MessageSquareReplyIcon = MessageSquareReply;
      exports.MessageSquareShare = MessageSquareShare;
      exports.MessageSquareShareIcon = MessageSquareShare;
      exports.MessageSquareText = MessageSquareText;
      exports.MessageSquareTextIcon = MessageSquareText;
      exports.MessageSquareWarning = MessageSquareWarning;
      exports.MessageSquareWarningIcon = MessageSquareWarning;
      exports.MessageSquareX = MessageSquareX;
      exports.MessageSquareXIcon = MessageSquareX;
      exports.MessagesSquare = MessagesSquare;
      exports.MessagesSquareIcon = MessagesSquare;
      exports.Mic = Mic;
      exports.Mic2 = Mic2;
      exports.Mic2Icon = Mic2;
      exports.MicIcon = Mic;
      exports.MicOff = MicOff;
      exports.MicOffIcon = MicOff;
      exports.Microscope = Microscope;
      exports.MicroscopeIcon = Microscope;
      exports.Microwave = Microwave;
      exports.MicrowaveIcon = Microwave;
      exports.Milestone = Milestone;
      exports.MilestoneIcon = Milestone;
      exports.Milk = Milk;
      exports.MilkIcon = Milk;
      exports.MilkOff = MilkOff;
      exports.MilkOffIcon = MilkOff;
      exports.Minimize = Minimize;
      exports.Minimize2 = Minimize2;
      exports.Minimize2Icon = Minimize2;
      exports.MinimizeIcon = Minimize;
      exports.Minus = Minus;
      exports.MinusCircle = MinusCircle;
      exports.MinusCircleIcon = MinusCircle;
      exports.MinusIcon = Minus;
      exports.MinusSquare = MinusSquare;
      exports.MinusSquareIcon = MinusSquare;
      exports.Monitor = Monitor;
      exports.MonitorCheck = MonitorCheck;
      exports.MonitorCheckIcon = MonitorCheck;
      exports.MonitorDot = MonitorDot;
      exports.MonitorDotIcon = MonitorDot;
      exports.MonitorDown = MonitorDown;
      exports.MonitorDownIcon = MonitorDown;
      exports.MonitorIcon = Monitor;
      exports.MonitorOff = MonitorOff;
      exports.MonitorOffIcon = MonitorOff;
      exports.MonitorPause = MonitorPause;
      exports.MonitorPauseIcon = MonitorPause;
      exports.MonitorPlay = MonitorPlay;
      exports.MonitorPlayIcon = MonitorPlay;
      exports.MonitorSmartphone = MonitorSmartphone;
      exports.MonitorSmartphoneIcon = MonitorSmartphone;
      exports.MonitorSpeaker = MonitorSpeaker;
      exports.MonitorSpeakerIcon = MonitorSpeaker;
      exports.MonitorStop = MonitorStop;
      exports.MonitorStopIcon = MonitorStop;
      exports.MonitorUp = MonitorUp;
      exports.MonitorUpIcon = MonitorUp;
      exports.MonitorX = MonitorX;
      exports.MonitorXIcon = MonitorX;
      exports.Moon = Moon;
      exports.MoonIcon = Moon;
      exports.MoonStar = MoonStar;
      exports.MoonStarIcon = MoonStar;
      exports.MoreHorizontal = MoreHorizontal;
      exports.MoreHorizontalIcon = MoreHorizontal;
      exports.MoreVertical = MoreVertical;
      exports.MoreVerticalIcon = MoreVertical;
      exports.Mountain = Mountain;
      exports.MountainIcon = Mountain;
      exports.MountainSnow = MountainSnow;
      exports.MountainSnowIcon = MountainSnow;
      exports.Mouse = Mouse;
      exports.MouseIcon = Mouse;
      exports.MousePointer = MousePointer;
      exports.MousePointer2 = MousePointer2;
      exports.MousePointer2Icon = MousePointer2;
      exports.MousePointerClick = MousePointerClick;
      exports.MousePointerClickIcon = MousePointerClick;
      exports.MousePointerIcon = MousePointer;
      exports.MousePointerSquare = MousePointerSquare;
      exports.MousePointerSquareDashed = MousePointerSquareDashed;
      exports.MousePointerSquareDashedIcon = MousePointerSquareDashed;
      exports.MousePointerSquareIcon = MousePointerSquare;
      exports.Move = Move;
      exports.Move3D = Move3d;
      exports.Move3DIcon = Move3d;
      exports.Move3d = Move3d;
      exports.Move3dIcon = Move3d;
      exports.MoveDiagonal = MoveDiagonal;
      exports.MoveDiagonal2 = MoveDiagonal2;
      exports.MoveDiagonal2Icon = MoveDiagonal2;
      exports.MoveDiagonalIcon = MoveDiagonal;
      exports.MoveDown = MoveDown;
      exports.MoveDownIcon = MoveDown;
      exports.MoveDownLeft = MoveDownLeft;
      exports.MoveDownLeftIcon = MoveDownLeft;
      exports.MoveDownRight = MoveDownRight;
      exports.MoveDownRightIcon = MoveDownRight;
      exports.MoveHorizontal = MoveHorizontal;
      exports.MoveHorizontalIcon = MoveHorizontal;
      exports.MoveIcon = Move;
      exports.MoveLeft = MoveLeft;
      exports.MoveLeftIcon = MoveLeft;
      exports.MoveRight = MoveRight;
      exports.MoveRightIcon = MoveRight;
      exports.MoveUp = MoveUp;
      exports.MoveUpIcon = MoveUp;
      exports.MoveUpLeft = MoveUpLeft;
      exports.MoveUpLeftIcon = MoveUpLeft;
      exports.MoveUpRight = MoveUpRight;
      exports.MoveUpRightIcon = MoveUpRight;
      exports.MoveVertical = MoveVertical;
      exports.MoveVerticalIcon = MoveVertical;
      exports.Music = Music;
      exports.Music2 = Music2;
      exports.Music2Icon = Music2;
      exports.Music3 = Music3;
      exports.Music3Icon = Music3;
      exports.Music4 = Music4;
      exports.Music4Icon = Music4;
      exports.MusicIcon = Music;
      exports.Navigation = Navigation;
      exports.Navigation2 = Navigation2;
      exports.Navigation2Icon = Navigation2;
      exports.Navigation2Off = Navigation2Off;
      exports.Navigation2OffIcon = Navigation2Off;
      exports.NavigationIcon = Navigation;
      exports.NavigationOff = NavigationOff;
      exports.NavigationOffIcon = NavigationOff;
      exports.Network = Network;
      exports.NetworkIcon = Network;
      exports.Newspaper = Newspaper;
      exports.NewspaperIcon = Newspaper;
      exports.Nfc = Nfc;
      exports.NfcIcon = Nfc;
      exports.Notebook = Notebook;
      exports.NotebookIcon = Notebook;
      exports.NotebookPen = NotebookPen;
      exports.NotebookPenIcon = NotebookPen;
      exports.NotebookTabs = NotebookTabs;
      exports.NotebookTabsIcon = NotebookTabs;
      exports.NotebookText = NotebookText;
      exports.NotebookTextIcon = NotebookText;
      exports.NotepadText = NotepadText;
      exports.NotepadTextDashed = NotepadTextDashed;
      exports.NotepadTextDashedIcon = NotepadTextDashed;
      exports.NotepadTextIcon = NotepadText;
      exports.Nut = Nut;
      exports.NutIcon = Nut;
      exports.NutOff = NutOff;
      exports.NutOffIcon = NutOff;
      exports.Octagon = Octagon;
      exports.OctagonIcon = Octagon;
      exports.Option = Option;
      exports.OptionIcon = Option;
      exports.Orbit = Orbit;
      exports.OrbitIcon = Orbit;
      exports.Outdent = Outdent;
      exports.OutdentIcon = Outdent;
      exports.Package = Package;
      exports.Package2 = Package2;
      exports.Package2Icon = Package2;
      exports.PackageCheck = PackageCheck;
      exports.PackageCheckIcon = PackageCheck;
      exports.PackageIcon = Package;
      exports.PackageMinus = PackageMinus;
      exports.PackageMinusIcon = PackageMinus;
      exports.PackageOpen = PackageOpen;
      exports.PackageOpenIcon = PackageOpen;
      exports.PackagePlus = PackagePlus;
      exports.PackagePlusIcon = PackagePlus;
      exports.PackageSearch = PackageSearch;
      exports.PackageSearchIcon = PackageSearch;
      exports.PackageX = PackageX;
      exports.PackageXIcon = PackageX;
      exports.PaintBucket = PaintBucket;
      exports.PaintBucketIcon = PaintBucket;
      exports.PaintRoller = PaintRoller;
      exports.PaintRollerIcon = PaintRoller;
      exports.Paintbrush = Paintbrush;
      exports.Paintbrush2 = Paintbrush2;
      exports.Paintbrush2Icon = Paintbrush2;
      exports.PaintbrushIcon = Paintbrush;
      exports.Palette = Palette;
      exports.PaletteIcon = Palette;
      exports.Palmtree = Palmtree;
      exports.PalmtreeIcon = Palmtree;
      exports.PanelBottom = PanelBottom;
      exports.PanelBottomClose = PanelBottomClose;
      exports.PanelBottomCloseIcon = PanelBottomClose;
      exports.PanelBottomDashed = PanelBottomDashed;
      exports.PanelBottomDashedIcon = PanelBottomDashed;
      exports.PanelBottomIcon = PanelBottom;
      exports.PanelBottomInactive = PanelBottomDashed;
      exports.PanelBottomInactiveIcon = PanelBottomDashed;
      exports.PanelBottomOpen = PanelBottomOpen;
      exports.PanelBottomOpenIcon = PanelBottomOpen;
      exports.PanelLeft = PanelLeft;
      exports.PanelLeftClose = PanelLeftClose;
      exports.PanelLeftCloseIcon = PanelLeftClose;
      exports.PanelLeftDashed = PanelLeftDashed;
      exports.PanelLeftDashedIcon = PanelLeftDashed;
      exports.PanelLeftIcon = PanelLeft;
      exports.PanelLeftInactive = PanelLeftDashed;
      exports.PanelLeftInactiveIcon = PanelLeftDashed;
      exports.PanelLeftOpen = PanelLeftOpen;
      exports.PanelLeftOpenIcon = PanelLeftOpen;
      exports.PanelRight = PanelRight;
      exports.PanelRightClose = PanelRightClose;
      exports.PanelRightCloseIcon = PanelRightClose;
      exports.PanelRightDashed = PanelRightDashed;
      exports.PanelRightDashedIcon = PanelRightDashed;
      exports.PanelRightIcon = PanelRight;
      exports.PanelRightInactive = PanelRightDashed;
      exports.PanelRightInactiveIcon = PanelRightDashed;
      exports.PanelRightOpen = PanelRightOpen;
      exports.PanelRightOpenIcon = PanelRightOpen;
      exports.PanelTop = PanelTop;
      exports.PanelTopClose = PanelTopClose;
      exports.PanelTopCloseIcon = PanelTopClose;
      exports.PanelTopDashed = PanelTopDashed;
      exports.PanelTopDashedIcon = PanelTopDashed;
      exports.PanelTopIcon = PanelTop;
      exports.PanelTopInactive = PanelTopDashed;
      exports.PanelTopInactiveIcon = PanelTopDashed;
      exports.PanelTopOpen = PanelTopOpen;
      exports.PanelTopOpenIcon = PanelTopOpen;
      exports.PanelsLeftBottom = PanelsLeftBottom;
      exports.PanelsLeftBottomIcon = PanelsLeftBottom;
      exports.PanelsLeftRight = Columns3;
      exports.PanelsLeftRightIcon = Columns3;
      exports.PanelsRightBottom = PanelsRightBottom;
      exports.PanelsRightBottomIcon = PanelsRightBottom;
      exports.PanelsTopBottom = Rows3;
      exports.PanelsTopBottomIcon = Rows3;
      exports.PanelsTopLeft = PanelsTopLeft;
      exports.PanelsTopLeftIcon = PanelsTopLeft;
      exports.Paperclip = Paperclip;
      exports.PaperclipIcon = Paperclip;
      exports.Parentheses = Parentheses;
      exports.ParenthesesIcon = Parentheses;
      exports.ParkingCircle = ParkingCircle;
      exports.ParkingCircleIcon = ParkingCircle;
      exports.ParkingCircleOff = ParkingCircleOff;
      exports.ParkingCircleOffIcon = ParkingCircleOff;
      exports.ParkingMeter = ParkingMeter;
      exports.ParkingMeterIcon = ParkingMeter;
      exports.ParkingSquare = ParkingSquare;
      exports.ParkingSquareIcon = ParkingSquare;
      exports.ParkingSquareOff = ParkingSquareOff;
      exports.ParkingSquareOffIcon = ParkingSquareOff;
      exports.PartyPopper = PartyPopper;
      exports.PartyPopperIcon = PartyPopper;
      exports.Pause = Pause;
      exports.PauseCircle = PauseCircle;
      exports.PauseCircleIcon = PauseCircle;
      exports.PauseIcon = Pause;
      exports.PauseOctagon = PauseOctagon;
      exports.PauseOctagonIcon = PauseOctagon;
      exports.PawPrint = PawPrint;
      exports.PawPrintIcon = PawPrint;
      exports.PcCase = PcCase;
      exports.PcCaseIcon = PcCase;
      exports.Pen = Pen;
      exports.PenBox = SquarePen;
      exports.PenBoxIcon = SquarePen;
      exports.PenIcon = Pen;
      exports.PenLine = PenLine;
      exports.PenLineIcon = PenLine;
      exports.PenSquare = SquarePen;
      exports.PenSquareIcon = SquarePen;
      exports.PenTool = PenTool;
      exports.PenToolIcon = PenTool;
      exports.Pencil = Pencil;
      exports.PencilIcon = Pencil;
      exports.PencilLine = PencilLine;
      exports.PencilLineIcon = PencilLine;
      exports.PencilRuler = PencilRuler;
      exports.PencilRulerIcon = PencilRuler;
      exports.Pentagon = Pentagon;
      exports.PentagonIcon = Pentagon;
      exports.Percent = Percent;
      exports.PercentCircle = PercentCircle;
      exports.PercentCircleIcon = PercentCircle;
      exports.PercentDiamond = PercentDiamond;
      exports.PercentDiamondIcon = PercentDiamond;
      exports.PercentIcon = Percent;
      exports.PercentSquare = PercentSquare;
      exports.PercentSquareIcon = PercentSquare;
      exports.PersonStanding = PersonStanding;
      exports.PersonStandingIcon = PersonStanding;
      exports.Phone = Phone;
      exports.PhoneCall = PhoneCall;
      exports.PhoneCallIcon = PhoneCall;
      exports.PhoneForwarded = PhoneForwarded;
      exports.PhoneForwardedIcon = PhoneForwarded;
      exports.PhoneIcon = Phone;
      exports.PhoneIncoming = PhoneIncoming;
      exports.PhoneIncomingIcon = PhoneIncoming;
      exports.PhoneMissed = PhoneMissed;
      exports.PhoneMissedIcon = PhoneMissed;
      exports.PhoneOff = PhoneOff;
      exports.PhoneOffIcon = PhoneOff;
      exports.PhoneOutgoing = PhoneOutgoing;
      exports.PhoneOutgoingIcon = PhoneOutgoing;
      exports.Pi = Pi;
      exports.PiIcon = Pi;
      exports.PiSquare = PiSquare;
      exports.PiSquareIcon = PiSquare;
      exports.Piano = Piano;
      exports.PianoIcon = Piano;
      exports.PictureInPicture = PictureInPicture;
      exports.PictureInPicture2 = PictureInPicture2;
      exports.PictureInPicture2Icon = PictureInPicture2;
      exports.PictureInPictureIcon = PictureInPicture;
      exports.PieChart = PieChart;
      exports.PieChartIcon = PieChart;
      exports.PiggyBank = PiggyBank;
      exports.PiggyBankIcon = PiggyBank;
      exports.Pilcrow = Pilcrow;
      exports.PilcrowIcon = Pilcrow;
      exports.PilcrowSquare = PilcrowSquare;
      exports.PilcrowSquareIcon = PilcrowSquare;
      exports.Pill = Pill;
      exports.PillIcon = Pill;
      exports.Pin = Pin;
      exports.PinIcon = Pin;
      exports.PinOff = PinOff;
      exports.PinOffIcon = PinOff;
      exports.Pipette = Pipette;
      exports.PipetteIcon = Pipette;
      exports.Pizza = Pizza;
      exports.PizzaIcon = Pizza;
      exports.Plane = Plane;
      exports.PlaneIcon = Plane;
      exports.PlaneLanding = PlaneLanding;
      exports.PlaneLandingIcon = PlaneLanding;
      exports.PlaneTakeoff = PlaneTakeoff;
      exports.PlaneTakeoffIcon = PlaneTakeoff;
      exports.Play = Play;
      exports.PlayCircle = PlayCircle;
      exports.PlayCircleIcon = PlayCircle;
      exports.PlayIcon = Play;
      exports.PlaySquare = PlaySquare;
      exports.PlaySquareIcon = PlaySquare;
      exports.Plug = Plug;
      exports.Plug2 = Plug2;
      exports.Plug2Icon = Plug2;
      exports.PlugIcon = Plug;
      exports.PlugZap = PlugZap;
      exports.PlugZap2 = PlugZap2;
      exports.PlugZap2Icon = PlugZap2;
      exports.PlugZapIcon = PlugZap;
      exports.Plus = Plus;
      exports.PlusCircle = PlusCircle;
      exports.PlusCircleIcon = PlusCircle;
      exports.PlusIcon = Plus;
      exports.PlusSquare = PlusSquare;
      exports.PlusSquareIcon = PlusSquare;
      exports.Pocket = Pocket;
      exports.PocketIcon = Pocket;
      exports.PocketKnife = PocketKnife;
      exports.PocketKnifeIcon = PocketKnife;
      exports.Podcast = Podcast;
      exports.PodcastIcon = Podcast;
      exports.Pointer = Pointer;
      exports.PointerIcon = Pointer;
      exports.PointerOff = PointerOff;
      exports.PointerOffIcon = PointerOff;
      exports.Popcorn = Popcorn;
      exports.PopcornIcon = Popcorn;
      exports.Popsicle = Popsicle;
      exports.PopsicleIcon = Popsicle;
      exports.PoundSterling = PoundSterling;
      exports.PoundSterlingIcon = PoundSterling;
      exports.Power = Power;
      exports.PowerCircle = PowerCircle;
      exports.PowerCircleIcon = PowerCircle;
      exports.PowerIcon = Power;
      exports.PowerOff = PowerOff;
      exports.PowerOffIcon = PowerOff;
      exports.PowerSquare = PowerSquare;
      exports.PowerSquareIcon = PowerSquare;
      exports.Presentation = Presentation;
      exports.PresentationIcon = Presentation;
      exports.Printer = Printer;
      exports.PrinterIcon = Printer;
      exports.Projector = Projector;
      exports.ProjectorIcon = Projector;
      exports.Puzzle = Puzzle;
      exports.PuzzleIcon = Puzzle;
      exports.Pyramid = Pyramid;
      exports.PyramidIcon = Pyramid;
      exports.QrCode = QrCode;
      exports.QrCodeIcon = QrCode;
      exports.Quote = Quote;
      exports.QuoteIcon = Quote;
      exports.Rabbit = Rabbit;
      exports.RabbitIcon = Rabbit;
      exports.Radar = Radar;
      exports.RadarIcon = Radar;
      exports.Radiation = Radiation;
      exports.RadiationIcon = Radiation;
      exports.Radio = Radio;
      exports.RadioIcon = Radio;
      exports.RadioReceiver = RadioReceiver;
      exports.RadioReceiverIcon = RadioReceiver;
      exports.RadioTower = RadioTower;
      exports.RadioTowerIcon = RadioTower;
      exports.Radius = Radius;
      exports.RadiusIcon = Radius;
      exports.RailSymbol = RailSymbol;
      exports.RailSymbolIcon = RailSymbol;
      exports.Rainbow = Rainbow;
      exports.RainbowIcon = Rainbow;
      exports.Rat = Rat;
      exports.RatIcon = Rat;
      exports.Ratio = Ratio;
      exports.RatioIcon = Ratio;
      exports.Receipt = Receipt;
      exports.ReceiptCent = ReceiptCent;
      exports.ReceiptCentIcon = ReceiptCent;
      exports.ReceiptEuro = ReceiptEuro;
      exports.ReceiptEuroIcon = ReceiptEuro;
      exports.ReceiptIcon = Receipt;
      exports.ReceiptIndianRupee = ReceiptIndianRupee;
      exports.ReceiptIndianRupeeIcon = ReceiptIndianRupee;
      exports.ReceiptJapaneseYen = ReceiptJapaneseYen;
      exports.ReceiptJapaneseYenIcon = ReceiptJapaneseYen;
      exports.ReceiptPoundSterling = ReceiptPoundSterling;
      exports.ReceiptPoundSterlingIcon = ReceiptPoundSterling;
      exports.ReceiptRussianRuble = ReceiptRussianRuble;
      exports.ReceiptRussianRubleIcon = ReceiptRussianRuble;
      exports.ReceiptSwissFranc = ReceiptSwissFranc;
      exports.ReceiptSwissFrancIcon = ReceiptSwissFranc;
      exports.ReceiptText = ReceiptText;
      exports.ReceiptTextIcon = ReceiptText;
      exports.RectangleHorizontal = RectangleHorizontal;
      exports.RectangleHorizontalIcon = RectangleHorizontal;
      exports.RectangleVertical = RectangleVertical;
      exports.RectangleVerticalIcon = RectangleVertical;
      exports.Recycle = Recycle;
      exports.RecycleIcon = Recycle;
      exports.Redo = Redo;
      exports.Redo2 = Redo2;
      exports.Redo2Icon = Redo2;
      exports.RedoDot = RedoDot;
      exports.RedoDotIcon = RedoDot;
      exports.RedoIcon = Redo;
      exports.RefreshCcw = RefreshCcw;
      exports.RefreshCcwDot = RefreshCcwDot;
      exports.RefreshCcwDotIcon = RefreshCcwDot;
      exports.RefreshCcwIcon = RefreshCcw;
      exports.RefreshCw = RefreshCw;
      exports.RefreshCwIcon = RefreshCw;
      exports.RefreshCwOff = RefreshCwOff;
      exports.RefreshCwOffIcon = RefreshCwOff;
      exports.Refrigerator = Refrigerator;
      exports.RefrigeratorIcon = Refrigerator;
      exports.Regex = Regex;
      exports.RegexIcon = Regex;
      exports.RemoveFormatting = RemoveFormatting;
      exports.RemoveFormattingIcon = RemoveFormatting;
      exports.Repeat = Repeat;
      exports.Repeat1 = Repeat1;
      exports.Repeat1Icon = Repeat1;
      exports.Repeat2 = Repeat2;
      exports.Repeat2Icon = Repeat2;
      exports.RepeatIcon = Repeat;
      exports.Replace = Replace;
      exports.ReplaceAll = ReplaceAll;
      exports.ReplaceAllIcon = ReplaceAll;
      exports.ReplaceIcon = Replace;
      exports.Reply = Reply;
      exports.ReplyAll = ReplyAll;
      exports.ReplyAllIcon = ReplyAll;
      exports.ReplyIcon = Reply;
      exports.Rewind = Rewind;
      exports.RewindIcon = Rewind;
      exports.Ribbon = Ribbon;
      exports.RibbonIcon = Ribbon;
      exports.Rocket = Rocket;
      exports.RocketIcon = Rocket;
      exports.RockingChair = RockingChair;
      exports.RockingChairIcon = RockingChair;
      exports.RollerCoaster = RollerCoaster;
      exports.RollerCoasterIcon = RollerCoaster;
      exports.Rotate3D = Rotate3d;
      exports.Rotate3DIcon = Rotate3d;
      exports.Rotate3d = Rotate3d;
      exports.Rotate3dIcon = Rotate3d;
      exports.RotateCcw = RotateCcw;
      exports.RotateCcwIcon = RotateCcw;
      exports.RotateCw = RotateCw;
      exports.RotateCwIcon = RotateCw;
      exports.Route = Route;
      exports.RouteIcon = Route;
      exports.RouteOff = RouteOff;
      exports.RouteOffIcon = RouteOff;
      exports.Router = Router;
      exports.RouterIcon = Router;
      exports.Rows = Rows2;
      exports.Rows2 = Rows2;
      exports.Rows2Icon = Rows2;
      exports.Rows3 = Rows3;
      exports.Rows3Icon = Rows3;
      exports.Rows4 = Rows4;
      exports.Rows4Icon = Rows4;
      exports.RowsIcon = Rows2;
      exports.Rss = Rss;
      exports.RssIcon = Rss;
      exports.Ruler = Ruler;
      exports.RulerIcon = Ruler;
      exports.RussianRuble = RussianRuble;
      exports.RussianRubleIcon = RussianRuble;
      exports.Sailboat = Sailboat;
      exports.SailboatIcon = Sailboat;
      exports.Salad = Salad;
      exports.SaladIcon = Salad;
      exports.Sandwich = Sandwich;
      exports.SandwichIcon = Sandwich;
      exports.Satellite = Satellite;
      exports.SatelliteDish = SatelliteDish;
      exports.SatelliteDishIcon = SatelliteDish;
      exports.SatelliteIcon = Satellite;
      exports.Save = Save;
      exports.SaveAll = SaveAll;
      exports.SaveAllIcon = SaveAll;
      exports.SaveIcon = Save;
      exports.Scale = Scale;
      exports.Scale3D = Scale3d;
      exports.Scale3DIcon = Scale3d;
      exports.Scale3d = Scale3d;
      exports.Scale3dIcon = Scale3d;
      exports.ScaleIcon = Scale;
      exports.Scaling = Scaling;
      exports.ScalingIcon = Scaling;
      exports.Scan = Scan;
      exports.ScanBarcode = ScanBarcode;
      exports.ScanBarcodeIcon = ScanBarcode;
      exports.ScanEye = ScanEye;
      exports.ScanEyeIcon = ScanEye;
      exports.ScanFace = ScanFace;
      exports.ScanFaceIcon = ScanFace;
      exports.ScanIcon = Scan;
      exports.ScanLine = ScanLine;
      exports.ScanLineIcon = ScanLine;
      exports.ScanSearch = ScanSearch;
      exports.ScanSearchIcon = ScanSearch;
      exports.ScanText = ScanText;
      exports.ScanTextIcon = ScanText;
      exports.ScatterChart = ScatterChart;
      exports.ScatterChartIcon = ScatterChart;
      exports.School = School;
      exports.School2 = School2;
      exports.School2Icon = School2;
      exports.SchoolIcon = School;
      exports.Scissors = Scissors;
      exports.ScissorsIcon = Scissors;
      exports.ScissorsLineDashed = ScissorsLineDashed;
      exports.ScissorsLineDashedIcon = ScissorsLineDashed;
      exports.ScissorsSquare = ScissorsSquare;
      exports.ScissorsSquareDashedBottom = ScissorsSquareDashedBottom;
      exports.ScissorsSquareDashedBottomIcon = ScissorsSquareDashedBottom;
      exports.ScissorsSquareIcon = ScissorsSquare;
      exports.ScreenShare = ScreenShare;
      exports.ScreenShareIcon = ScreenShare;
      exports.ScreenShareOff = ScreenShareOff;
      exports.ScreenShareOffIcon = ScreenShareOff;
      exports.Scroll = Scroll;
      exports.ScrollIcon = Scroll;
      exports.ScrollText = ScrollText;
      exports.ScrollTextIcon = ScrollText;
      exports.Search = Search;
      exports.SearchCheck = SearchCheck;
      exports.SearchCheckIcon = SearchCheck;
      exports.SearchCode = SearchCode;
      exports.SearchCodeIcon = SearchCode;
      exports.SearchIcon = Search;
      exports.SearchSlash = SearchSlash;
      exports.SearchSlashIcon = SearchSlash;
      exports.SearchX = SearchX;
      exports.SearchXIcon = SearchX;
      exports.Send = Send;
      exports.SendHorizonal = SendHorizontal;
      exports.SendHorizonalIcon = SendHorizontal;
      exports.SendHorizontal = SendHorizontal;
      exports.SendHorizontalIcon = SendHorizontal;
      exports.SendIcon = Send;
      exports.SendToBack = SendToBack;
      exports.SendToBackIcon = SendToBack;
      exports.SeparatorHorizontal = SeparatorHorizontal;
      exports.SeparatorHorizontalIcon = SeparatorHorizontal;
      exports.SeparatorVertical = SeparatorVertical;
      exports.SeparatorVerticalIcon = SeparatorVertical;
      exports.Server = Server;
      exports.ServerCog = ServerCog;
      exports.ServerCogIcon = ServerCog;
      exports.ServerCrash = ServerCrash;
      exports.ServerCrashIcon = ServerCrash;
      exports.ServerIcon = Server;
      exports.ServerOff = ServerOff;
      exports.ServerOffIcon = ServerOff;
      exports.Settings = Settings;
      exports.Settings2 = Settings2;
      exports.Settings2Icon = Settings2;
      exports.SettingsIcon = Settings;
      exports.Shapes = Shapes;
      exports.ShapesIcon = Shapes;
      exports.Share = Share;
      exports.Share2 = Share2;
      exports.Share2Icon = Share2;
      exports.ShareIcon = Share;
      exports.Sheet = Sheet;
      exports.SheetIcon = Sheet;
      exports.Shell = Shell;
      exports.ShellIcon = Shell;
      exports.Shield = Shield;
      exports.ShieldAlert = ShieldAlert;
      exports.ShieldAlertIcon = ShieldAlert;
      exports.ShieldBan = ShieldBan;
      exports.ShieldBanIcon = ShieldBan;
      exports.ShieldCheck = ShieldCheck;
      exports.ShieldCheckIcon = ShieldCheck;
      exports.ShieldClose = ShieldX;
      exports.ShieldCloseIcon = ShieldX;
      exports.ShieldEllipsis = ShieldEllipsis;
      exports.ShieldEllipsisIcon = ShieldEllipsis;
      exports.ShieldHalf = ShieldHalf;
      exports.ShieldHalfIcon = ShieldHalf;
      exports.ShieldIcon = Shield;
      exports.ShieldMinus = ShieldMinus;
      exports.ShieldMinusIcon = ShieldMinus;
      exports.ShieldOff = ShieldOff;
      exports.ShieldOffIcon = ShieldOff;
      exports.ShieldPlus = ShieldPlus;
      exports.ShieldPlusIcon = ShieldPlus;
      exports.ShieldQuestion = ShieldQuestion;
      exports.ShieldQuestionIcon = ShieldQuestion;
      exports.ShieldX = ShieldX;
      exports.ShieldXIcon = ShieldX;
      exports.Ship = Ship;
      exports.ShipIcon = Ship;
      exports.ShipWheel = ShipWheel;
      exports.ShipWheelIcon = ShipWheel;
      exports.Shirt = Shirt;
      exports.ShirtIcon = Shirt;
      exports.ShoppingBag = ShoppingBag;
      exports.ShoppingBagIcon = ShoppingBag;
      exports.ShoppingBasket = ShoppingBasket;
      exports.ShoppingBasketIcon = ShoppingBasket;
      exports.ShoppingCart = ShoppingCart;
      exports.ShoppingCartIcon = ShoppingCart;
      exports.Shovel = Shovel;
      exports.ShovelIcon = Shovel;
      exports.ShowerHead = ShowerHead;
      exports.ShowerHeadIcon = ShowerHead;
      exports.Shrink = Shrink;
      exports.ShrinkIcon = Shrink;
      exports.Shrub = Shrub;
      exports.ShrubIcon = Shrub;
      exports.Shuffle = Shuffle;
      exports.ShuffleIcon = Shuffle;
      exports.Sidebar = PanelLeft;
      exports.SidebarClose = PanelLeftClose;
      exports.SidebarCloseIcon = PanelLeftClose;
      exports.SidebarIcon = PanelLeft;
      exports.SidebarOpen = PanelLeftOpen;
      exports.SidebarOpenIcon = PanelLeftOpen;
      exports.Sigma = Sigma;
      exports.SigmaIcon = Sigma;
      exports.SigmaSquare = SigmaSquare;
      exports.SigmaSquareIcon = SigmaSquare;
      exports.Signal = Signal;
      exports.SignalHigh = SignalHigh;
      exports.SignalHighIcon = SignalHigh;
      exports.SignalIcon = Signal;
      exports.SignalLow = SignalLow;
      exports.SignalLowIcon = SignalLow;
      exports.SignalMedium = SignalMedium;
      exports.SignalMediumIcon = SignalMedium;
      exports.SignalZero = SignalZero;
      exports.SignalZeroIcon = SignalZero;
      exports.Signpost = Signpost;
      exports.SignpostBig = SignpostBig;
      exports.SignpostBigIcon = SignpostBig;
      exports.SignpostIcon = Signpost;
      exports.Siren = Siren;
      exports.SirenIcon = Siren;
      exports.SkipBack = SkipBack;
      exports.SkipBackIcon = SkipBack;
      exports.SkipForward = SkipForward;
      exports.SkipForwardIcon = SkipForward;
      exports.Skull = Skull;
      exports.SkullIcon = Skull;
      exports.Slack = Slack;
      exports.SlackIcon = Slack;
      exports.Slash = Slash;
      exports.SlashIcon = Slash;
      exports.SlashSquare = SlashSquare;
      exports.SlashSquareIcon = SlashSquare;
      exports.Slice = Slice;
      exports.SliceIcon = Slice;
      exports.Sliders = Sliders;
      exports.SlidersHorizontal = SlidersHorizontal;
      exports.SlidersHorizontalIcon = SlidersHorizontal;
      exports.SlidersIcon = Sliders;
      exports.Smartphone = Smartphone;
      exports.SmartphoneCharging = SmartphoneCharging;
      exports.SmartphoneChargingIcon = SmartphoneCharging;
      exports.SmartphoneIcon = Smartphone;
      exports.SmartphoneNfc = SmartphoneNfc;
      exports.SmartphoneNfcIcon = SmartphoneNfc;
      exports.Smile = Smile;
      exports.SmileIcon = Smile;
      exports.SmilePlus = SmilePlus;
      exports.SmilePlusIcon = SmilePlus;
      exports.Snail = Snail;
      exports.SnailIcon = Snail;
      exports.Snowflake = Snowflake;
      exports.SnowflakeIcon = Snowflake;
      exports.Sofa = Sofa;
      exports.SofaIcon = Sofa;
      exports.SortAsc = ArrowUpNarrowWide;
      exports.SortAscIcon = ArrowUpNarrowWide;
      exports.SortDesc = ArrowDownWideNarrow;
      exports.SortDescIcon = ArrowDownWideNarrow;
      exports.Soup = Soup;
      exports.SoupIcon = Soup;
      exports.Space = Space;
      exports.SpaceIcon = Space;
      exports.Spade = Spade;
      exports.SpadeIcon = Spade;
      exports.Sparkle = Sparkle;
      exports.SparkleIcon = Sparkle;
      exports.Sparkles = Sparkles;
      exports.SparklesIcon = Sparkles;
      exports.Speaker = Speaker;
      exports.SpeakerIcon = Speaker;
      exports.Speech = Speech;
      exports.SpeechIcon = Speech;
      exports.SpellCheck = SpellCheck;
      exports.SpellCheck2 = SpellCheck2;
      exports.SpellCheck2Icon = SpellCheck2;
      exports.SpellCheckIcon = SpellCheck;
      exports.Spline = Spline;
      exports.SplineIcon = Spline;
      exports.Split = Split;
      exports.SplitIcon = Split;
      exports.SplitSquareHorizontal = SplitSquareHorizontal;
      exports.SplitSquareHorizontalIcon = SplitSquareHorizontal;
      exports.SplitSquareVertical = SplitSquareVertical;
      exports.SplitSquareVerticalIcon = SplitSquareVertical;
      exports.SprayCan = SprayCan;
      exports.SprayCanIcon = SprayCan;
      exports.Sprout = Sprout;
      exports.SproutIcon = Sprout;
      exports.Square = Square;
      exports.SquareAsterisk = AsteriskSquare;
      exports.SquareAsteriskIcon = AsteriskSquare;
      exports.SquareCode = CodeSquare;
      exports.SquareCodeIcon = CodeSquare;
      exports.SquareDashedBottom = SquareDashedBottom;
      exports.SquareDashedBottomCode = SquareDashedBottomCode;
      exports.SquareDashedBottomCodeIcon = SquareDashedBottomCode;
      exports.SquareDashedBottomIcon = SquareDashedBottom;
      exports.SquareDot = DotSquare;
      exports.SquareDotIcon = DotSquare;
      exports.SquareEqual = EqualSquare;
      exports.SquareEqualIcon = EqualSquare;
      exports.SquareGantt = GanttChartSquare;
      exports.SquareGanttIcon = GanttChartSquare;
      exports.SquareIcon = Square;
      exports.SquareKanban = KanbanSquare;
      exports.SquareKanbanDashed = KanbanSquareDashed;
      exports.SquareKanbanDashedIcon = KanbanSquareDashed;
      exports.SquareKanbanIcon = KanbanSquare;
      exports.SquarePen = SquarePen;
      exports.SquarePenIcon = SquarePen;
      exports.SquareSlash = SlashSquare;
      exports.SquareSlashIcon = SlashSquare;
      exports.SquareStack = SquareStack;
      exports.SquareStackIcon = SquareStack;
      exports.SquareUser = SquareUser;
      exports.SquareUserIcon = SquareUser;
      exports.SquareUserRound = SquareUserRound;
      exports.SquareUserRoundIcon = SquareUserRound;
      exports.Squircle = Squircle;
      exports.SquircleIcon = Squircle;
      exports.Squirrel = Squirrel;
      exports.SquirrelIcon = Squirrel;
      exports.Stamp = Stamp;
      exports.StampIcon = Stamp;
      exports.Star = Star;
      exports.StarHalf = StarHalf;
      exports.StarHalfIcon = StarHalf;
      exports.StarIcon = Star;
      exports.StarOff = StarOff;
      exports.StarOffIcon = StarOff;
      exports.Stars = Sparkles;
      exports.StarsIcon = Sparkles;
      exports.StepBack = StepBack;
      exports.StepBackIcon = StepBack;
      exports.StepForward = StepForward;
      exports.StepForwardIcon = StepForward;
      exports.Stethoscope = Stethoscope;
      exports.StethoscopeIcon = Stethoscope;
      exports.Sticker = Sticker;
      exports.StickerIcon = Sticker;
      exports.StickyNote = StickyNote;
      exports.StickyNoteIcon = StickyNote;
      exports.StopCircle = StopCircle;
      exports.StopCircleIcon = StopCircle;
      exports.Store = Store;
      exports.StoreIcon = Store;
      exports.StretchHorizontal = StretchHorizontal;
      exports.StretchHorizontalIcon = StretchHorizontal;
      exports.StretchVertical = StretchVertical;
      exports.StretchVerticalIcon = StretchVertical;
      exports.Strikethrough = Strikethrough;
      exports.StrikethroughIcon = Strikethrough;
      exports.Subscript = Subscript;
      exports.SubscriptIcon = Subscript;
      exports.Subtitles = Subtitles;
      exports.SubtitlesIcon = Subtitles;
      exports.Sun = Sun;
      exports.SunDim = SunDim;
      exports.SunDimIcon = SunDim;
      exports.SunIcon = Sun;
      exports.SunMedium = SunMedium;
      exports.SunMediumIcon = SunMedium;
      exports.SunMoon = SunMoon;
      exports.SunMoonIcon = SunMoon;
      exports.SunSnow = SunSnow;
      exports.SunSnowIcon = SunSnow;
      exports.Sunrise = Sunrise;
      exports.SunriseIcon = Sunrise;
      exports.Sunset = Sunset;
      exports.SunsetIcon = Sunset;
      exports.Superscript = Superscript;
      exports.SuperscriptIcon = Superscript;
      exports.SwatchBook = SwatchBook;
      exports.SwatchBookIcon = SwatchBook;
      exports.SwissFranc = SwissFranc;
      exports.SwissFrancIcon = SwissFranc;
      exports.SwitchCamera = SwitchCamera;
      exports.SwitchCameraIcon = SwitchCamera;
      exports.Sword = Sword;
      exports.SwordIcon = Sword;
      exports.Swords = Swords;
      exports.SwordsIcon = Swords;
      exports.Syringe = Syringe;
      exports.SyringeIcon = Syringe;
      exports.Table = Table;
      exports.Table2 = Table2;
      exports.Table2Icon = Table2;
      exports.TableIcon = Table;
      exports.TableProperties = TableProperties;
      exports.TablePropertiesIcon = TableProperties;
      exports.Tablet = Tablet;
      exports.TabletIcon = Tablet;
      exports.TabletSmartphone = TabletSmartphone;
      exports.TabletSmartphoneIcon = TabletSmartphone;
      exports.Tablets = Tablets;
      exports.TabletsIcon = Tablets;
      exports.Tag = Tag;
      exports.TagIcon = Tag;
      exports.Tags = Tags;
      exports.TagsIcon = Tags;
      exports.Tally1 = Tally1;
      exports.Tally1Icon = Tally1;
      exports.Tally2 = Tally2;
      exports.Tally2Icon = Tally2;
      exports.Tally3 = Tally3;
      exports.Tally3Icon = Tally3;
      exports.Tally4 = Tally4;
      exports.Tally4Icon = Tally4;
      exports.Tally5 = Tally5;
      exports.Tally5Icon = Tally5;
      exports.Tangent = Tangent;
      exports.TangentIcon = Tangent;
      exports.Target = Target;
      exports.TargetIcon = Target;
      exports.Tent = Tent;
      exports.TentIcon = Tent;
      exports.TentTree = TentTree;
      exports.TentTreeIcon = TentTree;
      exports.Terminal = Terminal;
      exports.TerminalIcon = Terminal;
      exports.TerminalSquare = TerminalSquare;
      exports.TerminalSquareIcon = TerminalSquare;
      exports.TestTube = TestTube;
      exports.TestTube2 = TestTube2;
      exports.TestTube2Icon = TestTube2;
      exports.TestTubeIcon = TestTube;
      exports.TestTubes = TestTubes;
      exports.TestTubesIcon = TestTubes;
      exports.Text = Text;
      exports.TextCursor = TextCursor;
      exports.TextCursorIcon = TextCursor;
      exports.TextCursorInput = TextCursorInput;
      exports.TextCursorInputIcon = TextCursorInput;
      exports.TextIcon = Text;
      exports.TextQuote = TextQuote;
      exports.TextQuoteIcon = TextQuote;
      exports.TextSearch = TextSearch;
      exports.TextSearchIcon = TextSearch;
      exports.TextSelect = TextSelect;
      exports.TextSelectIcon = TextSelect;
      exports.TextSelection = TextSelect;
      exports.TextSelectionIcon = TextSelect;
      exports.Theater = Theater;
      exports.TheaterIcon = Theater;
      exports.Thermometer = Thermometer;
      exports.ThermometerIcon = Thermometer;
      exports.ThermometerSnowflake = ThermometerSnowflake;
      exports.ThermometerSnowflakeIcon = ThermometerSnowflake;
      exports.ThermometerSun = ThermometerSun;
      exports.ThermometerSunIcon = ThermometerSun;
      exports.ThumbsDown = ThumbsDown;
      exports.ThumbsDownIcon = ThumbsDown;
      exports.ThumbsUp = ThumbsUp;
      exports.ThumbsUpIcon = ThumbsUp;
      exports.Ticket = Ticket;
      exports.TicketCheck = TicketCheck;
      exports.TicketCheckIcon = TicketCheck;
      exports.TicketIcon = Ticket;
      exports.TicketMinus = TicketMinus;
      exports.TicketMinusIcon = TicketMinus;
      exports.TicketPercent = TicketPercent;
      exports.TicketPercentIcon = TicketPercent;
      exports.TicketPlus = TicketPlus;
      exports.TicketPlusIcon = TicketPlus;
      exports.TicketSlash = TicketSlash;
      exports.TicketSlashIcon = TicketSlash;
      exports.TicketX = TicketX;
      exports.TicketXIcon = TicketX;
      exports.Timer = Timer;
      exports.TimerIcon = Timer;
      exports.TimerOff = TimerOff;
      exports.TimerOffIcon = TimerOff;
      exports.TimerReset = TimerReset;
      exports.TimerResetIcon = TimerReset;
      exports.ToggleLeft = ToggleLeft;
      exports.ToggleLeftIcon = ToggleLeft;
      exports.ToggleRight = ToggleRight;
      exports.ToggleRightIcon = ToggleRight;
      exports.Tornado = Tornado;
      exports.TornadoIcon = Tornado;
      exports.Torus = Torus;
      exports.TorusIcon = Torus;
      exports.Touchpad = Touchpad;
      exports.TouchpadIcon = Touchpad;
      exports.TouchpadOff = TouchpadOff;
      exports.TouchpadOffIcon = TouchpadOff;
      exports.TowerControl = TowerControl;
      exports.TowerControlIcon = TowerControl;
      exports.ToyBrick = ToyBrick;
      exports.ToyBrickIcon = ToyBrick;
      exports.Tractor = Tractor;
      exports.TractorIcon = Tractor;
      exports.TrafficCone = TrafficCone;
      exports.TrafficConeIcon = TrafficCone;
      exports.Train = TramFront;
      exports.TrainFront = TrainFront;
      exports.TrainFrontIcon = TrainFront;
      exports.TrainFrontTunnel = TrainFrontTunnel;
      exports.TrainFrontTunnelIcon = TrainFrontTunnel;
      exports.TrainIcon = TramFront;
      exports.TrainTrack = TrainTrack;
      exports.TrainTrackIcon = TrainTrack;
      exports.TramFront = TramFront;
      exports.TramFrontIcon = TramFront;
      exports.Trash = Trash;
      exports.Trash2 = Trash2;
      exports.Trash2Icon = Trash2;
      exports.TrashIcon = Trash;
      exports.TreeDeciduous = TreeDeciduous;
      exports.TreeDeciduousIcon = TreeDeciduous;
      exports.TreePine = TreePine;
      exports.TreePineIcon = TreePine;
      exports.Trees = Trees;
      exports.TreesIcon = Trees;
      exports.Trello = Trello;
      exports.TrelloIcon = Trello;
      exports.TrendingDown = TrendingDown;
      exports.TrendingDownIcon = TrendingDown;
      exports.TrendingUp = TrendingUp;
      exports.TrendingUpIcon = TrendingUp;
      exports.Triangle = Triangle;
      exports.TriangleIcon = Triangle;
      exports.TriangleRight = TriangleRight;
      exports.TriangleRightIcon = TriangleRight;
      exports.Trophy = Trophy;
      exports.TrophyIcon = Trophy;
      exports.Truck = Truck;
      exports.TruckIcon = Truck;
      exports.Turtle = Turtle;
      exports.TurtleIcon = Turtle;
      exports.Tv = Tv;
      exports.Tv2 = Tv2;
      exports.Tv2Icon = Tv2;
      exports.TvIcon = Tv;
      exports.Twitch = Twitch;
      exports.TwitchIcon = Twitch;
      exports.Twitter = Twitter;
      exports.TwitterIcon = Twitter;
      exports.Type = Type;
      exports.TypeIcon = Type;
      exports.Umbrella = Umbrella;
      exports.UmbrellaIcon = Umbrella;
      exports.UmbrellaOff = UmbrellaOff;
      exports.UmbrellaOffIcon = UmbrellaOff;
      exports.Underline = Underline;
      exports.UnderlineIcon = Underline;
      exports.Undo = Undo;
      exports.Undo2 = Undo2;
      exports.Undo2Icon = Undo2;
      exports.UndoDot = UndoDot;
      exports.UndoDotIcon = UndoDot;
      exports.UndoIcon = Undo;
      exports.UnfoldHorizontal = UnfoldHorizontal;
      exports.UnfoldHorizontalIcon = UnfoldHorizontal;
      exports.UnfoldVertical = UnfoldVertical;
      exports.UnfoldVerticalIcon = UnfoldVertical;
      exports.Ungroup = Ungroup;
      exports.UngroupIcon = Ungroup;
      exports.Unlink = Unlink;
      exports.Unlink2 = Unlink2;
      exports.Unlink2Icon = Unlink2;
      exports.UnlinkIcon = Unlink;
      exports.Unlock = Unlock;
      exports.UnlockIcon = Unlock;
      exports.UnlockKeyhole = UnlockKeyhole;
      exports.UnlockKeyholeIcon = UnlockKeyhole;
      exports.Unplug = Unplug;
      exports.UnplugIcon = Unplug;
      exports.Upload = Upload;
      exports.UploadCloud = UploadCloud;
      exports.UploadCloudIcon = UploadCloud;
      exports.UploadIcon = Upload;
      exports.Usb = Usb;
      exports.UsbIcon = Usb;
      exports.User = User;
      exports.User2 = UserRound;
      exports.User2Icon = UserRound;
      exports.UserCheck = UserCheck;
      exports.UserCheck2 = UserRoundCheck;
      exports.UserCheck2Icon = UserRoundCheck;
      exports.UserCheckIcon = UserCheck;
      exports.UserCircle = CircleUser;
      exports.UserCircle2 = CircleUserRound;
      exports.UserCircle2Icon = CircleUserRound;
      exports.UserCircleIcon = CircleUser;
      exports.UserCog = UserCog;
      exports.UserCog2 = UserRoundCog;
      exports.UserCog2Icon = UserRoundCog;
      exports.UserCogIcon = UserCog;
      exports.UserIcon = User;
      exports.UserMinus = UserMinus;
      exports.UserMinus2 = UserRoundMinus;
      exports.UserMinus2Icon = UserRoundMinus;
      exports.UserMinusIcon = UserMinus;
      exports.UserPlus = UserPlus;
      exports.UserPlus2 = UserRoundPlus;
      exports.UserPlus2Icon = UserRoundPlus;
      exports.UserPlusIcon = UserPlus;
      exports.UserRound = UserRound;
      exports.UserRoundCheck = UserRoundCheck;
      exports.UserRoundCheckIcon = UserRoundCheck;
      exports.UserRoundCog = UserRoundCog;
      exports.UserRoundCogIcon = UserRoundCog;
      exports.UserRoundIcon = UserRound;
      exports.UserRoundMinus = UserRoundMinus;
      exports.UserRoundMinusIcon = UserRoundMinus;
      exports.UserRoundPlus = UserRoundPlus;
      exports.UserRoundPlusIcon = UserRoundPlus;
      exports.UserRoundSearch = UserRoundSearch;
      exports.UserRoundSearchIcon = UserRoundSearch;
      exports.UserRoundX = UserRoundX;
      exports.UserRoundXIcon = UserRoundX;
      exports.UserSearch = UserSearch;
      exports.UserSearchIcon = UserSearch;
      exports.UserSquare = SquareUser;
      exports.UserSquare2 = SquareUserRound;
      exports.UserSquare2Icon = SquareUserRound;
      exports.UserSquareIcon = SquareUser;
      exports.UserX = UserX;
      exports.UserX2 = UserRoundX;
      exports.UserX2Icon = UserRoundX;
      exports.UserXIcon = UserX;
      exports.Users = Users;
      exports.Users2 = UsersRound;
      exports.Users2Icon = UsersRound;
      exports.UsersIcon = Users;
      exports.UsersRound = UsersRound;
      exports.UsersRoundIcon = UsersRound;
      exports.Utensils = Utensils;
      exports.UtensilsCrossed = UtensilsCrossed;
      exports.UtensilsCrossedIcon = UtensilsCrossed;
      exports.UtensilsIcon = Utensils;
      exports.UtilityPole = UtilityPole;
      exports.UtilityPoleIcon = UtilityPole;
      exports.Variable = Variable;
      exports.VariableIcon = Variable;
      exports.Vault = Vault;
      exports.VaultIcon = Vault;
      exports.Vegan = Vegan;
      exports.VeganIcon = Vegan;
      exports.VenetianMask = VenetianMask;
      exports.VenetianMaskIcon = VenetianMask;
      exports.Verified = BadgeCheck;
      exports.VerifiedIcon = BadgeCheck;
      exports.Vibrate = Vibrate;
      exports.VibrateIcon = Vibrate;
      exports.VibrateOff = VibrateOff;
      exports.VibrateOffIcon = VibrateOff;
      exports.Video = Video;
      exports.VideoIcon = Video;
      exports.VideoOff = VideoOff;
      exports.VideoOffIcon = VideoOff;
      exports.Videotape = Videotape;
      exports.VideotapeIcon = Videotape;
      exports.View = View;
      exports.ViewIcon = View;
      exports.Voicemail = Voicemail;
      exports.VoicemailIcon = Voicemail;
      exports.Volume = Volume;
      exports.Volume1 = Volume1;
      exports.Volume1Icon = Volume1;
      exports.Volume2 = Volume2;
      exports.Volume2Icon = Volume2;
      exports.VolumeIcon = Volume;
      exports.VolumeX = VolumeX;
      exports.VolumeXIcon = VolumeX;
      exports.Vote = Vote;
      exports.VoteIcon = Vote;
      exports.Wallet = Wallet;
      exports.Wallet2 = Wallet2;
      exports.Wallet2Icon = Wallet2;
      exports.WalletCards = WalletCards;
      exports.WalletCardsIcon = WalletCards;
      exports.WalletIcon = Wallet;
      exports.Wallpaper = Wallpaper;
      exports.WallpaperIcon = Wallpaper;
      exports.Wand = Wand;
      exports.Wand2 = Wand2;
      exports.Wand2Icon = Wand2;
      exports.WandIcon = Wand;
      exports.Warehouse = Warehouse;
      exports.WarehouseIcon = Warehouse;
      exports.WashingMachine = WashingMachine;
      exports.WashingMachineIcon = WashingMachine;
      exports.Watch = Watch;
      exports.WatchIcon = Watch;
      exports.Waves = Waves;
      exports.WavesIcon = Waves;
      exports.Waypoints = Waypoints;
      exports.WaypointsIcon = Waypoints;
      exports.Webcam = Webcam;
      exports.WebcamIcon = Webcam;
      exports.Webhook = Webhook;
      exports.WebhookIcon = Webhook;
      exports.WebhookOff = WebhookOff;
      exports.WebhookOffIcon = WebhookOff;
      exports.Weight = Weight;
      exports.WeightIcon = Weight;
      exports.Wheat = Wheat;
      exports.WheatIcon = Wheat;
      exports.WheatOff = WheatOff;
      exports.WheatOffIcon = WheatOff;
      exports.WholeWord = WholeWord;
      exports.WholeWordIcon = WholeWord;
      exports.Wifi = Wifi;
      exports.WifiIcon = Wifi;
      exports.WifiOff = WifiOff;
      exports.WifiOffIcon = WifiOff;
      exports.Wind = Wind;
      exports.WindIcon = Wind;
      exports.Wine = Wine;
      exports.WineIcon = Wine;
      exports.WineOff = WineOff;
      exports.WineOffIcon = WineOff;
      exports.Workflow = Workflow;
      exports.WorkflowIcon = Workflow;
      exports.WrapText = WrapText;
      exports.WrapTextIcon = WrapText;
      exports.Wrench = Wrench;
      exports.WrenchIcon = Wrench;
      exports.X = X;
      exports.XCircle = XCircle;
      exports.XCircleIcon = XCircle;
      exports.XIcon = X;
      exports.XOctagon = XOctagon;
      exports.XOctagonIcon = XOctagon;
      exports.XSquare = XSquare;
      exports.XSquareIcon = XSquare;
      exports.Youtube = Youtube;
      exports.YoutubeIcon = Youtube;
      exports.Zap = Zap;
      exports.ZapIcon = Zap;
      exports.ZapOff = ZapOff;
      exports.ZapOffIcon = ZapOff;
      exports.ZoomIn = ZoomIn;
      exports.ZoomInIcon = ZoomIn;
      exports.ZoomOut = ZoomOut;
      exports.ZoomOutIcon = ZoomOut;
      exports.createLucideIcon = createLucideIcon;
      exports.icons = index;
    }
  });

  // node_modules/axios/dist/browser/axios.cjs
  var require_axios = __commonJS({
    "node_modules/axios/dist/browser/axios.cjs"(exports, module) {
      "use strict";
      function bind(fn, thisArg) {
        return function wrap() {
          return fn.apply(thisArg, arguments);
        };
      }
      var { toString } = Object.prototype;
      var { getPrototypeOf } = Object;
      var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
        const str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      })(/* @__PURE__ */ Object.create(null));
      var kindOfTest = (type) => {
        type = type.toLowerCase();
        return (thing) => kindOf(thing) === type;
      };
      var typeOfTest = (type) => (thing) => typeof thing === type;
      var { isArray } = Array;
      var isUndefined = typeOfTest("undefined");
      function isBuffer(val) {
        return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
      }
      var isArrayBuffer = kindOfTest("ArrayBuffer");
      function isArrayBufferView(val) {
        let result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && isArrayBuffer(val.buffer);
        }
        return result;
      }
      var isString = typeOfTest("string");
      var isFunction = typeOfTest("function");
      var isNumber = typeOfTest("number");
      var isObject = (thing) => thing !== null && typeof thing === "object";
      var isBoolean = (thing) => thing === true || thing === false;
      var isPlainObject = (val) => {
        if (kindOf(val) !== "object") {
          return false;
        }
        const prototype2 = getPrototypeOf(val);
        return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
      };
      var isDate = kindOfTest("Date");
      var isFile = kindOfTest("File");
      var isBlob = kindOfTest("Blob");
      var isFileList = kindOfTest("FileList");
      var isStream = (val) => isObject(val) && isFunction(val.pipe);
      var isFormData = (thing) => {
        let kind;
        return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
        kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
      };
      var isURLSearchParams = kindOfTest("URLSearchParams");
      var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
      var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      function forEach(obj, fn, { allOwnKeys = false } = {}) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        let i;
        let l;
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray(obj)) {
          for (i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
          const len = keys.length;
          let key;
          for (i = 0; i < len; i++) {
            key = keys[i];
            fn.call(null, obj[key], key, obj);
          }
        }
      }
      function findKey(obj, key) {
        key = key.toLowerCase();
        const keys = Object.keys(obj);
        let i = keys.length;
        let _key;
        while (i-- > 0) {
          _key = keys[i];
          if (key === _key.toLowerCase()) {
            return _key;
          }
        }
        return null;
      }
      var _global = (() => {
        if (typeof globalThis !== "undefined")
          return globalThis;
        return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
      })();
      var isContextDefined = (context) => !isUndefined(context) && context !== _global;
      function merge() {
        const { caseless } = isContextDefined(this) && this || {};
        const result = {};
        const assignValue = (val, key) => {
          const targetKey = caseless && findKey(result, key) || key;
          if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
            result[targetKey] = merge(result[targetKey], val);
          } else if (isPlainObject(val)) {
            result[targetKey] = merge({}, val);
          } else if (isArray(val)) {
            result[targetKey] = val.slice();
          } else {
            result[targetKey] = val;
          }
        };
        for (let i = 0, l = arguments.length; i < l; i++) {
          arguments[i] && forEach(arguments[i], assignValue);
        }
        return result;
      }
      var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
        forEach(b, (val, key) => {
          if (thisArg && isFunction(val)) {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        }, { allOwnKeys });
        return a;
      };
      var stripBOM = (content) => {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      };
      var inherits = (constructor, superConstructor, props, descriptors2) => {
        constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
        constructor.prototype.constructor = constructor;
        Object.defineProperty(constructor, "super", {
          value: superConstructor.prototype
        });
        props && Object.assign(constructor.prototype, props);
      };
      var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
        let props;
        let i;
        let prop;
        const merged = {};
        destObj = destObj || {};
        if (sourceObj == null)
          return destObj;
        do {
          props = Object.getOwnPropertyNames(sourceObj);
          i = props.length;
          while (i-- > 0) {
            prop = props[i];
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
              destObj[prop] = sourceObj[prop];
              merged[prop] = true;
            }
          }
          sourceObj = filter !== false && getPrototypeOf(sourceObj);
        } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
        return destObj;
      };
      var endsWith = (str, searchString, position) => {
        str = String(str);
        if (position === void 0 || position > str.length) {
          position = str.length;
        }
        position -= searchString.length;
        const lastIndex = str.indexOf(searchString, position);
        return lastIndex !== -1 && lastIndex === position;
      };
      var toArray = (thing) => {
        if (!thing)
          return null;
        if (isArray(thing))
          return thing;
        let i = thing.length;
        if (!isNumber(i))
          return null;
        const arr = new Array(i);
        while (i-- > 0) {
          arr[i] = thing[i];
        }
        return arr;
      };
      var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
        return (thing) => {
          return TypedArray && thing instanceof TypedArray;
        };
      })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
      var forEachEntry = (obj, fn) => {
        const generator = obj && obj[Symbol.iterator];
        const iterator = generator.call(obj);
        let result;
        while ((result = iterator.next()) && !result.done) {
          const pair = result.value;
          fn.call(obj, pair[0], pair[1]);
        }
      };
      var matchAll = (regExp, str) => {
        let matches;
        const arr = [];
        while ((matches = regExp.exec(str)) !== null) {
          arr.push(matches);
        }
        return arr;
      };
      var isHTMLForm = kindOfTest("HTMLFormElement");
      var toCamelCase = (str) => {
        return str.toLowerCase().replace(
          /[-_\s]([a-z\d])(\w*)/g,
          function replacer(m, p1, p2) {
            return p1.toUpperCase() + p2;
          }
        );
      };
      var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
      var isRegExp = kindOfTest("RegExp");
      var reduceDescriptors = (obj, reducer) => {
        const descriptors2 = Object.getOwnPropertyDescriptors(obj);
        const reducedDescriptors = {};
        forEach(descriptors2, (descriptor, name) => {
          let ret;
          if ((ret = reducer(descriptor, name, obj)) !== false) {
            reducedDescriptors[name] = ret || descriptor;
          }
        });
        Object.defineProperties(obj, reducedDescriptors);
      };
      var freezeMethods = (obj) => {
        reduceDescriptors(obj, (descriptor, name) => {
          if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
            return false;
          }
          const value = obj[name];
          if (!isFunction(value))
            return;
          descriptor.enumerable = false;
          if ("writable" in descriptor) {
            descriptor.writable = false;
            return;
          }
          if (!descriptor.set) {
            descriptor.set = () => {
              throw Error("Can not rewrite read-only method '" + name + "'");
            };
          }
        });
      };
      var toObjectSet = (arrayOrString, delimiter) => {
        const obj = {};
        const define = (arr) => {
          arr.forEach((value) => {
            obj[value] = true;
          });
        };
        isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
        return obj;
      };
      var noop = () => {
      };
      var toFiniteNumber = (value, defaultValue) => {
        return value != null && Number.isFinite(value = +value) ? value : defaultValue;
      };
      var ALPHA = "abcdefghijklmnopqrstuvwxyz";
      var DIGIT = "0123456789";
      var ALPHABET = {
        DIGIT,
        ALPHA,
        ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
      };
      var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
        let str = "";
        const { length } = alphabet;
        while (size--) {
          str += alphabet[Math.random() * length | 0];
        }
        return str;
      };
      function isSpecCompliantForm(thing) {
        return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
      }
      var toJSONObject = (obj) => {
        const stack = new Array(10);
        const visit = (source, i) => {
          if (isObject(source)) {
            if (stack.indexOf(source) >= 0) {
              return;
            }
            if (!("toJSON" in source)) {
              stack[i] = source;
              const target = isArray(source) ? [] : {};
              forEach(source, (value, key) => {
                const reducedValue = visit(value, i + 1);
                !isUndefined(reducedValue) && (target[key] = reducedValue);
              });
              stack[i] = void 0;
              return target;
            }
          }
          return source;
        };
        return visit(obj, 0);
      };
      var isAsyncFn = kindOfTest("AsyncFunction");
      var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
      var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
        if (setImmediateSupported) {
          return setImmediate;
        }
        return postMessageSupported ? ((token, callbacks) => {
          _global.addEventListener("message", ({ source, data }) => {
            if (source === _global && data === token) {
              callbacks.length && callbacks.shift()();
            }
          }, false);
          return (cb) => {
            callbacks.push(cb);
            _global.postMessage(token, "*");
          };
        })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
      })(
        typeof setImmediate === "function",
        isFunction(_global.postMessage)
      );
      var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
      var utils$1 = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString,
        isNumber,
        isBoolean,
        isObject,
        isPlainObject,
        isReadableStream,
        isRequest,
        isResponse,
        isHeaders,
        isUndefined,
        isDate,
        isFile,
        isBlob,
        isRegExp,
        isFunction,
        isStream,
        isURLSearchParams,
        isTypedArray,
        isFileList,
        forEach,
        merge,
        extend,
        trim,
        stripBOM,
        inherits,
        toFlatObject,
        kindOf,
        kindOfTest,
        endsWith,
        toArray,
        forEachEntry,
        matchAll,
        isHTMLForm,
        hasOwnProperty,
        hasOwnProp: hasOwnProperty,
        // an alias to avoid ESLint no-prototype-builtins detection
        reduceDescriptors,
        freezeMethods,
        toObjectSet,
        toCamelCase,
        noop,
        toFiniteNumber,
        findKey,
        global: _global,
        isContextDefined,
        ALPHABET,
        generateString,
        isSpecCompliantForm,
        toJSONObject,
        isAsyncFn,
        isThenable,
        setImmediate: _setImmediate,
        asap
      };
      function AxiosError(message, code, config, request, response) {
        Error.call(this);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack;
        }
        this.message = message;
        this.name = "AxiosError";
        code && (this.code = code);
        config && (this.config = config);
        request && (this.request = request);
        if (response) {
          this.response = response;
          this.status = response.status ? response.status : null;
        }
      }
      utils$1.inherits(AxiosError, Error, {
        toJSON: function toJSON() {
          return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: utils$1.toJSONObject(this.config),
            code: this.code,
            status: this.status
          };
        }
      });
      var prototype$1 = AxiosError.prototype;
      var descriptors = {};
      [
        "ERR_BAD_OPTION_VALUE",
        "ERR_BAD_OPTION",
        "ECONNABORTED",
        "ETIMEDOUT",
        "ERR_NETWORK",
        "ERR_FR_TOO_MANY_REDIRECTS",
        "ERR_DEPRECATED",
        "ERR_BAD_RESPONSE",
        "ERR_BAD_REQUEST",
        "ERR_CANCELED",
        "ERR_NOT_SUPPORT",
        "ERR_INVALID_URL"
        // eslint-disable-next-line func-names
      ].forEach((code) => {
        descriptors[code] = { value: code };
      });
      Object.defineProperties(AxiosError, descriptors);
      Object.defineProperty(prototype$1, "isAxiosError", { value: true });
      AxiosError.from = (error, code, config, request, response, customProps) => {
        const axiosError = Object.create(prototype$1);
        utils$1.toFlatObject(error, axiosError, function filter(obj) {
          return obj !== Error.prototype;
        }, (prop) => {
          return prop !== "isAxiosError";
        });
        AxiosError.call(axiosError, error.message, code, config, request, response);
        axiosError.cause = error;
        axiosError.name = error.name;
        customProps && Object.assign(axiosError, customProps);
        return axiosError;
      };
      var httpAdapter = null;
      function isVisitable(thing) {
        return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
      }
      function removeBrackets(key) {
        return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
      }
      function renderKey(path, key, dots) {
        if (!path)
          return key;
        return path.concat(key).map(function each(token, i) {
          token = removeBrackets(token);
          return !dots && i ? "[" + token + "]" : token;
        }).join(dots ? "." : "");
      }
      function isFlatArray(arr) {
        return utils$1.isArray(arr) && !arr.some(isVisitable);
      }
      var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
        return /^is[A-Z]/.test(prop);
      });
      function toFormData(obj, formData, options) {
        if (!utils$1.isObject(obj)) {
          throw new TypeError("target must be an object");
        }
        formData = formData || new FormData();
        options = utils$1.toFlatObject(options, {
          metaTokens: true,
          dots: false,
          indexes: false
        }, false, function defined(option, source) {
          return !utils$1.isUndefined(source[option]);
        });
        const metaTokens = options.metaTokens;
        const visitor = options.visitor || defaultVisitor;
        const dots = options.dots;
        const indexes = options.indexes;
        const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
        const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
        if (!utils$1.isFunction(visitor)) {
          throw new TypeError("visitor must be a function");
        }
        function convertValue(value) {
          if (value === null)
            return "";
          if (utils$1.isDate(value)) {
            return value.toISOString();
          }
          if (!useBlob && utils$1.isBlob(value)) {
            throw new AxiosError("Blob is not supported. Use a Buffer instead.");
          }
          if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
            return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
          }
          return value;
        }
        function defaultVisitor(value, key, path) {
          let arr = value;
          if (value && !path && typeof value === "object") {
            if (utils$1.endsWith(key, "{}")) {
              key = metaTokens ? key : key.slice(0, -2);
              value = JSON.stringify(value);
            } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
              key = removeBrackets(key);
              arr.forEach(function each(el, index) {
                !(utils$1.isUndefined(el) || el === null) && formData.append(
                  // eslint-disable-next-line no-nested-ternary
                  indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                  convertValue(el)
                );
              });
              return false;
            }
          }
          if (isVisitable(value)) {
            return true;
          }
          formData.append(renderKey(path, key, dots), convertValue(value));
          return false;
        }
        const stack = [];
        const exposedHelpers = Object.assign(predicates, {
          defaultVisitor,
          convertValue,
          isVisitable
        });
        function build(value, path) {
          if (utils$1.isUndefined(value))
            return;
          if (stack.indexOf(value) !== -1) {
            throw Error("Circular reference detected in " + path.join("."));
          }
          stack.push(value);
          utils$1.forEach(value, function each(el, key) {
            const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
              formData,
              el,
              utils$1.isString(key) ? key.trim() : key,
              path,
              exposedHelpers
            );
            if (result === true) {
              build(el, path ? path.concat(key) : [key]);
            }
          });
          stack.pop();
        }
        if (!utils$1.isObject(obj)) {
          throw new TypeError("data must be an object");
        }
        build(obj);
        return formData;
      }
      function encode$1(str) {
        const charMap = {
          "!": "%21",
          "'": "%27",
          "(": "%28",
          ")": "%29",
          "~": "%7E",
          "%20": "+",
          "%00": "\0"
        };
        return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
          return charMap[match];
        });
      }
      function AxiosURLSearchParams(params, options) {
        this._pairs = [];
        params && toFormData(params, this, options);
      }
      var prototype = AxiosURLSearchParams.prototype;
      prototype.append = function append(name, value) {
        this._pairs.push([name, value]);
      };
      prototype.toString = function toString2(encoder) {
        const _encode = encoder ? function(value) {
          return encoder.call(this, value, encode$1);
        } : encode$1;
        return this._pairs.map(function each(pair) {
          return _encode(pair[0]) + "=" + _encode(pair[1]);
        }, "").join("&");
      };
      function encode(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      function buildURL(url, params, options) {
        if (!params) {
          return url;
        }
        const _encode = options && options.encode || encode;
        if (utils$1.isFunction(options)) {
          options = {
            serialize: options
          };
        }
        const serializeFn = options && options.serialize;
        let serializedParams;
        if (serializeFn) {
          serializedParams = serializeFn(params, options);
        } else {
          serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
        }
        if (serializedParams) {
          const hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      }
      var InterceptorManager = class {
        constructor() {
          this.handlers = [];
        }
        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        use(fulfilled, rejected, options) {
          this.handlers.push({
            fulfilled,
            rejected,
            synchronous: options ? options.synchronous : false,
            runWhen: options ? options.runWhen : null
          });
          return this.handlers.length - 1;
        }
        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         *
         * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
         */
        eject(id) {
          if (this.handlers[id]) {
            this.handlers[id] = null;
          }
        }
        /**
         * Clear all interceptors from the stack
         *
         * @returns {void}
         */
        clear() {
          if (this.handlers) {
            this.handlers = [];
          }
        }
        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         *
         * @returns {void}
         */
        forEach(fn) {
          utils$1.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
              fn(h);
            }
          });
        }
      };
      var InterceptorManager$1 = InterceptorManager;
      var transitionalDefaults = {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      };
      var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
      var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
      var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
      var platform$1 = {
        isBrowser: true,
        classes: {
          URLSearchParams: URLSearchParams$1,
          FormData: FormData$1,
          Blob: Blob$1
        },
        protocols: ["http", "https", "file", "blob", "url", "data"]
      };
      var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
      var _navigator = typeof navigator === "object" && navigator || void 0;
      var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
      var hasStandardBrowserWebWorkerEnv = (() => {
        return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
        self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
      })();
      var origin = hasBrowserEnv && window.location.href || "http://localhost";
      var utils = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        hasBrowserEnv,
        hasStandardBrowserWebWorkerEnv,
        hasStandardBrowserEnv,
        navigator: _navigator,
        origin
      });
      var platform = {
        ...utils,
        ...platform$1
      };
      function toURLEncodedForm(data, options) {
        return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
          visitor: function(value, key, path, helpers) {
            if (platform.isNode && utils$1.isBuffer(value)) {
              this.append(key, value.toString("base64"));
              return false;
            }
            return helpers.defaultVisitor.apply(this, arguments);
          }
        }, options));
      }
      function parsePropPath(name) {
        return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
          return match[0] === "[]" ? "" : match[1] || match[0];
        });
      }
      function arrayToObject(arr) {
        const obj = {};
        const keys = Object.keys(arr);
        let i;
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          obj[key] = arr[key];
        }
        return obj;
      }
      function formDataToJSON(formData) {
        function buildPath(path, value, target, index) {
          let name = path[index++];
          if (name === "__proto__")
            return true;
          const isNumericKey = Number.isFinite(+name);
          const isLast = index >= path.length;
          name = !name && utils$1.isArray(target) ? target.length : name;
          if (isLast) {
            if (utils$1.hasOwnProp(target, name)) {
              target[name] = [target[name], value];
            } else {
              target[name] = value;
            }
            return !isNumericKey;
          }
          if (!target[name] || !utils$1.isObject(target[name])) {
            target[name] = [];
          }
          const result = buildPath(path, value, target[name], index);
          if (result && utils$1.isArray(target[name])) {
            target[name] = arrayToObject(target[name]);
          }
          return !isNumericKey;
        }
        if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
          const obj = {};
          utils$1.forEachEntry(formData, (name, value) => {
            buildPath(parsePropPath(name), value, obj, 0);
          });
          return obj;
        }
        return null;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils$1.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils$1.trim(rawValue);
          } catch (e) {
            if (e.name !== "SyntaxError") {
              throw e;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: transitionalDefaults,
        adapter: ["xhr", "http", "fetch"],
        transformRequest: [function transformRequest(data, headers) {
          const contentType = headers.getContentType() || "";
          const hasJSONContentType = contentType.indexOf("application/json") > -1;
          const isObjectPayload = utils$1.isObject(data);
          if (isObjectPayload && utils$1.isHTMLForm(data)) {
            data = new FormData(data);
          }
          const isFormData2 = utils$1.isFormData(data);
          if (isFormData2) {
            return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
          }
          if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
            return data;
          }
          if (utils$1.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils$1.isURLSearchParams(data)) {
            headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
            return data.toString();
          }
          let isFileList2;
          if (isObjectPayload) {
            if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
              return toURLEncodedForm(data, this.formSerializer).toString();
            }
            if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
              const _FormData = this.env && this.env.FormData;
              return toFormData(
                isFileList2 ? { "files[]": data } : data,
                _FormData && new _FormData(),
                this.formSerializer
              );
            }
          }
          if (isObjectPayload || hasJSONContentType) {
            headers.setContentType("application/json", false);
            return stringifySafely(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          const transitional = this.transitional || defaults.transitional;
          const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          const JSONRequested = this.responseType === "json";
          if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
            return data;
          }
          if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
            const silentJSONParsing = transitional && transitional.silentJSONParsing;
            const strictJSONParsing = !silentJSONParsing && JSONRequested;
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                }
                throw e;
              }
            }
          }
          return data;
        }],
        /**
         * A timeout in milliseconds to abort a request. If set to 0 (default) a
         * timeout is not created.
         */
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: platform.classes.FormData,
          Blob: platform.classes.Blob
        },
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
        headers: {
          common: {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": void 0
          }
        }
      };
      utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
        defaults.headers[method] = {};
      });
      var defaults$1 = defaults;
      var ignoreDuplicateOf = utils$1.toObjectSet([
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ]);
      var parseHeaders = (rawHeaders) => {
        const parsed = {};
        let key;
        let val;
        let i;
        rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
          i = line.indexOf(":");
          key = line.substring(0, i).trim().toLowerCase();
          val = line.substring(i + 1).trim();
          if (!key || parsed[key] && ignoreDuplicateOf[key]) {
            return;
          }
          if (key === "set-cookie") {
            if (parsed[key]) {
              parsed[key].push(val);
            } else {
              parsed[key] = [val];
            }
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        });
        return parsed;
      };
      var $internals = Symbol("internals");
      function normalizeHeader(header) {
        return header && String(header).trim().toLowerCase();
      }
      function normalizeValue(value) {
        if (value === false || value == null) {
          return value;
        }
        return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
      }
      function parseTokens(str) {
        const tokens = /* @__PURE__ */ Object.create(null);
        const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
        let match;
        while (match = tokensRE.exec(str)) {
          tokens[match[1]] = match[2];
        }
        return tokens;
      }
      var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
      function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
        if (utils$1.isFunction(filter)) {
          return filter.call(this, value, header);
        }
        if (isHeaderNameFilter) {
          value = header;
        }
        if (!utils$1.isString(value))
          return;
        if (utils$1.isString(filter)) {
          return value.indexOf(filter) !== -1;
        }
        if (utils$1.isRegExp(filter)) {
          return filter.test(value);
        }
      }
      function formatHeader(header) {
        return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
          return char.toUpperCase() + str;
        });
      }
      function buildAccessors(obj, header) {
        const accessorName = utils$1.toCamelCase(" " + header);
        ["get", "set", "has"].forEach((methodName) => {
          Object.defineProperty(obj, methodName + accessorName, {
            value: function(arg1, arg2, arg3) {
              return this[methodName].call(this, header, arg1, arg2, arg3);
            },
            configurable: true
          });
        });
      }
      var AxiosHeaders = class {
        constructor(headers) {
          headers && this.set(headers);
        }
        set(header, valueOrRewrite, rewrite) {
          const self2 = this;
          function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header);
            if (!lHeader) {
              throw new Error("header name must be a non-empty string");
            }
            const key = utils$1.findKey(self2, lHeader);
            if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
              self2[key || _header] = normalizeValue(_value);
            }
          }
          const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
          if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
            setHeaders(header, valueOrRewrite);
          } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
            setHeaders(parseHeaders(header), valueOrRewrite);
          } else if (utils$1.isHeaders(header)) {
            for (const [key, value] of header.entries()) {
              setHeader(value, key, rewrite);
            }
          } else {
            header != null && setHeader(valueOrRewrite, header, rewrite);
          }
          return this;
        }
        get(header, parser) {
          header = normalizeHeader(header);
          if (header) {
            const key = utils$1.findKey(this, header);
            if (key) {
              const value = this[key];
              if (!parser) {
                return value;
              }
              if (parser === true) {
                return parseTokens(value);
              }
              if (utils$1.isFunction(parser)) {
                return parser.call(this, value, key);
              }
              if (utils$1.isRegExp(parser)) {
                return parser.exec(value);
              }
              throw new TypeError("parser must be boolean|regexp|function");
            }
          }
        }
        has(header, matcher) {
          header = normalizeHeader(header);
          if (header) {
            const key = utils$1.findKey(this, header);
            return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
          }
          return false;
        }
        delete(header, matcher) {
          const self2 = this;
          let deleted = false;
          function deleteHeader(_header) {
            _header = normalizeHeader(_header);
            if (_header) {
              const key = utils$1.findKey(self2, _header);
              if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
                delete self2[key];
                deleted = true;
              }
            }
          }
          if (utils$1.isArray(header)) {
            header.forEach(deleteHeader);
          } else {
            deleteHeader(header);
          }
          return deleted;
        }
        clear(matcher) {
          const keys = Object.keys(this);
          let i = keys.length;
          let deleted = false;
          while (i--) {
            const key = keys[i];
            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
              delete this[key];
              deleted = true;
            }
          }
          return deleted;
        }
        normalize(format) {
          const self2 = this;
          const headers = {};
          utils$1.forEach(this, (value, header) => {
            const key = utils$1.findKey(headers, header);
            if (key) {
              self2[key] = normalizeValue(value);
              delete self2[header];
              return;
            }
            const normalized = format ? formatHeader(header) : String(header).trim();
            if (normalized !== header) {
              delete self2[header];
            }
            self2[normalized] = normalizeValue(value);
            headers[normalized] = true;
          });
          return this;
        }
        concat(...targets) {
          return this.constructor.concat(this, ...targets);
        }
        toJSON(asStrings) {
          const obj = /* @__PURE__ */ Object.create(null);
          utils$1.forEach(this, (value, header) => {
            value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
          });
          return obj;
        }
        [Symbol.iterator]() {
          return Object.entries(this.toJSON())[Symbol.iterator]();
        }
        toString() {
          return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
        }
        get [Symbol.toStringTag]() {
          return "AxiosHeaders";
        }
        static from(thing) {
          return thing instanceof this ? thing : new this(thing);
        }
        static concat(first, ...targets) {
          const computed = new this(first);
          targets.forEach((target) => computed.set(target));
          return computed;
        }
        static accessor(header) {
          const internals = this[$internals] = this[$internals] = {
            accessors: {}
          };
          const accessors = internals.accessors;
          const prototype2 = this.prototype;
          function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header);
            if (!accessors[lHeader]) {
              buildAccessors(prototype2, _header);
              accessors[lHeader] = true;
            }
          }
          utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
          return this;
        }
      };
      AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
      utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
        let mapped = key[0].toUpperCase() + key.slice(1);
        return {
          get: () => value,
          set(headerValue) {
            this[mapped] = headerValue;
          }
        };
      });
      utils$1.freezeMethods(AxiosHeaders);
      var AxiosHeaders$1 = AxiosHeaders;
      function transformData(fns, response) {
        const config = this || defaults$1;
        const context = response || config;
        const headers = AxiosHeaders$1.from(context.headers);
        let data = context.data;
        utils$1.forEach(fns, function transform(fn) {
          data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
        });
        headers.normalize();
        return data;
      }
      function isCancel(value) {
        return !!(value && value.__CANCEL__);
      }
      function CanceledError(message, config, request) {
        AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
        this.name = "CanceledError";
      }
      utils$1.inherits(CanceledError, AxiosError, {
        __CANCEL__: true
      });
      function settle(resolve, reject, response) {
        const validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(new AxiosError(
            "Request failed with status code " + response.status,
            [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
            response.config,
            response.request,
            response
          ));
        }
      }
      function parseProtocol(url) {
        const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
        return match && match[1] || "";
      }
      function speedometer(samplesCount, min) {
        samplesCount = samplesCount || 10;
        const bytes = new Array(samplesCount);
        const timestamps = new Array(samplesCount);
        let head = 0;
        let tail = 0;
        let firstSampleTS;
        min = min !== void 0 ? min : 1e3;
        return function push(chunkLength) {
          const now = Date.now();
          const startedAt = timestamps[tail];
          if (!firstSampleTS) {
            firstSampleTS = now;
          }
          bytes[head] = chunkLength;
          timestamps[head] = now;
          let i = tail;
          let bytesCount = 0;
          while (i !== head) {
            bytesCount += bytes[i++];
            i = i % samplesCount;
          }
          head = (head + 1) % samplesCount;
          if (head === tail) {
            tail = (tail + 1) % samplesCount;
          }
          if (now - firstSampleTS < min) {
            return;
          }
          const passed = startedAt && now - startedAt;
          return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
        };
      }
      function throttle(fn, freq) {
        let timestamp = 0;
        let threshold = 1e3 / freq;
        let lastArgs;
        let timer;
        const invoke = (args, now = Date.now()) => {
          timestamp = now;
          lastArgs = null;
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          fn.apply(null, args);
        };
        const throttled = (...args) => {
          const now = Date.now();
          const passed = now - timestamp;
          if (passed >= threshold) {
            invoke(args, now);
          } else {
            lastArgs = args;
            if (!timer) {
              timer = setTimeout(() => {
                timer = null;
                invoke(lastArgs);
              }, threshold - passed);
            }
          }
        };
        const flush = () => lastArgs && invoke(lastArgs);
        return [throttled, flush];
      }
      var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
        let bytesNotified = 0;
        const _speedometer = speedometer(50, 250);
        return throttle((e) => {
          const loaded = e.loaded;
          const total = e.lengthComputable ? e.total : void 0;
          const progressBytes = loaded - bytesNotified;
          const rate = _speedometer(progressBytes);
          const inRange = loaded <= total;
          bytesNotified = loaded;
          const data = {
            loaded,
            total,
            progress: total ? loaded / total : void 0,
            bytes: progressBytes,
            rate: rate ? rate : void 0,
            estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
            event: e,
            lengthComputable: total != null,
            [isDownloadStream ? "download" : "upload"]: true
          };
          listener(data);
        }, freq);
      };
      var progressEventDecorator = (total, throttled) => {
        const lengthComputable = total != null;
        return [(loaded) => throttled[0]({
          lengthComputable,
          total,
          loaded
        }), throttled[1]];
      };
      var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
      var isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
        url = new URL(url, platform.origin);
        return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
      })(
        new URL(platform.origin),
        platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
      ) : () => true;
      var cookies = platform.hasStandardBrowserEnv ? (
        // Standard browser envs support document.cookie
        {
          write(name, value, expires, path, domain, secure) {
            const cookie = [name + "=" + encodeURIComponent(value)];
            utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
            utils$1.isString(path) && cookie.push("path=" + path);
            utils$1.isString(domain) && cookie.push("domain=" + domain);
            secure === true && cookie.push("secure");
            document.cookie = cookie.join("; ");
          },
          read(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        }
      ) : (
        // Non-standard browser env (web workers, react-native) lack needed support.
        {
          write() {
          },
          read() {
            return null;
          },
          remove() {
          }
        }
      );
      function isAbsoluteURL(url) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
      }
      function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      }
      function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      }
      var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
      function mergeConfig(config1, config2) {
        config2 = config2 || {};
        const config = {};
        function getMergedValue(target, source, prop, caseless) {
          if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
            return utils$1.merge.call({ caseless }, target, source);
          } else if (utils$1.isPlainObject(source)) {
            return utils$1.merge({}, source);
          } else if (utils$1.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(a, b, prop, caseless) {
          if (!utils$1.isUndefined(b)) {
            return getMergedValue(a, b, prop, caseless);
          } else if (!utils$1.isUndefined(a)) {
            return getMergedValue(void 0, a, prop, caseless);
          }
        }
        function valueFromConfig2(a, b) {
          if (!utils$1.isUndefined(b)) {
            return getMergedValue(void 0, b);
          }
        }
        function defaultToConfig2(a, b) {
          if (!utils$1.isUndefined(b)) {
            return getMergedValue(void 0, b);
          } else if (!utils$1.isUndefined(a)) {
            return getMergedValue(void 0, a);
          }
        }
        function mergeDirectKeys(a, b, prop) {
          if (prop in config2) {
            return getMergedValue(a, b);
          } else if (prop in config1) {
            return getMergedValue(void 0, a);
          }
        }
        const mergeMap = {
          url: valueFromConfig2,
          method: valueFromConfig2,
          data: valueFromConfig2,
          baseURL: defaultToConfig2,
          transformRequest: defaultToConfig2,
          transformResponse: defaultToConfig2,
          paramsSerializer: defaultToConfig2,
          timeout: defaultToConfig2,
          timeoutMessage: defaultToConfig2,
          withCredentials: defaultToConfig2,
          withXSRFToken: defaultToConfig2,
          adapter: defaultToConfig2,
          responseType: defaultToConfig2,
          xsrfCookieName: defaultToConfig2,
          xsrfHeaderName: defaultToConfig2,
          onUploadProgress: defaultToConfig2,
          onDownloadProgress: defaultToConfig2,
          decompress: defaultToConfig2,
          maxContentLength: defaultToConfig2,
          maxBodyLength: defaultToConfig2,
          beforeRedirect: defaultToConfig2,
          transport: defaultToConfig2,
          httpAgent: defaultToConfig2,
          httpsAgent: defaultToConfig2,
          cancelToken: defaultToConfig2,
          socketPath: defaultToConfig2,
          responseEncoding: defaultToConfig2,
          validateStatus: mergeDirectKeys,
          headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
        };
        utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
          const merge2 = mergeMap[prop] || mergeDeepProperties;
          const configValue = merge2(config1[prop], config2[prop], prop);
          utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
        });
        return config;
      }
      var resolveConfig = (config) => {
        const newConfig = mergeConfig({}, config);
        let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
        newConfig.headers = headers = AxiosHeaders$1.from(headers);
        newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
        if (auth) {
          headers.set(
            "Authorization",
            "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
          );
        }
        let contentType;
        if (utils$1.isFormData(data)) {
          if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
            headers.setContentType(void 0);
          } else if ((contentType = headers.getContentType()) !== false) {
            const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
            headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
          }
        }
        if (platform.hasStandardBrowserEnv) {
          withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
          if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
            const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
            if (xsrfValue) {
              headers.set(xsrfHeaderName, xsrfValue);
            }
          }
        }
        return newConfig;
      };
      var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
      var xhrAdapter = isXHRAdapterSupported && function(config) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          const _config = resolveConfig(config);
          let requestData = _config.data;
          const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
          let { responseType, onUploadProgress, onDownloadProgress } = _config;
          let onCanceled;
          let uploadThrottled, downloadThrottled;
          let flushUpload, flushDownload;
          function done() {
            flushUpload && flushUpload();
            flushDownload && flushDownload();
            _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
            _config.signal && _config.signal.removeEventListener("abort", onCanceled);
          }
          let request = new XMLHttpRequest();
          request.open(_config.method.toUpperCase(), _config.url, true);
          request.timeout = _config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            const responseHeaders = AxiosHeaders$1.from(
              "getAllResponseHeaders" in request && request.getAllResponseHeaders()
            );
            const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            const response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request
            };
            settle(function _resolve(value) {
              resolve(value);
              done();
            }, function _reject(err) {
              reject(err);
              done();
            }, response);
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
            request = null;
          };
          request.onerror = function handleError() {
            reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = _config.transitional || transitionalDefaults;
            if (_config.timeoutErrorMessage) {
              timeoutErrorMessage = _config.timeoutErrorMessage;
            }
            reject(new AxiosError(
              timeoutErrorMessage,
              transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
              config,
              request
            ));
            request = null;
          };
          requestData === void 0 && requestHeaders.setContentType(null);
          if ("setRequestHeader" in request) {
            utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
              request.setRequestHeader(key, val);
            });
          }
          if (!utils$1.isUndefined(_config.withCredentials)) {
            request.withCredentials = !!_config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = _config.responseType;
          }
          if (onDownloadProgress) {
            [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
            request.addEventListener("progress", downloadThrottled);
          }
          if (onUploadProgress && request.upload) {
            [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
            request.upload.addEventListener("progress", uploadThrottled);
            request.upload.addEventListener("loadend", flushUpload);
          }
          if (_config.cancelToken || _config.signal) {
            onCanceled = (cancel) => {
              if (!request) {
                return;
              }
              reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
              request.abort();
              request = null;
            };
            _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
            if (_config.signal) {
              _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
            }
          }
          const protocol = parseProtocol(_config.url);
          if (protocol && platform.protocols.indexOf(protocol) === -1) {
            reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
            return;
          }
          request.send(requestData || null);
        });
      };
      var composeSignals = (signals, timeout) => {
        const { length } = signals = signals ? signals.filter(Boolean) : [];
        if (timeout || length) {
          let controller = new AbortController();
          let aborted;
          const onabort = function(reason) {
            if (!aborted) {
              aborted = true;
              unsubscribe();
              const err = reason instanceof Error ? reason : this.reason;
              controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
            }
          };
          let timer = timeout && setTimeout(() => {
            timer = null;
            onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
          }, timeout);
          const unsubscribe = () => {
            if (signals) {
              timer && clearTimeout(timer);
              timer = null;
              signals.forEach((signal2) => {
                signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
              });
              signals = null;
            }
          };
          signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
          const { signal } = controller;
          signal.unsubscribe = () => utils$1.asap(unsubscribe);
          return signal;
        }
      };
      var composeSignals$1 = composeSignals;
      var streamChunk = function* (chunk, chunkSize) {
        let len = chunk.byteLength;
        if (!chunkSize || len < chunkSize) {
          yield chunk;
          return;
        }
        let pos = 0;
        let end;
        while (pos < len) {
          end = pos + chunkSize;
          yield chunk.slice(pos, end);
          pos = end;
        }
      };
      var readBytes = async function* (iterable, chunkSize) {
        for await (const chunk of readStream(iterable)) {
          yield* streamChunk(chunk, chunkSize);
        }
      };
      var readStream = async function* (stream) {
        if (stream[Symbol.asyncIterator]) {
          yield* stream;
          return;
        }
        const reader = stream.getReader();
        try {
          for (; ; ) {
            const { done, value } = await reader.read();
            if (done) {
              break;
            }
            yield value;
          }
        } finally {
          await reader.cancel();
        }
      };
      var trackStream = (stream, chunkSize, onProgress, onFinish) => {
        const iterator = readBytes(stream, chunkSize);
        let bytes = 0;
        let done;
        let _onFinish = (e) => {
          if (!done) {
            done = true;
            onFinish && onFinish(e);
          }
        };
        return new ReadableStream({
          async pull(controller) {
            try {
              const { done: done2, value } = await iterator.next();
              if (done2) {
                _onFinish();
                controller.close();
                return;
              }
              let len = value.byteLength;
              if (onProgress) {
                let loadedBytes = bytes += len;
                onProgress(loadedBytes);
              }
              controller.enqueue(new Uint8Array(value));
            } catch (err) {
              _onFinish(err);
              throw err;
            }
          },
          cancel(reason) {
            _onFinish(reason);
            return iterator.return();
          }
        }, {
          highWaterMark: 2
        });
      };
      var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
      var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
      var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
      var test = (fn, ...args) => {
        try {
          return !!fn(...args);
        } catch (e) {
          return false;
        }
      };
      var supportsRequestStream = isReadableStreamSupported && test(() => {
        let duplexAccessed = false;
        const hasContentType = new Request(platform.origin, {
          body: new ReadableStream(),
          method: "POST",
          get duplex() {
            duplexAccessed = true;
            return "half";
          }
        }).headers.has("Content-Type");
        return duplexAccessed && !hasContentType;
      });
      var DEFAULT_CHUNK_SIZE = 64 * 1024;
      var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
      var resolvers = {
        stream: supportsResponseStream && ((res) => res.body)
      };
      isFetchSupported && ((res) => {
        ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
          !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
            throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
          });
        });
      })(new Response());
      var getBodyLength = async (body) => {
        if (body == null) {
          return 0;
        }
        if (utils$1.isBlob(body)) {
          return body.size;
        }
        if (utils$1.isSpecCompliantForm(body)) {
          const _request = new Request(platform.origin, {
            method: "POST",
            body
          });
          return (await _request.arrayBuffer()).byteLength;
        }
        if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
          return body.byteLength;
        }
        if (utils$1.isURLSearchParams(body)) {
          body = body + "";
        }
        if (utils$1.isString(body)) {
          return (await encodeText(body)).byteLength;
        }
      };
      var resolveBodyLength = async (headers, body) => {
        const length = utils$1.toFiniteNumber(headers.getContentLength());
        return length == null ? getBodyLength(body) : length;
      };
      var fetchAdapter = isFetchSupported && (async (config) => {
        let {
          url,
          method,
          data,
          signal,
          cancelToken,
          timeout,
          onDownloadProgress,
          onUploadProgress,
          responseType,
          headers,
          withCredentials = "same-origin",
          fetchOptions
        } = resolveConfig(config);
        responseType = responseType ? (responseType + "").toLowerCase() : "text";
        let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
        let request;
        const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
          composedSignal.unsubscribe();
        });
        let requestContentLength;
        try {
          if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
            let _request = new Request(url, {
              method: "POST",
              body: data,
              duplex: "half"
            });
            let contentTypeHeader;
            if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
              headers.setContentType(contentTypeHeader);
            }
            if (_request.body) {
              const [onProgress, flush] = progressEventDecorator(
                requestContentLength,
                progressEventReducer(asyncDecorator(onUploadProgress))
              );
              data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
            }
          }
          if (!utils$1.isString(withCredentials)) {
            withCredentials = withCredentials ? "include" : "omit";
          }
          const isCredentialsSupported = "credentials" in Request.prototype;
          request = new Request(url, {
            ...fetchOptions,
            signal: composedSignal,
            method: method.toUpperCase(),
            headers: headers.normalize().toJSON(),
            body: data,
            duplex: "half",
            credentials: isCredentialsSupported ? withCredentials : void 0
          });
          let response = await fetch(request);
          const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
          if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
            const options = {};
            ["status", "statusText", "headers"].forEach((prop) => {
              options[prop] = response[prop];
            });
            const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
            const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
              responseContentLength,
              progressEventReducer(asyncDecorator(onDownloadProgress), true)
            ) || [];
            response = new Response(
              trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
                flush && flush();
                unsubscribe && unsubscribe();
              }),
              options
            );
          }
          responseType = responseType || "text";
          let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
          !isStreamResponse && unsubscribe && unsubscribe();
          return await new Promise((resolve, reject) => {
            settle(resolve, reject, {
              data: responseData,
              headers: AxiosHeaders$1.from(response.headers),
              status: response.status,
              statusText: response.statusText,
              config,
              request
            });
          });
        } catch (err) {
          unsubscribe && unsubscribe();
          if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
            throw Object.assign(
              new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
              {
                cause: err.cause || err
              }
            );
          }
          throw AxiosError.from(err, err && err.code, config, request);
        }
      });
      var knownAdapters = {
        http: httpAdapter,
        xhr: xhrAdapter,
        fetch: fetchAdapter
      };
      utils$1.forEach(knownAdapters, (fn, value) => {
        if (fn) {
          try {
            Object.defineProperty(fn, "name", { value });
          } catch (e) {
          }
          Object.defineProperty(fn, "adapterName", { value });
        }
      });
      var renderReason = (reason) => `- ${reason}`;
      var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
      var adapters = {
        getAdapter: (adapters2) => {
          adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
          const { length } = adapters2;
          let nameOrAdapter;
          let adapter;
          const rejectedReasons = {};
          for (let i = 0; i < length; i++) {
            nameOrAdapter = adapters2[i];
            let id;
            adapter = nameOrAdapter;
            if (!isResolvedHandle(nameOrAdapter)) {
              adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
              if (adapter === void 0) {
                throw new AxiosError(`Unknown adapter '${id}'`);
              }
            }
            if (adapter) {
              break;
            }
            rejectedReasons[id || "#" + i] = adapter;
          }
          if (!adapter) {
            const reasons = Object.entries(rejectedReasons).map(
              ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
            );
            let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
            throw new AxiosError(
              `There is no suitable adapter to dispatch the request ` + s,
              "ERR_NOT_SUPPORT"
            );
          }
          return adapter;
        },
        adapters: knownAdapters
      };
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
        if (config.signal && config.signal.aborted) {
          throw new CanceledError(null, config);
        }
      }
      function dispatchRequest(config) {
        throwIfCancellationRequested(config);
        config.headers = AxiosHeaders$1.from(config.headers);
        config.data = transformData.call(
          config,
          config.transformRequest
        );
        if (["post", "put", "patch"].indexOf(config.method) !== -1) {
          config.headers.setContentType("application/x-www-form-urlencoded", false);
        }
        const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
        return adapter(config).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config);
          response.data = transformData.call(
            config,
            config.transformResponse,
            response
          );
          response.headers = AxiosHeaders$1.from(response.headers);
          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config,
                config.transformResponse,
                reason.response
              );
              reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
            }
          }
          return Promise.reject(reason);
        });
      }
      var VERSION = "1.7.9";
      var validators$1 = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
        validators$1[type] = function validator2(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        };
      });
      var deprecatedWarnings = {};
      validators$1.transitional = function transitional(validator2, version, message) {
        function formatMessage(opt, desc) {
          return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return (value, opt, opts) => {
          if (validator2 === false) {
            throw new AxiosError(
              formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
              AxiosError.ERR_DEPRECATED
            );
          }
          if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" + version + " and will be removed in the near future"
              )
            );
          }
          return validator2 ? validator2(value, opt, opts) : true;
        };
      };
      validators$1.spelling = function spelling(correctSpelling) {
        return (value, opt) => {
          console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
          return true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
        }
        const keys = Object.keys(options);
        let i = keys.length;
        while (i-- > 0) {
          const opt = keys[i];
          const validator2 = schema[opt];
          if (validator2) {
            const value = options[opt];
            const result = value === void 0 || validator2(value, opt, options);
            if (result !== true) {
              throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
          }
        }
      }
      var validator = {
        assertOptions,
        validators: validators$1
      };
      var validators = validator.validators;
      var Axios = class {
        constructor(instanceConfig) {
          this.defaults = instanceConfig;
          this.interceptors = {
            request: new InterceptorManager$1(),
            response: new InterceptorManager$1()
          };
        }
        /**
         * Dispatch a request
         *
         * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
         * @param {?Object} config
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        async request(configOrUrl, config) {
          try {
            return await this._request(configOrUrl, config);
          } catch (err) {
            if (err instanceof Error) {
              let dummy = {};
              Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
              const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
              try {
                if (!err.stack) {
                  err.stack = stack;
                } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                  err.stack += "\n" + stack;
                }
              } catch (e) {
              }
            }
            throw err;
          }
        }
        _request(configOrUrl, config) {
          if (typeof configOrUrl === "string") {
            config = config || {};
            config.url = configOrUrl;
          } else {
            config = configOrUrl || {};
          }
          config = mergeConfig(this.defaults, config);
          const { transitional, paramsSerializer, headers } = config;
          if (transitional !== void 0) {
            validator.assertOptions(transitional, {
              silentJSONParsing: validators.transitional(validators.boolean),
              forcedJSONParsing: validators.transitional(validators.boolean),
              clarifyTimeoutError: validators.transitional(validators.boolean)
            }, false);
          }
          if (paramsSerializer != null) {
            if (utils$1.isFunction(paramsSerializer)) {
              config.paramsSerializer = {
                serialize: paramsSerializer
              };
            } else {
              validator.assertOptions(paramsSerializer, {
                encode: validators.function,
                serialize: validators.function
              }, true);
            }
          }
          validator.assertOptions(config, {
            baseUrl: validators.spelling("baseURL"),
            withXsrfToken: validators.spelling("withXSRFToken")
          }, true);
          config.method = (config.method || this.defaults.method || "get").toLowerCase();
          let contextHeaders = headers && utils$1.merge(
            headers.common,
            headers[config.method]
          );
          headers && utils$1.forEach(
            ["delete", "get", "head", "post", "put", "patch", "common"],
            (method) => {
              delete headers[method];
            }
          );
          config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
          const requestInterceptorChain = [];
          let synchronousRequestInterceptors = true;
          this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
              return;
            }
            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
          });
          const responseInterceptorChain = [];
          this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
          });
          let promise;
          let i = 0;
          let len;
          if (!synchronousRequestInterceptors) {
            const chain = [dispatchRequest.bind(this), void 0];
            chain.unshift.apply(chain, requestInterceptorChain);
            chain.push.apply(chain, responseInterceptorChain);
            len = chain.length;
            promise = Promise.resolve(config);
            while (i < len) {
              promise = promise.then(chain[i++], chain[i++]);
            }
            return promise;
          }
          len = requestInterceptorChain.length;
          let newConfig = config;
          i = 0;
          while (i < len) {
            const onFulfilled = requestInterceptorChain[i++];
            const onRejected = requestInterceptorChain[i++];
            try {
              newConfig = onFulfilled(newConfig);
            } catch (error) {
              onRejected.call(this, error);
              break;
            }
          }
          try {
            promise = dispatchRequest.call(this, newConfig);
          } catch (error) {
            return Promise.reject(error);
          }
          i = 0;
          len = responseInterceptorChain.length;
          while (i < len) {
            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
          }
          return promise;
        }
        getUri(config) {
          config = mergeConfig(this.defaults, config);
          const fullPath = buildFullPath(config.baseURL, config.url);
          return buildURL(fullPath, config.params, config.paramsSerializer);
        }
      };
      utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
          }));
        };
      });
      utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        function generateHTTPMethod(isForm) {
          return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
              method,
              headers: isForm ? {
                "Content-Type": "multipart/form-data"
              } : {},
              url,
              data
            }));
          };
        }
        Axios.prototype[method] = generateHTTPMethod();
        Axios.prototype[method + "Form"] = generateHTTPMethod(true);
      });
      var Axios$1 = Axios;
      var CancelToken = class _CancelToken {
        constructor(executor) {
          if (typeof executor !== "function") {
            throw new TypeError("executor must be a function.");
          }
          let resolvePromise;
          this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
          });
          const token = this;
          this.promise.then((cancel) => {
            if (!token._listeners)
              return;
            let i = token._listeners.length;
            while (i-- > 0) {
              token._listeners[i](cancel);
            }
            token._listeners = null;
          });
          this.promise.then = (onfulfilled) => {
            let _resolve;
            const promise = new Promise((resolve) => {
              token.subscribe(resolve);
              _resolve = resolve;
            }).then(onfulfilled);
            promise.cancel = function reject() {
              token.unsubscribe(_resolve);
            };
            return promise;
          };
          executor(function cancel(message, config, request) {
            if (token.reason) {
              return;
            }
            token.reason = new CanceledError(message, config, request);
            resolvePromise(token.reason);
          });
        }
        /**
         * Throws a `CanceledError` if cancellation has been requested.
         */
        throwIfRequested() {
          if (this.reason) {
            throw this.reason;
          }
        }
        /**
         * Subscribe to the cancel signal
         */
        subscribe(listener) {
          if (this.reason) {
            listener(this.reason);
            return;
          }
          if (this._listeners) {
            this._listeners.push(listener);
          } else {
            this._listeners = [listener];
          }
        }
        /**
         * Unsubscribe from the cancel signal
         */
        unsubscribe(listener) {
          if (!this._listeners) {
            return;
          }
          const index = this._listeners.indexOf(listener);
          if (index !== -1) {
            this._listeners.splice(index, 1);
          }
        }
        toAbortSignal() {
          const controller = new AbortController();
          const abort = (err) => {
            controller.abort(err);
          };
          this.subscribe(abort);
          controller.signal.unsubscribe = () => this.unsubscribe(abort);
          return controller.signal;
        }
        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        static source() {
          let cancel;
          const token = new _CancelToken(function executor(c) {
            cancel = c;
          });
          return {
            token,
            cancel
          };
        }
      };
      var CancelToken$1 = CancelToken;
      function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      }
      function isAxiosError(payload) {
        return utils$1.isObject(payload) && payload.isAxiosError === true;
      }
      var HttpStatusCode = {
        Continue: 100,
        SwitchingProtocols: 101,
        Processing: 102,
        EarlyHints: 103,
        Ok: 200,
        Created: 201,
        Accepted: 202,
        NonAuthoritativeInformation: 203,
        NoContent: 204,
        ResetContent: 205,
        PartialContent: 206,
        MultiStatus: 207,
        AlreadyReported: 208,
        ImUsed: 226,
        MultipleChoices: 300,
        MovedPermanently: 301,
        Found: 302,
        SeeOther: 303,
        NotModified: 304,
        UseProxy: 305,
        Unused: 306,
        TemporaryRedirect: 307,
        PermanentRedirect: 308,
        BadRequest: 400,
        Unauthorized: 401,
        PaymentRequired: 402,
        Forbidden: 403,
        NotFound: 404,
        MethodNotAllowed: 405,
        NotAcceptable: 406,
        ProxyAuthenticationRequired: 407,
        RequestTimeout: 408,
        Conflict: 409,
        Gone: 410,
        LengthRequired: 411,
        PreconditionFailed: 412,
        PayloadTooLarge: 413,
        UriTooLong: 414,
        UnsupportedMediaType: 415,
        RangeNotSatisfiable: 416,
        ExpectationFailed: 417,
        ImATeapot: 418,
        MisdirectedRequest: 421,
        UnprocessableEntity: 422,
        Locked: 423,
        FailedDependency: 424,
        TooEarly: 425,
        UpgradeRequired: 426,
        PreconditionRequired: 428,
        TooManyRequests: 429,
        RequestHeaderFieldsTooLarge: 431,
        UnavailableForLegalReasons: 451,
        InternalServerError: 500,
        NotImplemented: 501,
        BadGateway: 502,
        ServiceUnavailable: 503,
        GatewayTimeout: 504,
        HttpVersionNotSupported: 505,
        VariantAlsoNegotiates: 506,
        InsufficientStorage: 507,
        LoopDetected: 508,
        NotExtended: 510,
        NetworkAuthenticationRequired: 511
      };
      Object.entries(HttpStatusCode).forEach(([key, value]) => {
        HttpStatusCode[value] = key;
      });
      var HttpStatusCode$1 = HttpStatusCode;
      function createInstance(defaultConfig) {
        const context = new Axios$1(defaultConfig);
        const instance = bind(Axios$1.prototype.request, context);
        utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
        utils$1.extend(instance, context, null, { allOwnKeys: true });
        instance.create = function create(instanceConfig) {
          return createInstance(mergeConfig(defaultConfig, instanceConfig));
        };
        return instance;
      }
      var axios = createInstance(defaults$1);
      axios.Axios = Axios$1;
      axios.CanceledError = CanceledError;
      axios.CancelToken = CancelToken$1;
      axios.isCancel = isCancel;
      axios.VERSION = VERSION;
      axios.toFormData = toFormData;
      axios.AxiosError = AxiosError;
      axios.Cancel = axios.CanceledError;
      axios.all = function all(promises) {
        return Promise.all(promises);
      };
      axios.spread = spread;
      axios.isAxiosError = isAxiosError;
      axios.mergeConfig = mergeConfig;
      axios.AxiosHeaders = AxiosHeaders$1;
      axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
      axios.getAdapter = adapters.getAdapter;
      axios.HttpStatusCode = HttpStatusCode$1;
      axios.default = axios;
      module.exports = axios;
    }
  });

  // app/javascript/utils/deviceKey.js
  var require_deviceKey = __commonJS({
    "app/javascript/utils/deviceKey.js"(exports, module) {
      var generateDeviceKey = async () => {
        try {
          const array = new Uint8Array(32);
          crypto.getRandomValues(array);
          const key = Array.from(array).map((b) => b.toString(16).padStart(2, "0")).join("");
          console.log("Generated new device key:", key.substring(0, 10) + "...");
          return key;
        } catch (err) {
          console.error("Failed to generate device key:", err);
          return null;
        }
      };
      var getStoredDeviceKey = async () => {
        try {
          console.log("Checking for existing device key");
          const sessionKey = sessionStorage.getItem("device_key");
          if (sessionKey) {
            console.log("Found existing device key in session storage:", sessionKey.substring(0, 10) + "...");
            return sessionKey;
          }
          console.log("No device key found, generating new one");
          const newKey = await generateDeviceKey();
          if (newKey) {
            sessionStorage.setItem("device_key", newKey);
            console.log("Stored new device key in session storage");
          }
          return newKey;
        } catch (err) {
          console.error("Error in getStoredDeviceKey:", err);
          const existingKey = sessionStorage.getItem("device_key");
          if (existingKey) {
            return existingKey;
          }
          return generateDeviceKey();
        }
      };
      var storeDeviceKey = (key) => {
        if (key) {
          sessionStorage.setItem("device_key", key);
          console.log("Stored device key:", key.substring(0, 10) + "...");
        } else {
          console.warn("Attempted to store null or undefined device key");
        }
      };
      var storeDeviceSessionData = (data) => {
        if (!data)
          return;
        console.log("Storing device session data:", data);
        if (data.device_key) {
          storeDeviceKey(data.device_key);
        }
        if (data.status === "authenticated") {
          sessionStorage.setItem("device_session", "authenticated");
        }
        if (data.handle) {
          sessionStorage.setItem("current_handle", data.handle);
        }
        if (data.phone) {
          sessionStorage.setItem("current_phone", data.phone);
        }
        if (data.guid) {
          sessionStorage.setItem("device_guid", data.guid);
        }
        if (data.masked_phone) {
          sessionStorage.setItem("masked_phone", data.masked_phone);
        }
        sessionStorage.setItem("last_device_check", Date.now().toString());
      };
      var clearDeviceSession = () => {
        const deviceKey = sessionStorage.getItem("device_key");
        const currentHandle = sessionStorage.getItem("current_handle");
        if (currentHandle) {
          localStorage.setItem("previous_handle", currentHandle);
        }
        localStorage.setItem("logout_state", "true");
        sessionStorage.clear();
        if (deviceKey) {
          sessionStorage.setItem("device_key", deviceKey);
        }
        sessionStorage.setItem("logging_out", "true");
        console.log("Cleared device session data, preserved device key for recognition");
      };
      module.exports = {
        generateDeviceKey,
        getStoredDeviceKey,
        storeDeviceKey,
        storeDeviceSessionData,
        clearDeviceSession
      };
    }
  });

  // app/javascript/config/axios.js
  var require_axios2 = __commonJS({
    "app/javascript/config/axios.js"(exports, module) {
      var axios = require_axios();
      var {
        generateDeviceKey,
        getStoredDeviceKey,
        storeDeviceKey,
        storeDeviceSessionData,
        clearDeviceSession
      } = require_deviceKey();
      var instance = axios.create({
        baseURL: `${window.location.protocol}//${window.location.host}/api/v1/auth`,
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        }
      });
      instance.interceptors.request.use(async (config) => {
        try {
          console.log("========== REQUEST INTERCEPTOR START ==========");
          const url = config.url;
          const currentPath = window.location.pathname;
          console.log("Request URL:", url);
          console.log("Current path:", currentPath);
          if (currentPath === "/dashboard" && sessionStorage.getItem("device_session") === "authenticated") {
            const deviceKey2 = sessionStorage.getItem("device_key");
            if (deviceKey2) {
              config.headers["X-Device-Key"] = deviceKey2;
            }
            if (window.csrfToken) {
              config.headers["X-CSRF-Token"] = window.csrfToken;
            }
            return config;
          }
          if (sessionStorage.getItem("logging_out") === "true") {
            console.log("Logout in progress - blocking non-logout requests");
            if (!url.includes("logout")) {
              console.log("Non-logout request blocked during logout");
              return new Promise(() => {
              });
            }
            if (window.csrfToken) {
              config.headers["X-CSRF-Token"] = window.csrfToken;
            }
            return config;
          }
          if (currentPath.includes("logout_confirmation")) {
            console.log("On logout confirmation page - skipping device checks");
            if (window.csrfToken) {
              config.headers["X-CSRF-Token"] = window.csrfToken;
            }
            return config;
          }
          if (window.csrfToken) {
            config.headers["X-CSRF-Token"] = window.csrfToken;
            console.log("Added CSRF token to headers");
          }
          let deviceKey = sessionStorage.getItem("device_key");
          if (!deviceKey && !url.endsWith("/check_device")) {
            deviceKey = await getStoredDeviceKey();
            if (deviceKey) {
              sessionStorage.setItem("device_key", deviceKey);
            }
          }
          if (deviceKey) {
            config.headers["X-Device-Key"] = deviceKey;
            config.headers["X-Forwarded-Proto"] = window.location.protocol.replace(":", "");
            console.log("Added device key and protocol to headers");
          }
          console.log("Final request headers:", config.headers);
          console.log("========== REQUEST INTERCEPTOR END ==========");
          return config;
        } catch (error) {
          console.error("Request interceptor error:", error);
          console.error("Error stack:", error.stack);
          return config;
        }
      });
      instance.interceptors.response.use(
        (response) => {
          console.log("========== RESPONSE INTERCEPTOR START ==========");
          console.log("Response status:", response.status);
          console.log("Response data:", response.data);
          if (response.data?.status === "logged_out" || sessionStorage.getItem("logging_out") === "true") {
            console.log("Logged out state detected - skipping device key storage");
            return response;
          }
          if (response.data) {
            storeDeviceSessionData(response.data);
            console.log("Stored device session data from response");
          }
          console.log("========== RESPONSE INTERCEPTOR END ==========");
          return response;
        },
        (error) => {
          console.error("Response error:", {
            status: error.response?.status,
            data: error.response?.data,
            headers: error.config?.headers,
            url: error.config?.url,
            method: error.config?.method
          });
          console.error("Error stack:", error.stack);
          return Promise.reject(error);
        }
      );
      module.exports = instance;
    }
  });

  // app/javascript/components/auth/UnifiedLogin.jsx
  var require_UnifiedLogin = __commonJS({
    "app/javascript/components/auth/UnifiedLogin.jsx"(exports, module) {
      var React2 = require_react();
      var { useState, useEffect, useRef } = React2;
      var { X, Phone, User, ArrowRight, Check, ArrowLeft } = require_lucide_react();
      var axios = require_axios2();
      var {
        generateDeviceKey,
        getStoredDeviceKey,
        storeDeviceKey,
        storeDeviceSessionData,
        clearDeviceSession
      } = require_deviceKey();
      var UnifiedLogin2 = () => {
        const [flowState, setFlowState] = useState("checking");
        const [identifier, setIdentifier] = useState("");
        const [verificationCode, setVerificationCode] = useState("");
        const [handle, setHandle] = useState("");
        const [error, setError] = useState("");
        const [phone, setPhone] = useState("");
        const [isQuickVerification, setIsQuickVerification] = useState(false);
        const [countryCode, setCountryCode] = useState("+44");
        const [phoneNumber, setPhoneNumber] = useState("");
        const [showCountrySelect, setShowCountrySelect] = useState(false);
        const [isLoading, setIsLoading] = useState(false);
        const [redirectAttempts, setRedirectAttempts] = useState(0);
        const [welcomeMessage, setWelcomeMessage] = useState("");
        const [loginMethod, setLoginMethod] = useState("handle");
        const [existingUserData, setExistingUserData] = useState(null);
        const [autoSubmit, setAutoSubmit] = useState(true);
        const [deviceNotRegistered, setDeviceNotRegistered] = useState(false);
        const [suggestedHandles, setSuggestedHandles] = useState([]);
        const verificationInputRef = useRef(null);
        const MAX_REDIRECT_ATTEMPTS = 3;
        useEffect(() => {
          console.log("UnifiedLogin: Component mounted, initializing...");
          if (window.location.pathname === "/dashboard" || localStorage.getItem("authenticated_user") === "true") {
            console.log("Already on dashboard or authenticated, skipping initialization");
            window.location.href = "/dashboard";
            return;
          }
          if (window.location.pathname.includes("logout_confirmation")) {
            console.log("On logout confirmation page, skipping device check");
            return;
          }
          const deviceSession = sessionStorage.getItem("device_session");
          const currentHandle = sessionStorage.getItem("current_handle");
          const deviceKey = sessionStorage.getItem("device_key");
          const lastCheck = sessionStorage.getItem("last_device_check");
          const now = Date.now();
          if (deviceSession === "authenticated" && currentHandle && deviceKey) {
            console.log("Using cached device session:", currentHandle);
            localStorage.setItem("authenticated_user", "true");
            window.location.href = "/dashboard";
            return;
          }
          if (lastCheck && now - parseInt(lastCheck) < 2e3) {
            console.log("Recent device check found, using cached data");
            const cachedHandle = sessionStorage.getItem("current_handle");
            const cachedPhone = sessionStorage.getItem("current_phone");
            if (cachedHandle) {
              console.log("Using cached device info:", cachedHandle);
              setHandle(cachedHandle);
              if (cachedPhone)
                setPhone(cachedPhone);
              setIsQuickVerification(true);
              setFlowState("verification");
              setIsLoading(false);
              setWelcomeMessage(`Welcome back, ${cachedHandle}!`);
            } else {
              setFlowState("loginOptions");
              setDeviceNotRegistered(true);
            }
            return;
          }
          sessionStorage.setItem("last_device_check", now.toString());
          checkDevice();
        }, []);
        useEffect(() => {
          if (flowState === "verification") {
            setIsLoading(false);
            setAutoSubmit(true);
            setTimeout(() => {
              if (verificationInputRef.current) {
                verificationInputRef.current.focus();
              }
            }, 100);
          }
        }, [flowState]);
        useEffect(() => {
          if (verificationCode.length === 6 && (flowState === "verification" || flowState === "deviceRegistration") && !isLoading && autoSubmit) {
            handleVerificationSubmit();
          }
        }, [verificationCode, isLoading, autoSubmit]);
        const checkDevice = async () => {
          console.log("Starting device check...");
          const urlParams = new URLSearchParams(window.location.search);
          if (window.location.pathname.includes("logout_confirmation") || urlParams.has("logout")) {
            console.log("On logout confirmation page - skipping device check");
            return;
          }
          if (localStorage.getItem("logout_state") === "true") {
            console.log("Logout state detected in localStorage");
            localStorage.removeItem("logout_state");
            return;
          }
          if (shouldSkipDeviceCheck()) {
            console.log("Skipping device check: already authenticated or logging out");
            return;
          }
          try {
            setIsLoading(true);
            let deviceKey = await getStoredDeviceKey();
            const previousHandle = localStorage.getItem("previous_handle");
            if (previousHandle) {
              console.log("Found previous handle in localStorage:", previousHandle);
            }
            if (sessionStorage.getItem("verification_in_progress")) {
              console.log("Verification in progress, skipping device check");
              return;
            }
            if (!deviceKey) {
              console.log("No device key found, generating...");
              deviceKey = await generateDeviceKey();
              if (deviceKey) {
                console.log("Storing new device key");
                storeDeviceKey(deviceKey);
              }
            }
            console.log("Sending device check request with key:", deviceKey?.substring(0, 10) + "...");
            const response = await axios.post("check_device", {}, {
              headers: deviceKey ? {
                "X-Device-Key": deviceKey,
                "Content-Type": "application/json",
                "Accept": "application/json"
              } : {},
              timeout: 1e4
              // Add timeout to prevent hanging requests
            });
            console.log("Check device response:", response.data);
            if (response.data.device_key) {
              storeDeviceKey(response.data.device_key);
            }
            if (response.data.status === "logged_out" || response.data.next === "logout_confirmation") {
              console.log("Logout state detected from server");
              clearDeviceSession();
              return;
            }
            if (response.data.status === "authenticated") {
              console.log("Device authenticated, redirecting to dashboard");
              storeDeviceSessionData(response.data);
              localStorage.setItem("authenticated_user", "true");
              setFlowState("loginSuccess");
              setTimeout(() => {
                window.location.href = response.data.redirect_to || "/dashboard";
              }, 500);
            } else if (response.data.status === "needs_quick_verification") {
              console.log("Device recognized but needs quick verification");
              storeDeviceSessionData(response.data);
              setHandle(response.data.handle);
              setPhone(response.data.masked_phone);
              setIsQuickVerification(true);
              setWelcomeMessage(`Welcome back, ${response.data.handle}!`);
              setFlowState("verification");
              setIsLoading(false);
            } else if (response.data.status === "show_options") {
              console.log("New device or no registration found, showing login options");
              setFlowState("loginOptions");
              if (response.data.device_not_registered) {
                setDeviceNotRegistered(true);
              }
            } else {
              console.log("Unknown status, defaulting to login options");
              if (response.data.guid) {
                sessionStorage.setItem("device_guid", response.data.guid);
              }
              setFlowState("loginOptions");
              setDeviceNotRegistered(true);
            }
          } catch (err) {
            console.error("Device check failed:", err);
            setError("Connection error. Please try again.");
            setFlowState("loginOptions");
            setDeviceNotRegistered(true);
          } finally {
            setIsLoading(false);
          }
        };
        const handlePhoneInput = (e) => {
          const value = e.target.value.replace(/[^\d]/g, "");
          setPhoneNumber(value);
          const fullNumber = `${countryCode}${value}`;
          setIdentifier(fullNumber);
        };
        const formatPhoneDisplay = (number) => {
          if (!number)
            return "";
          const digits = number.replace(/[^\d]/g, "");
          if (countryCode === "+44") {
            if (digits.length <= 4)
              return digits;
            if (digits.length <= 7)
              return `${digits.slice(0, 4)} ${digits.slice(4)}`;
            return `${digits.slice(0, 4)} ${digits.slice(4, 7)} ${digits.slice(7)}`;
          } else {
            if (digits.length <= 4)
              return digits;
            return `${digits.slice(0, 4)} ${digits.slice(4)}`;
          }
        };
        const validatePhoneNumber = () => {
          if (countryCode === "+44" && phoneNumber.length !== 10)
            return false;
          if (countryCode === "+65" && phoneNumber.length !== 8)
            return false;
          return true;
        };
        const validateHandle = () => {
          if (!identifier.startsWith("@"))
            return false;
          if (identifier.length < 2)
            return false;
          return identifier.match(/^@[a-zA-Z0-9_]+$/);
        };
        const handleLoginMethodSelect = (method) => {
          setLoginMethod(method);
          setIdentifier(method === "handle" ? "@" : "");
          setPhoneNumber("");
          setError("");
        };
        const generateHandleSuggestions = (originalHandle) => {
          const baseName = originalHandle.replace("@", "");
          const suggestions = [
            `@${baseName}1`,
            `@${baseName}2`,
            `@${baseName}_app`,
            `@${baseName}_user`,
            `@${baseName}_${Math.floor(Math.random() * 1e3)}`
          ];
          return suggestions;
        };
        const handleNotMyAccount = () => {
          setIsLoading(true);
          setError("");
          if (loginMethod === "handle" && identifier.startsWith("@")) {
            try {
              const suggestions = generateHandleSuggestions(identifier);
              setSuggestedHandles(suggestions);
              setFlowState("handleSuggestions");
            } catch (err) {
              console.error("Error generating handle suggestions:", err);
              setIdentifier("");
              setFlowState("loginOptions");
            }
          } else {
            setIdentifier("");
            setFlowState("loginOptions");
          }
          setIsLoading(false);
        };
        const handleInitialSubmit = async () => {
          setError("");
          setIsLoading(true);
          if (!window.csrfToken) {
            console.error("CSRF token missing");
            setError("Security verification failed. Please refresh the page.");
            setIsLoading(false);
            return;
          }
          if (loginMethod === "handle") {
            if (!validateHandle()) {
              setError("Please enter a valid handle starting with @");
              setIsLoading(false);
              return;
            }
            try {
              console.log("Checking handle:", identifier);
              const deviceKey = await getStoredDeviceKey();
              const response = await axios.post("verify_login", {
                identifier,
                auth: { identifier }
              }, {
                headers: {
                  "X-Device-Key": deviceKey,
                  "X-CSRF-Token": window.csrfToken,
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                timeout: 1e4
                // 10 second timeout
              });
              console.log("Handle check response:", response.data);
              if (response.data.status === "verification_needed") {
                console.log("Existing user found, going to verification");
                setHandle(response.data.handle || "");
                setPhone(response.data.masked_phone);
                setFlowState("verification");
                setWelcomeMessage(`Welcome back, ${response.data.handle}!`);
              } else if (response.data.status === "handle_not_found") {
                console.log("Handle not found, proceeding with registration");
                setHandle(identifier);
                setFlowState("phoneEntry");
              } else if (response.data.status === "handle_exists") {
                console.log("Handle exists, asking about device registration");
                setExistingUserData(response.data);
                setFlowState("deviceRegistration");
              }
            } catch (err) {
              console.error("Handle check error:", err);
              console.error("Error details:", {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status
              });
              if (err.response?.data?.status === "handle_not_found") {
                console.log("Error indicates handle not found, proceeding with registration");
                setHandle(identifier);
                setFlowState("phoneEntry");
              } else {
                setError(err.response?.data?.error || "Verification failed");
              }
              setIsLoading(false);
            }
          } else {
            if (!validatePhoneNumber()) {
              setError(`Please enter a valid ${countryCode === "+44" ? "UK" : "Singapore"} phone number`);
              setIsLoading(false);
              return;
            }
            try {
              console.log("Checking phone:", identifier);
              const deviceKey = await getStoredDeviceKey();
              const response = await axios.post("verify_login", {
                identifier,
                auth: { identifier }
              }, {
                headers: {
                  "X-Device-Key": deviceKey,
                  "X-CSRF-Token": window.csrfToken,
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                timeout: 1e4
                // 10 second timeout
              });
              console.log("Phone check response:", response.data);
              if (response.data.status === "verification_needed") {
                console.log("Existing user found, going to verification");
                setHandle(response.data.handle || "");
                setPhone(response.data.masked_phone || identifier);
                setFlowState("verification");
                if (response.data.handle) {
                  setWelcomeMessage(`Welcome back, ${response.data.handle}!`);
                } else {
                  setWelcomeMessage("Verify your number");
                }
              } else if (response.data.status === "phone_not_found") {
                console.log("Phone not found, showing handle entry for registration");
                setPhone(identifier);
                setFlowState("handleEntry");
              } else if (response.data.status === "phone_exists") {
                console.log("Phone exists, asking about device registration");
                setExistingUserData(response.data);
                setFlowState("deviceRegistration");
              }
            } catch (err) {
              console.error("Phone check error:", err);
              console.error("Error details:", {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status
              });
              if (err.response?.data?.status === "phone_not_found") {
                console.log("Error indicates phone not found, showing handle entry");
                setPhone(identifier);
                setFlowState("handleEntry");
              } else {
                setError(err.response?.data?.error || "Verification failed");
              }
              setIsLoading(false);
            }
          }
        };
        const handlePhoneSubmit = async () => {
          setError("");
          setIsLoading(true);
          if (!window.csrfToken) {
            console.error("CSRF token missing");
            setError("Security verification failed. Please refresh the page.");
            setIsLoading(false);
            return;
          }
          if (!validatePhoneNumber()) {
            setError(`Please enter a valid ${countryCode === "+44" ? "UK" : "Singapore"} phone number`);
            setIsLoading(false);
            return;
          }
          try {
            console.log("Registering with handle and phone:", handle, identifier);
            const deviceKey = await getStoredDeviceKey();
            const response = await axios.post("verify_login", {
              identifier,
              auth: {
                identifier,
                handle,
                // Also send the handle for context
                handle_first: true
                // Indicate handle-first flow
              }
            }, {
              headers: {
                "X-Device-Key": deviceKey,
                "X-CSRF-Token": window.csrfToken,
                "Accept": "application/json",
                "Content-Type": "application/json"
              },
              timeout: 1e4
              // 10 second timeout
            });
            console.log("Phone verification response:", response.data);
            setPhone(response.data.masked_phone || identifier);
            setFlowState("verification");
            setWelcomeMessage("Verify your number");
            setIsLoading(false);
          } catch (err) {
            console.error("Phone verification error:", err);
            console.error("Error details:", {
              message: err.message,
              response: err.response?.data,
              status: err.response?.status
            });
            setError(err.response?.data?.error || "Failed to send verification code");
            setIsLoading(false);
          }
        };
        const handleHandleSubmit = async () => {
          setError("");
          setIsLoading(true);
          if (!window.csrfToken) {
            console.error("CSRF token missing");
            setError("Security verification failed. Please refresh the page.");
            setIsLoading(false);
            return;
          }
          if (!handle.match(/^@[a-zA-Z0-9_]{1,29}$/)) {
            setError("Handle must start with @ and contain only letters, numbers, and underscores");
            setIsLoading(false);
            return;
          }
          try {
            console.log("Creating handle:", handle);
            const deviceKey = await getStoredDeviceKey();
            const response = await axios.post("create_handle", {
              handle,
              phone
            }, {
              headers: {
                "X-Device-Key": deviceKey,
                "X-CSRF-Token": window.csrfToken
              },
              timeout: 1e4
              // 10 second timeout
            });
            console.log("Handle creation response:", response.data);
            if (response.data.status === "authenticated") {
              storeDeviceSessionData(response.data);
              localStorage.setItem("authenticated_user", "true");
              setFlowState("loginSuccess");
              setTimeout(() => {
                window.location.href = response.data.redirect_to || "/dashboard";
              }, 1e3);
            }
          } catch (err) {
            console.error("Handle creation error:", err);
            console.error("Error details:", {
              message: err.message,
              response: err.response?.data,
              status: err.response?.status
            });
            if (err.response?.data?.error?.includes("already taken")) {
              setError("This handle is already taken. Please choose another one.");
            } else {
              setError(err.response?.data?.error || "Failed to create handle");
            }
            setIsLoading(false);
          }
        };
        const handleRegisterDevice = async () => {
          setIsLoading(true);
          setError("");
          if (!window.csrfToken) {
            console.error("CSRF token missing");
            setError("Security verification failed. Please refresh the page.");
            setIsLoading(false);
            return;
          }
          try {
            console.log("Registering device for existing account");
            const deviceKey = await getStoredDeviceKey();
            const response = await axios.post("verify_login", {
              identifier: loginMethod === "handle" ? identifier : phone,
              auth: {
                identifier: loginMethod === "handle" ? identifier : phone,
                device_registration: true
                // Flag for server
              }
            }, {
              headers: {
                "X-Device-Key": deviceKey,
                "X-CSRF-Token": window.csrfToken,
                "Accept": "application/json",
                "Content-Type": "application/json"
              },
              timeout: 1e4
              // 10 second timeout
            });
            console.log("Device registration response:", response.data);
            if (response.data.status === "verification_needed") {
              setPhone(response.data.masked_phone || identifier);
              setHandle(response.data.handle || "");
              setWelcomeMessage(`Verify it's you, ${response.data.handle || ""}`);
              setFlowState("verification");
            } else if (response.data.status === "error") {
              setError(response.data.message || "Registration failed. Please try again.");
              setFlowState("deviceRegistration");
            } else {
              console.warn("Unexpected response status:", response.data.status);
              setError("Unable to process request. Please try again.");
              setFlowState("deviceRegistration");
            }
          } catch (err) {
            console.error("Device registration error:", err);
            console.error("Error details:", {
              message: err.message,
              response: err.response?.data,
              status: err.response?.status,
              stack: err.stack
            });
            let errorMessage = "Failed to register device";
            if (err.message.includes("timeout")) {
              errorMessage = "Request timed out. Please check your connection and try again.";
            } else if (err.response?.data?.error) {
              errorMessage = err.response.data.error;
            }
            setError(errorMessage);
            setFlowState("deviceRegistration");
          } finally {
            setIsLoading(false);
          }
        };
        const handleVerificationSubmit = async () => {
          if (verificationCode.length !== 6 || isLoading)
            return;
          if (!window.csrfToken) {
            console.error("CSRF token missing");
            setError("Security verification failed. Please refresh the page.");
            setIsLoading(false);
            return;
          }
          setAutoSubmit(false);
          setIsLoading(true);
          setError("");
          try {
            console.log("Submitting verification code:", verificationCode);
            const deviceKey = await getStoredDeviceKey();
            const payload = { code: verificationCode };
            if (phone) {
              payload.phone = phone;
            }
            if (flowState === "deviceRegistration") {
              payload.is_device_registration = true;
            }
            const response = await axios.post("verify_code", payload, {
              headers: {
                "X-Device-Key": deviceKey,
                "X-CSRF-Token": window.csrfToken
              },
              timeout: 1e4
              // 10 second timeout
            });
            console.log("Verification response:", response.data);
            if (response.data.status === "authenticated") {
              storeDeviceSessionData(response.data);
              localStorage.setItem("authenticated_user", "true");
              setFlowState("loginSuccess");
              sessionStorage.removeItem("verification_in_progress");
              setTimeout(() => {
                window.location.href = response.data.redirect_to || "/dashboard";
              }, 1e3);
            } else if (response.data.status === "needs_handle") {
              console.log("Phone verified, now needs handle creation");
              setFlowState("createHandle");
            }
          } catch (err) {
            console.error("Verification error:", err);
            console.error("Error details:", {
              message: err.message,
              response: err.response?.data,
              status: err.response?.status
            });
            setError(err.response?.data?.error || "Invalid verification code");
            setVerificationCode("");
            setAutoSubmit(true);
          } finally {
            setIsLoading(false);
          }
        };
        const formatPhoneNumber = (value) => {
          if (!value)
            return value;
          const phoneNumber2 = value.replace(/[^\d+]/g, "");
          if (phoneNumber2.startsWith("44"))
            return `+${phoneNumber2}`;
          if (phoneNumber2.startsWith("65"))
            return `+${phoneNumber2}`;
          if (phoneNumber2.startsWith("4"))
            return `+4${phoneNumber2}`;
          if (phoneNumber2.startsWith("6"))
            return `+6${phoneNumber2}`;
          return phoneNumber2;
        };
        const handlePhoneChange = (e) => {
          const formattedPhone = formatPhoneNumber(e.target.value);
          setIdentifier(formattedPhone);
        };
        const shouldSkipDeviceCheck = () => {
          return window.location.pathname === "/dashboard" || sessionStorage.getItem("logging_out") === "true" || localStorage.getItem("authenticated_user") === "true" || // FIX: Check localStorage
          sessionStorage.getItem("device_session") === "authenticated" && sessionStorage.getItem("current_handle");
        };
        const renderLoadingState = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "flex flex-col items-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-12 w-12 border-t-2 border-teal-500 mb-4" }), /* @__PURE__ */ React2.createElement("p", { className: "text-white text-lg" }, "Connecting to SuperApp...")));
        const renderDeviceNotRegistered = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-6 text-center" }, /* @__PURE__ */ React2.createElement("div", { className: "mb-6 flex justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "w-16 h-16 rounded-full bg-gray-800 flex items-center justify-center" }, /* @__PURE__ */ React2.createElement(X, { className: "w-8 h-8 text-gray-400" }))), /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold" }, "Device Not Registered"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "This device is not linked to any SuperApp account"), /* @__PURE__ */ React2.createElement("div", { className: "animate-pulse flex justify-center mt-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-8 h-8 rounded-full border-t-2 border-teal-500 animate-spin" }))));
        const renderDeviceRegistered = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-6 text-center" }, /* @__PURE__ */ React2.createElement("div", { className: "mb-6 flex justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "w-16 h-16 rounded-full bg-teal-500 flex items-center justify-center" }, /* @__PURE__ */ React2.createElement(Check, { className: "w-8 h-8 text-white" }))), /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold" }, "Device Recognized"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "Redirecting you to dashboard..."), /* @__PURE__ */ React2.createElement("div", { className: "animate-pulse flex justify-center mt-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-8 h-8 rounded-full border-t-2 border-teal-500 animate-spin" }))));
        const renderLoginSuccess = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-6 text-center" }, /* @__PURE__ */ React2.createElement("div", { className: "mb-6 flex justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "w-16 h-16 rounded-full bg-teal-500 flex items-center justify-center" }, /* @__PURE__ */ React2.createElement(Check, { className: "w-8 h-8 text-white" }))), /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold" }, "Login Successful"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "Redirecting you to dashboard..."), /* @__PURE__ */ React2.createElement("div", { className: "animate-pulse flex justify-center mt-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-8 h-8 rounded-full border-t-2 border-teal-500 animate-spin" }))));
        const renderVerificationStep = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md" }, /* @__PURE__ */ React2.createElement("div", { className: "mb-8 flex justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "w-16 h-16 rounded-full bg-teal-500 flex items-center justify-center text-xl font-bold" }, handle ? handle[0].toUpperCase() : "S")), /* @__PURE__ */ React2.createElement("div", { className: "text-center space-y-2 mb-8" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold" }, welcomeMessage || (isQuickVerification ? `Welcome back, ${handle}` : "Verify your number")), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, isQuickVerification ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, "Quick verification required for this device", /* @__PURE__ */ React2.createElement("br", null), "Enter the code sent to ", phone) : `Enter the code sent to ${phone}`)), /* @__PURE__ */ React2.createElement("div", { className: "mb-12" }, /* @__PURE__ */ React2.createElement("div", { className: "flex justify-center gap-3" }, [...Array(6)].map((_, i) => /* @__PURE__ */ React2.createElement(
          "div",
          {
            key: i,
            className: `w-12 h-14 flex items-center justify-center text-xl 
                  border-2 rounded-lg transition-colors
                  ${verificationCode[i] ? "border-teal-500 bg-gray-800" : "border-gray-600"}`
          },
          verificationCode[i] || ""
        ))), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "tel",
            value: verificationCode,
            onChange: (e) => {
              const value = e.target.value.replace(/[^0-9]/g, "").slice(0, 6);
              setVerificationCode(value);
            },
            ref: verificationInputRef,
            className: "sr-only",
            maxLength: 6,
            autoFocus: true
          }
        )), /* @__PURE__ */ React2.createElement("div", { className: "grid grid-cols-3 gap-6 mb-8" }, [1, 2, 3, 4, 5, 6, 7, 8, 9, "", 0, "\u232B"].map((num, i) => /* @__PURE__ */ React2.createElement(
          "button",
          {
            key: i,
            onClick: () => {
              if (num === "\u232B") {
                setVerificationCode((prev) => prev.slice(0, -1));
              } else if (num !== "") {
                setVerificationCode(
                  (prev) => prev.length < 6 ? prev + num : prev
                );
              }
            },
            className: `h-14 text-2xl font-light rounded-full
                ${num === "" ? "cursor-default" : "hover:bg-gray-800 active:bg-gray-700"}`,
            disabled: isLoading
          },
          num
        ))), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center mb-4 flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" }))), isLoading && /* @__PURE__ */ React2.createElement("div", { className: "text-center mb-4 text-gray-400" }, /* @__PURE__ */ React2.createElement("div", { className: "inline-block animate-spin rounded-full h-5 w-5 border-b-2 border-teal-500 mr-2" }), "Verifying..."), /* @__PURE__ */ React2.createElement("div", { className: "flex justify-center mt-4" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handleVerificationSubmit,
            disabled: verificationCode.length < 6 || isLoading,
            className: "bg-teal-500 text-white py-2 px-6 rounded-lg hover:bg-teal-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          },
          isLoading ? "Verifying..." : "Verify"
        )), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setFlowState("loginOptions");
              setVerificationCode("");
              setIsQuickVerification(false);
              setError("");
              setIsLoading(false);
            },
            className: "text-sm text-gray-400 w-full text-center mt-4 hover:text-gray-300 transition-colors",
            disabled: isLoading
          },
          "Didn't receive code?"
        )));
        const renderLoginOptions = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-8" }, /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Welcome to SuperApp"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, deviceNotRegistered ? "This device is not registered. Please login with an existing account or create a new one." : "Login or register to continue")), /* @__PURE__ */ React2.createElement("div", { className: "bg-gray-800 p-1 rounded-lg flex mb-6" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => handleLoginMethodSelect("handle"),
            className: `flex-1 flex items-center justify-center gap-2 py-3 rounded-md transition-colors ${loginMethod === "handle" ? "bg-teal-600 text-white" : "bg-transparent text-gray-400 hover:text-white"}`
          },
          /* @__PURE__ */ React2.createElement(User, { size: 18 }),
          /* @__PURE__ */ React2.createElement("span", null, "Handle")
        ), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => handleLoginMethodSelect("phone"),
            className: `flex-1 flex items-center justify-center gap-2 py-3 rounded-md transition-colors ${loginMethod === "phone" ? "bg-teal-600 text-white" : "bg-transparent text-gray-400 hover:text-white"}`
          },
          /* @__PURE__ */ React2.createElement(Phone, { size: 18 }),
          /* @__PURE__ */ React2.createElement("span", null, "Phone")
        )), /* @__PURE__ */ React2.createElement("div", { className: "relative" }, loginMethod === "phone" ? /* @__PURE__ */ React2.createElement("div", { className: "flex" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => setShowCountrySelect(!showCountrySelect),
            className: "bg-gray-800 rounded-l-lg py-4 px-4 flex items-center gap-2 border-r border-gray-700",
            disabled: isLoading
          },
          countryCode === "+44" ? "\u{1F1EC}\u{1F1E7}" : "\u{1F1F8}\u{1F1EC}",
          " ",
          countryCode
        ), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "tel",
            value: formatPhoneDisplay(phoneNumber),
            onChange: handlePhoneInput,
            placeholder: countryCode === "+44" ? "7XXX XXX XXX" : "XXXX XXXX",
            className: "flex-1 bg-gray-800 border-0 rounded-r-lg py-4 px-6 text-lg\n                         focus:ring-2 focus:ring-teal-500 focus:outline-none",
            disabled: isLoading,
            autoFocus: true
          }
        )) : /* @__PURE__ */ React2.createElement("div", { className: "relative" }, /* @__PURE__ */ React2.createElement("div", { className: "absolute inset-y-0 left-0 pl-6 flex items-center pointer-events-none" }, /* @__PURE__ */ React2.createElement("span", { className: "text-gray-400" }, "@")), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "text",
            value: identifier.replace("@", ""),
            onChange: (e) => setIdentifier("@" + e.target.value.replace("@", "")),
            placeholder: "username",
            className: "w-full bg-gray-800 border-0 rounded-lg py-4 pl-10 pr-6 text-lg\n                         focus:ring-2 focus:ring-teal-500 focus:outline-none",
            disabled: isLoading,
            autoFocus: true
          }
        )), showCountrySelect && /* @__PURE__ */ React2.createElement("div", { className: "absolute mt-2 w-32 bg-gray-800 rounded-lg shadow-lg z-10" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setCountryCode("+44");
              setShowCountrySelect(false);
              setPhoneNumber("");
            },
            className: "w-full px-4 py-3 text-left hover:bg-gray-700 flex items-center gap-2"
          },
          "\u{1F1EC}\u{1F1E7} +44"
        ), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setCountryCode("+65");
              setShowCountrySelect(false);
              setPhoneNumber("");
            },
            className: "w-full px-4 py-3 text-left hover:bg-gray-700 flex items-center gap-2"
          },
          "\u{1F1F8}\u{1F1EC} +65"
        ))), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handleInitialSubmit,
            disabled: isLoading || !identifier || (loginMethod === "handle" ? !validateHandle() : !validatePhoneNumber()),
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                   disabled:opacity-50 disabled:cursor-not-allowed\n                   hover:bg-teal-600 transition-colors relative"
          },
          isLoading ? /* @__PURE__ */ React2.createElement("div", { className: "flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" }), "Processing...") : "Continue"
        ), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" })))));
        const renderHandleEntry = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-8" }, /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Create your handle"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "Choose a unique username to identify yourself")), /* @__PURE__ */ React2.createElement("div", { className: "relative" }, /* @__PURE__ */ React2.createElement("div", { className: "absolute inset-y-0 left-0 pl-6 flex items-center pointer-events-none" }, /* @__PURE__ */ React2.createElement("span", { className: "text-gray-400" }, "@")), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "text",
            value: identifier.replace("@", ""),
            onChange: (e) => setIdentifier("@" + e.target.value.replace("@", "")),
            placeholder: "username",
            className: "w-full bg-gray-800 border-0 rounded-lg py-4 pl-10 pr-6 text-lg\n                     focus:ring-2 focus:ring-teal-500 focus:outline-none",
            disabled: isLoading,
            autoFocus: true
          }
        )), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setHandle(identifier);
              setFlowState("phoneEntry");
            },
            disabled: isLoading || !validateHandle(),
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                   disabled:opacity-50 disabled:cursor-not-allowed\n                   hover:bg-teal-600 transition-colors"
          },
          isLoading ? /* @__PURE__ */ React2.createElement("div", { className: "flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" }), "Processing...") : "Continue"
        ), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" })))));
        const renderPhoneEntry = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-8" }, /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Enter your phone"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "We'll send a verification code to verify your number")), /* @__PURE__ */ React2.createElement("div", { className: "flex mb-2" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => setShowCountrySelect(!showCountrySelect),
            className: "bg-gray-800 rounded-l-lg py-4 px-4 flex items-center gap-2 border-r border-gray-700",
            disabled: isLoading
          },
          countryCode === "+44" ? "\u{1F1EC}\u{1F1E7}" : "\u{1F1F8}\u{1F1EC}",
          " ",
          countryCode
        ), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "tel",
            value: formatPhoneDisplay(phoneNumber),
            onChange: handlePhoneInput,
            placeholder: countryCode === "+44" ? "7XXX XXX XXX" : "XXXX XXXX",
            className: "flex-1 bg-gray-800 border-0 rounded-r-lg py-4 px-6 text-lg\n                     focus:ring-2 focus:ring-teal-500 focus:outline-none",
            disabled: isLoading,
            autoFocus: true
          }
        )), showCountrySelect && /* @__PURE__ */ React2.createElement("div", { className: "absolute mt-2 w-32 bg-gray-800 rounded-lg shadow-lg z-10" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setCountryCode("+44");
              setShowCountrySelect(false);
              setPhoneNumber("");
            },
            className: "w-full px-4 py-3 text-left hover:bg-gray-700 flex items-center gap-2"
          },
          "\u{1F1EC}\u{1F1E7} +44"
        ), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setCountryCode("+65");
              setShowCountrySelect(false);
              setPhoneNumber("");
            },
            className: "w-full px-4 py-3 text-left hover:bg-gray-700 flex items-center gap-2"
          },
          "\u{1F1F8}\u{1F1EC} +65"
        )), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handlePhoneSubmit,
            disabled: isLoading || !validatePhoneNumber(),
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                   disabled:opacity-50 disabled:cursor-not-allowed\n                   hover:bg-teal-600 transition-colors"
          },
          isLoading ? /* @__PURE__ */ React2.createElement("div", { className: "flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" }), "Sending code...") : "Send Verification Code"
        ), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => setFlowState("handleEntry"),
            className: "w-full bg-gray-800 text-white rounded-lg py-4 font-medium\n                   hover:bg-gray-700 transition-colors mt-4",
            disabled: isLoading
          },
          "Back"
        ), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" })))));
        const renderCreateHandle = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-8" }, /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Create your handle"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400" }, "This will be your unique identifier")), /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement("div", { className: "relative" }, /* @__PURE__ */ React2.createElement("div", { className: "absolute inset-y-0 left-0 pl-6 flex items-center pointer-events-none" }, /* @__PURE__ */ React2.createElement("span", { className: "text-gray-400" }, "@")), /* @__PURE__ */ React2.createElement(
          "input",
          {
            type: "text",
            value: handle.replace("@", ""),
            onChange: (e) => setHandle("@" + e.target.value.replace("@", "")),
            placeholder: "username",
            className: "w-full bg-gray-800 border-0 rounded-lg py-4 pl-10 pr-6 text-lg\n                       focus:ring-2 focus:ring-teal-500 focus:outline-none",
            disabled: isLoading,
            autoFocus: true
          }
        )), /* @__PURE__ */ React2.createElement("p", { className: "text-xs text-gray-400 mt-2 pl-2" }, "Handle must start with @ and contain only letters, numbers, and underscores")), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handleHandleSubmit,
            disabled: !handle || handle.length < 2 || isLoading || !handle.match(/^@[a-zA-Z0-9_]{1,29}$/),
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                   disabled:opacity-50 disabled:cursor-not-allowed\n                   hover:bg-teal-600 transition-colors relative"
          },
          isLoading ? /* @__PURE__ */ React2.createElement("div", { className: "flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" }), "Setting up your account...") : "Create Handle"
        ), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" })))));
        const renderHandleSuggestions = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-6" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setFlowState("deviceRegistration");
            },
            className: "flex items-center text-gray-400 hover:text-white mb-6"
          },
          /* @__PURE__ */ React2.createElement(ArrowLeft, { size: 20, className: "mr-2" }),
          "Back"
        ), /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Try a different handle"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400 mb-6" }, "Here are some available handles you might like:")), /* @__PURE__ */ React2.createElement("div", { className: "space-y-3" }, suggestedHandles.map((handle2, index) => /* @__PURE__ */ React2.createElement(
          "button",
          {
            key: index,
            onClick: () => {
              setIdentifier(handle2);
              setFlowState("loginOptions");
            },
            className: "w-full bg-gray-800 text-white rounded-lg py-4 font-medium\n                      hover:bg-gray-700 transition-colors text-left px-4"
          },
          handle2
        ))), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: () => {
              setIdentifier("@");
              setFlowState("loginOptions");
            },
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                  hover:bg-teal-600 transition-colors mt-4"
          },
          "Create your own handle"
        )));
        const renderDeviceRegistration = () => /* @__PURE__ */ React2.createElement("div", { className: "min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4" }, /* @__PURE__ */ React2.createElement("div", { className: "w-full max-w-md space-y-6" }, /* @__PURE__ */ React2.createElement("div", { className: "mb-8 flex justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "w-16 h-16 rounded-full bg-teal-500 flex items-center justify-center text-xl font-bold" }, existingUserData?.handle ? existingUserData.handle[0].toUpperCase() : "S")), /* @__PURE__ */ React2.createElement("div", { className: "text-center" }, /* @__PURE__ */ React2.createElement("h1", { className: "text-2xl font-bold mb-2" }, "Account Already Exists"), /* @__PURE__ */ React2.createElement("p", { className: "text-gray-400 mb-6" }, loginMethod === "handle" ? (
          // For handle login - partially mask for security
          `The handle ${identifier} is already registered.`
        ) : (
          // For phone number - show with handle
          `This phone number is already registered${existingUserData?.handle ? ` with the handle ${existingUserData.handle}` : ""}.`
        ), /* @__PURE__ */ React2.createElement("br", null), "Would you like to add this device to your account?", /* @__PURE__ */ React2.createElement("br", null), /* @__PURE__ */ React2.createElement("span", { className: "text-teal-400 mt-2 inline-block" }, "We'll send a verification code to confirm this is your account"))), /* @__PURE__ */ React2.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handleRegisterDevice,
            className: "w-full bg-teal-500 text-white rounded-lg py-4 font-medium\n                   hover:bg-teal-600 transition-colors",
            disabled: isLoading
          },
          isLoading ? /* @__PURE__ */ React2.createElement("div", { className: "flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("div", { className: "animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" }), "Yes, this is my account") : "Yes, this is my account"
        ), /* @__PURE__ */ React2.createElement(
          "button",
          {
            onClick: handleNotMyAccount,
            className: "w-full bg-gray-800 text-white rounded-lg py-4 font-medium\n                   hover:bg-gray-700 transition-colors",
            disabled: isLoading
          },
          "This isn't my account"
        )), error && /* @__PURE__ */ React2.createElement("div", { className: "text-red-500 text-center flex items-center justify-center" }, /* @__PURE__ */ React2.createElement("span", null, error), /* @__PURE__ */ React2.createElement("button", { onClick: () => setError(""), className: "ml-2" }, /* @__PURE__ */ React2.createElement(X, { className: "w-4 h-4" })))));
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, flowState === "checking" && renderLoadingState(), flowState === "deviceRegistered" && renderDeviceRegistered(), flowState === "loginSuccess" && renderLoginSuccess(), flowState === "deviceNotRegistered" && renderDeviceNotRegistered(), flowState === "loginOptions" && renderLoginOptions(), flowState === "handleEntry" && renderHandleEntry(), flowState === "phoneEntry" && renderPhoneEntry(), flowState === "deviceRegistration" && renderDeviceRegistration(), flowState === "verification" && renderVerificationStep(), flowState === "createHandle" && renderCreateHandle(), flowState === "handleSuggestions" && renderHandleSuggestions());
      };
      module.exports = UnifiedLogin2;
    }
  });

  // app/javascript/entrypoints/server_rendering.js
  var import_react = __toESM(require_react());
  var import_server = __toESM(require_server_browser());
  var import_UnifiedLogin = __toESM(require_UnifiedLogin());
  global.React = import_react.default;
  global.ReactDOMServer = import_server.default;
  global.UnifiedLogin = import_UnifiedLogin.default;
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.browser.development.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.browser.development.js:
  (**
   * @license React
   * react-dom-server.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/cjs/lucide-react.js:
  (**
   * @license lucide-react v0.316.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)
*/
;
